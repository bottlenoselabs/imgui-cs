
//-------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the following tool:
//        https://github.com/bottlenoselabs/c2cs (v2.3.1.0)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ReSharper disable All
//-------------------------------------------------------------------------------------
#nullable enable
#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using static bottlenoselabs.imgui.Runtime;
using System.Numerics;

namespace bottlenoselabs
{
    public static unsafe partial class imgui
    {
        private const string LibraryName = "cimgui";

        // Function @ cimgui.h:2615:20
        [DllImport(LibraryName)]
        public static extern Vector2* ImVec2_ImVec2_Nil();

        // Function @ cimgui.h:2616:17
        [DllImport(LibraryName)]
        public static extern void ImVec2_destroy(Vector2* self);

        // Function @ cimgui.h:2617:20
        [DllImport(LibraryName)]
        public static extern Vector2* ImVec2_ImVec2_Float(float _x, float _y);

        // Function @ cimgui.h:2618:20
        [DllImport(LibraryName)]
        public static extern Vector4* ImVec4_ImVec4_Nil();

        // Function @ cimgui.h:2619:17
        [DllImport(LibraryName)]
        public static extern void ImVec4_destroy(Vector4* self);

        // Function @ cimgui.h:2620:20
        [DllImport(LibraryName)]
        public static extern Vector4* ImVec4_ImVec4_Float(float _x, float _y, float _z, float _w);

        // Function @ cimgui.h:2621:26
        [DllImport(LibraryName)]
        public static extern ImGuiContext* igCreateContext(ImFontAtlas* shared_font_atlas);

        // Function @ cimgui.h:2622:17
        [DllImport(LibraryName)]
        public static extern void igDestroyContext(ImGuiContext* ctx);

        // Function @ cimgui.h:2623:26
        [DllImport(LibraryName)]
        public static extern ImGuiContext* igGetCurrentContext();

        // Function @ cimgui.h:2624:17
        [DllImport(LibraryName)]
        public static extern void igSetCurrentContext(ImGuiContext* ctx);

        // Function @ cimgui.h:2625:21
        [DllImport(LibraryName)]
        public static extern ImGuiIO* igGetIO();

        // Function @ cimgui.h:2626:24
        [DllImport(LibraryName)]
        public static extern ImGuiStyle* igGetStyle();

        // Function @ cimgui.h:2627:17
        [DllImport(LibraryName)]
        public static extern void igNewFrame();

        // Function @ cimgui.h:2628:17
        [DllImport(LibraryName)]
        public static extern void igEndFrame();

        // Function @ cimgui.h:2629:17
        [DllImport(LibraryName)]
        public static extern void igRender();

        // Function @ cimgui.h:2630:24
        [DllImport(LibraryName)]
        public static extern ImDrawData* igGetDrawData();

        // Function @ cimgui.h:2631:17
        [DllImport(LibraryName)]
        public static extern void igShowDemoWindow(CBool* p_open);

        // Function @ cimgui.h:2632:17
        [DllImport(LibraryName)]
        public static extern void igShowMetricsWindow(CBool* p_open);

        // Function @ cimgui.h:2633:17
        [DllImport(LibraryName)]
        public static extern void igShowStackToolWindow(CBool* p_open);

        // Function @ cimgui.h:2634:17
        [DllImport(LibraryName)]
        public static extern void igShowAboutWindow(CBool* p_open);

        // Function @ cimgui.h:2635:17
        [DllImport(LibraryName)]
        public static extern void igShowStyleEditor(ImGuiStyle* @ref);

        // Function @ cimgui.h:2636:17
        [DllImport(LibraryName)]
        public static extern CBool igShowStyleSelector(CString label);

        // Function @ cimgui.h:2637:17
        [DllImport(LibraryName)]
        public static extern void igShowFontSelector(CString label);

        // Function @ cimgui.h:2638:17
        [DllImport(LibraryName)]
        public static extern void igShowUserGuide();

        // Function @ cimgui.h:2639:24
        [DllImport(LibraryName)]
        public static extern CString igGetVersion();

        // Function @ cimgui.h:2640:17
        [DllImport(LibraryName)]
        public static extern void igStyleColorsDark(ImGuiStyle* dst);

        // Function @ cimgui.h:2641:17
        [DllImport(LibraryName)]
        public static extern void igStyleColorsLight(ImGuiStyle* dst);

        // Function @ cimgui.h:2642:17
        [DllImport(LibraryName)]
        public static extern void igStyleColorsClassic(ImGuiStyle* dst);

        // Function @ cimgui.h:2643:17
        [DllImport(LibraryName)]
        public static extern CBool igBegin(CString name, CBool* p_open, ImGuiWindowFlags flags);

        // Function @ cimgui.h:2644:17
        [DllImport(LibraryName)]
        public static extern void igEnd();

        // Function @ cimgui.h:2645:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginChild_Str(CString str_id, Vector2 size, CBool border, ImGuiWindowFlags flags);

        // Function @ cimgui.h:2646:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginChild_ID(ImGuiID id, Vector2 size, CBool border, ImGuiWindowFlags flags);

        // Function @ cimgui.h:2647:17
        [DllImport(LibraryName)]
        public static extern void igEndChild();

        // Function @ cimgui.h:2648:17
        [DllImport(LibraryName)]
        public static extern CBool igIsWindowAppearing();

        // Function @ cimgui.h:2649:17
        [DllImport(LibraryName)]
        public static extern CBool igIsWindowCollapsed();

        // Function @ cimgui.h:2650:17
        [DllImport(LibraryName)]
        public static extern CBool igIsWindowFocused(ImGuiFocusedFlags flags);

        // Function @ cimgui.h:2651:17
        [DllImport(LibraryName)]
        public static extern CBool igIsWindowHovered(ImGuiHoveredFlags flags);

        // Function @ cimgui.h:2652:24
        [DllImport(LibraryName)]
        public static extern ImDrawList* igGetWindowDrawList();

        // Function @ cimgui.h:2653:17
        [DllImport(LibraryName)]
        public static extern void igGetWindowPos(Vector2* pOut);

        // Function @ cimgui.h:2654:17
        [DllImport(LibraryName)]
        public static extern void igGetWindowSize(Vector2* pOut);

        // Function @ cimgui.h:2655:18
        [DllImport(LibraryName)]
        public static extern float igGetWindowWidth();

        // Function @ cimgui.h:2656:18
        [DllImport(LibraryName)]
        public static extern float igGetWindowHeight();

        // Function @ cimgui.h:2657:17
        [DllImport(LibraryName)]
        public static extern void igSetNextWindowPos(Vector2 pos, ImGuiCond cond, Vector2 pivot);

        // Function @ cimgui.h:2658:17
        [DllImport(LibraryName)]
        public static extern void igSetNextWindowSize(Vector2 size, ImGuiCond cond);

        // Function @ cimgui.h:2659:17
        [DllImport(LibraryName)]
        public static extern void igSetNextWindowSizeConstraints(Vector2 size_min, Vector2 size_max, ImGuiSizeCallback custom_callback, void* custom_callback_data);

        // Function @ cimgui.h:2660:17
        [DllImport(LibraryName)]
        public static extern void igSetNextWindowContentSize(Vector2 size);

        // Function @ cimgui.h:2661:17
        [DllImport(LibraryName)]
        public static extern void igSetNextWindowCollapsed(CBool collapsed, ImGuiCond cond);

        // Function @ cimgui.h:2662:17
        [DllImport(LibraryName)]
        public static extern void igSetNextWindowFocus();

        // Function @ cimgui.h:2663:17
        [DllImport(LibraryName)]
        public static extern void igSetNextWindowBgAlpha(float alpha);

        // Function @ cimgui.h:2664:17
        [DllImport(LibraryName)]
        public static extern void igSetWindowPos_Vec2(Vector2 pos, ImGuiCond cond);

        // Function @ cimgui.h:2665:17
        [DllImport(LibraryName)]
        public static extern void igSetWindowSize_Vec2(Vector2 size, ImGuiCond cond);

        // Function @ cimgui.h:2666:17
        [DllImport(LibraryName)]
        public static extern void igSetWindowCollapsed_Bool(CBool collapsed, ImGuiCond cond);

        // Function @ cimgui.h:2667:17
        [DllImport(LibraryName)]
        public static extern void igSetWindowFocus_Nil();

        // Function @ cimgui.h:2668:17
        [DllImport(LibraryName)]
        public static extern void igSetWindowFontScale(float scale);

        // Function @ cimgui.h:2669:17
        [DllImport(LibraryName)]
        public static extern void igSetWindowPos_Str(CString name, Vector2 pos, ImGuiCond cond);

        // Function @ cimgui.h:2670:17
        [DllImport(LibraryName)]
        public static extern void igSetWindowSize_Str(CString name, Vector2 size, ImGuiCond cond);

        // Function @ cimgui.h:2671:17
        [DllImport(LibraryName)]
        public static extern void igSetWindowCollapsed_Str(CString name, CBool collapsed, ImGuiCond cond);

        // Function @ cimgui.h:2672:17
        [DllImport(LibraryName)]
        public static extern void igSetWindowFocus_Str(CString name);

        // Function @ cimgui.h:2673:17
        [DllImport(LibraryName)]
        public static extern void igGetContentRegionAvail(Vector2* pOut);

        // Function @ cimgui.h:2674:17
        [DllImport(LibraryName)]
        public static extern void igGetContentRegionMax(Vector2* pOut);

        // Function @ cimgui.h:2675:17
        [DllImport(LibraryName)]
        public static extern void igGetWindowContentRegionMin(Vector2* pOut);

        // Function @ cimgui.h:2676:17
        [DllImport(LibraryName)]
        public static extern void igGetWindowContentRegionMax(Vector2* pOut);

        // Function @ cimgui.h:2677:18
        [DllImport(LibraryName)]
        public static extern float igGetScrollX();

        // Function @ cimgui.h:2678:18
        [DllImport(LibraryName)]
        public static extern float igGetScrollY();

        // Function @ cimgui.h:2679:17
        [DllImport(LibraryName)]
        public static extern void igSetScrollX_Float(float scroll_x);

        // Function @ cimgui.h:2680:17
        [DllImport(LibraryName)]
        public static extern void igSetScrollY_Float(float scroll_y);

        // Function @ cimgui.h:2681:18
        [DllImport(LibraryName)]
        public static extern float igGetScrollMaxX();

        // Function @ cimgui.h:2682:18
        [DllImport(LibraryName)]
        public static extern float igGetScrollMaxY();

        // Function @ cimgui.h:2683:17
        [DllImport(LibraryName)]
        public static extern void igSetScrollHereX(float center_x_ratio);

        // Function @ cimgui.h:2684:17
        [DllImport(LibraryName)]
        public static extern void igSetScrollHereY(float center_y_ratio);

        // Function @ cimgui.h:2685:17
        [DllImport(LibraryName)]
        public static extern void igSetScrollFromPosX_Float(float local_x, float center_x_ratio);

        // Function @ cimgui.h:2686:17
        [DllImport(LibraryName)]
        public static extern void igSetScrollFromPosY_Float(float local_y, float center_y_ratio);

        // Function @ cimgui.h:2687:17
        [DllImport(LibraryName)]
        public static extern void igPushFont(ImFont* font);

        // Function @ cimgui.h:2688:17
        [DllImport(LibraryName)]
        public static extern void igPopFont();

        // Function @ cimgui.h:2689:17
        [DllImport(LibraryName)]
        public static extern void igPushStyleColor_U32(ImGuiCol idx, uint col);

        // Function @ cimgui.h:2690:17
        [DllImport(LibraryName)]
        public static extern void igPushStyleColor_Vec4(ImGuiCol idx, Vector4 col);

        // Function @ cimgui.h:2691:17
        [DllImport(LibraryName)]
        public static extern void igPopStyleColor(int count);

        // Function @ cimgui.h:2692:17
        [DllImport(LibraryName)]
        public static extern void igPushStyleVar_Float(ImGuiStyleVar idx, float val);

        // Function @ cimgui.h:2693:17
        [DllImport(LibraryName)]
        public static extern void igPushStyleVar_Vec2(ImGuiStyleVar idx, Vector2 val);

        // Function @ cimgui.h:2694:17
        [DllImport(LibraryName)]
        public static extern void igPopStyleVar(int count);

        // Function @ cimgui.h:2695:17
        [DllImport(LibraryName)]
        public static extern void igPushAllowKeyboardFocus(CBool allow_keyboard_focus);

        // Function @ cimgui.h:2696:17
        [DllImport(LibraryName)]
        public static extern void igPopAllowKeyboardFocus();

        // Function @ cimgui.h:2697:17
        [DllImport(LibraryName)]
        public static extern void igPushButtonRepeat(CBool repeat);

        // Function @ cimgui.h:2698:17
        [DllImport(LibraryName)]
        public static extern void igPopButtonRepeat();

        // Function @ cimgui.h:2699:17
        [DllImport(LibraryName)]
        public static extern void igPushItemWidth(float item_width);

        // Function @ cimgui.h:2700:17
        [DllImport(LibraryName)]
        public static extern void igPopItemWidth();

        // Function @ cimgui.h:2701:17
        [DllImport(LibraryName)]
        public static extern void igSetNextItemWidth(float item_width);

        // Function @ cimgui.h:2702:18
        [DllImport(LibraryName)]
        public static extern float igCalcItemWidth();

        // Function @ cimgui.h:2703:17
        [DllImport(LibraryName)]
        public static extern void igPushTextWrapPos(float wrap_local_pos_x);

        // Function @ cimgui.h:2704:17
        [DllImport(LibraryName)]
        public static extern void igPopTextWrapPos();

        // Function @ cimgui.h:2705:20
        [DllImport(LibraryName)]
        public static extern ImFont* igGetFont();

        // Function @ cimgui.h:2706:18
        [DllImport(LibraryName)]
        public static extern float igGetFontSize();

        // Function @ cimgui.h:2707:17
        [DllImport(LibraryName)]
        public static extern void igGetFontTexUvWhitePixel(Vector2* pOut);

        // Function @ cimgui.h:2708:18
        [DllImport(LibraryName)]
        public static extern uint igGetColorU32_Col(ImGuiCol idx, float alpha_mul);

        // Function @ cimgui.h:2709:18
        [DllImport(LibraryName)]
        public static extern uint igGetColorU32_Vec4(Vector4 col);

        // Function @ cimgui.h:2710:18
        [DllImport(LibraryName)]
        public static extern uint igGetColorU32_U32(uint col);

        // Function @ cimgui.h:2711:26
        [DllImport(LibraryName)]
        public static extern Vector4* igGetStyleColorVec4(ImGuiCol idx);

        // Function @ cimgui.h:2712:17
        [DllImport(LibraryName)]
        public static extern void igSeparator();

        // Function @ cimgui.h:2713:17
        [DllImport(LibraryName)]
        public static extern void igSameLine(float offset_from_start_x, float spacing);

        // Function @ cimgui.h:2714:17
        [DllImport(LibraryName)]
        public static extern void igNewLine();

        // Function @ cimgui.h:2715:17
        [DllImport(LibraryName)]
        public static extern void igSpacing();

        // Function @ cimgui.h:2716:17
        [DllImport(LibraryName)]
        public static extern void igDummy(Vector2 size);

        // Function @ cimgui.h:2717:17
        [DllImport(LibraryName)]
        public static extern void igIndent(float indent_w);

        // Function @ cimgui.h:2718:17
        [DllImport(LibraryName)]
        public static extern void igUnindent(float indent_w);

        // Function @ cimgui.h:2719:17
        [DllImport(LibraryName)]
        public static extern void igBeginGroup();

        // Function @ cimgui.h:2720:17
        [DllImport(LibraryName)]
        public static extern void igEndGroup();

        // Function @ cimgui.h:2721:17
        [DllImport(LibraryName)]
        public static extern void igGetCursorPos(Vector2* pOut);

        // Function @ cimgui.h:2722:18
        [DllImport(LibraryName)]
        public static extern float igGetCursorPosX();

        // Function @ cimgui.h:2723:18
        [DllImport(LibraryName)]
        public static extern float igGetCursorPosY();

        // Function @ cimgui.h:2724:17
        [DllImport(LibraryName)]
        public static extern void igSetCursorPos(Vector2 local_pos);

        // Function @ cimgui.h:2725:17
        [DllImport(LibraryName)]
        public static extern void igSetCursorPosX(float local_x);

        // Function @ cimgui.h:2726:17
        [DllImport(LibraryName)]
        public static extern void igSetCursorPosY(float local_y);

        // Function @ cimgui.h:2727:17
        [DllImport(LibraryName)]
        public static extern void igGetCursorStartPos(Vector2* pOut);

        // Function @ cimgui.h:2728:17
        [DllImport(LibraryName)]
        public static extern void igGetCursorScreenPos(Vector2* pOut);

        // Function @ cimgui.h:2729:17
        [DllImport(LibraryName)]
        public static extern void igSetCursorScreenPos(Vector2 pos);

        // Function @ cimgui.h:2730:17
        [DllImport(LibraryName)]
        public static extern void igAlignTextToFramePadding();

        // Function @ cimgui.h:2731:18
        [DllImport(LibraryName)]
        public static extern float igGetTextLineHeight();

        // Function @ cimgui.h:2732:18
        [DllImport(LibraryName)]
        public static extern float igGetTextLineHeightWithSpacing();

        // Function @ cimgui.h:2733:18
        [DllImport(LibraryName)]
        public static extern float igGetFrameHeight();

        // Function @ cimgui.h:2734:18
        [DllImport(LibraryName)]
        public static extern float igGetFrameHeightWithSpacing();

        // Function @ cimgui.h:2735:17
        [DllImport(LibraryName)]
        public static extern void igPushID_Str(CString str_id);

        // Function @ cimgui.h:2736:17
        [DllImport(LibraryName)]
        public static extern void igPushID_StrStr(CString str_id_begin, CString str_id_end);

        // Function @ cimgui.h:2737:17
        [DllImport(LibraryName)]
        public static extern void igPushID_Ptr(void* ptr_id);

        // Function @ cimgui.h:2738:17
        [DllImport(LibraryName)]
        public static extern void igPushID_Int(int int_id);

        // Function @ cimgui.h:2739:17
        [DllImport(LibraryName)]
        public static extern void igPopID();

        // Function @ cimgui.h:2740:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igGetID_Str(CString str_id);

        // Function @ cimgui.h:2741:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igGetID_StrStr(CString str_id_begin, CString str_id_end);

        // Function @ cimgui.h:2742:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igGetID_Ptr(void* ptr_id);

        // Function @ cimgui.h:2743:17
        [DllImport(LibraryName)]
        public static extern void igTextUnformatted(CString text, CString text_end);

        // Function @ cimgui.h:2744:17
        [DllImport(LibraryName)]
        public static extern void igText(CString fmt);

        // Function @ cimgui.h:2745:17
        [DllImport(LibraryName)]
        public static extern void igTextV(CString fmt, nint args);

        // Function @ cimgui.h:2746:17
        [DllImport(LibraryName)]
        public static extern void igTextColored(Vector4 col, CString fmt);

        // Function @ cimgui.h:2747:17
        [DllImport(LibraryName)]
        public static extern void igTextColoredV(Vector4 col, CString fmt, nint args);

        // Function @ cimgui.h:2748:17
        [DllImport(LibraryName)]
        public static extern void igTextDisabled(CString fmt);

        // Function @ cimgui.h:2749:17
        [DllImport(LibraryName)]
        public static extern void igTextDisabledV(CString fmt, nint args);

        // Function @ cimgui.h:2750:17
        [DllImport(LibraryName)]
        public static extern void igTextWrapped(CString fmt);

        // Function @ cimgui.h:2751:17
        [DllImport(LibraryName)]
        public static extern void igTextWrappedV(CString fmt, nint args);

        // Function @ cimgui.h:2752:17
        [DllImport(LibraryName)]
        public static extern void igLabelText(CString label, CString fmt);

        // Function @ cimgui.h:2753:17
        [DllImport(LibraryName)]
        public static extern void igLabelTextV(CString label, CString fmt, nint args);

        // Function @ cimgui.h:2754:17
        [DllImport(LibraryName)]
        public static extern void igBulletText(CString fmt);

        // Function @ cimgui.h:2755:17
        [DllImport(LibraryName)]
        public static extern void igBulletTextV(CString fmt, nint args);

        // Function @ cimgui.h:2756:17
        [DllImport(LibraryName)]
        public static extern CBool igButton(CString label, Vector2 size);

        // Function @ cimgui.h:2757:17
        [DllImport(LibraryName)]
        public static extern CBool igSmallButton(CString label);

        // Function @ cimgui.h:2758:17
        [DllImport(LibraryName)]
        public static extern CBool igInvisibleButton(CString str_id, Vector2 size, ImGuiButtonFlags flags);

        // Function @ cimgui.h:2759:17
        [DllImport(LibraryName)]
        public static extern CBool igArrowButton(CString str_id, ImGuiDir dir);

        // Function @ cimgui.h:2760:17
        [DllImport(LibraryName)]
        public static extern void igImage(ImTextureID user_texture_id, Vector2 size, Vector2 uv0, Vector2 uv1, Vector4 tint_col, Vector4 border_col);

        // Function @ cimgui.h:2761:17
        [DllImport(LibraryName)]
        public static extern CBool igImageButton(ImTextureID user_texture_id, Vector2 size, Vector2 uv0, Vector2 uv1, int frame_padding, Vector4 bg_col, Vector4 tint_col);

        // Function @ cimgui.h:2762:17
        [DllImport(LibraryName)]
        public static extern CBool igCheckbox(CString label, CBool* v);

        // Function @ cimgui.h:2763:17
        [DllImport(LibraryName)]
        public static extern CBool igCheckboxFlags_IntPtr(CString label, long* flags, int flags_value);

        // Function @ cimgui.h:2764:17
        [DllImport(LibraryName)]
        public static extern CBool igCheckboxFlags_UintPtr(CString label, ulong* flags, uint flags_value);

        // Function @ cimgui.h:2765:17
        [DllImport(LibraryName)]
        public static extern CBool igRadioButton_Bool(CString label, CBool active);

        // Function @ cimgui.h:2766:17
        [DllImport(LibraryName)]
        public static extern CBool igRadioButton_IntPtr(CString label, long* v, int v_button);

        // Function @ cimgui.h:2767:17
        [DllImport(LibraryName)]
        public static extern void igProgressBar(float fraction, Vector2 size_arg, CString overlay);

        // Function @ cimgui.h:2768:17
        [DllImport(LibraryName)]
        public static extern void igBullet();

        // Function @ cimgui.h:2769:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginCombo(CString label, CString preview_value, ImGuiComboFlags flags);

        // Function @ cimgui.h:2770:17
        [DllImport(LibraryName)]
        public static extern void igEndCombo();

        // Function @ cimgui.h:2771:17
        [DllImport(LibraryName)]
        public static extern CBool igCombo_Str_arr(CString label, long* current_item, CString* items, int items_count, int popup_max_height_in_items);

        // Function @ cimgui.h:2772:17
        [DllImport(LibraryName)]
        public static extern CBool igCombo_Str(CString label, long* current_item, CString items_separated_by_zeros, int popup_max_height_in_items);

        // Function @ cimgui.h:2773:17
        [DllImport(LibraryName)]
        public static extern CBool igCombo_FnBoolPtr(CString label, long* current_item, FnPtr_VoidPtr_Int_CStringPtr_CBool items_getter, void* data, int items_count, int popup_max_height_in_items);

        // Function @ cimgui.h:2774:17
        [DllImport(LibraryName)]
        public static extern CBool igDragFloat(CString label, float* v, float v_speed, float v_min, float v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2775:17
        [DllImport(LibraryName)]
        public static extern CBool igDragFloat2(CString label, float* v, float v_speed, float v_min, float v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2776:17
        [DllImport(LibraryName)]
        public static extern CBool igDragFloat3(CString label, float* v, float v_speed, float v_min, float v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2777:17
        [DllImport(LibraryName)]
        public static extern CBool igDragFloat4(CString label, float* v, float v_speed, float v_min, float v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2778:17
        [DllImport(LibraryName)]
        public static extern CBool igDragFloatRange2(CString label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, CString format, CString format_max, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2779:17
        [DllImport(LibraryName)]
        public static extern CBool igDragInt(CString label, long* v, float v_speed, int v_min, int v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2780:17
        [DllImport(LibraryName)]
        public static extern CBool igDragInt2(CString label, int* v, float v_speed, int v_min, int v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2781:17
        [DllImport(LibraryName)]
        public static extern CBool igDragInt3(CString label, int* v, float v_speed, int v_min, int v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2782:17
        [DllImport(LibraryName)]
        public static extern CBool igDragInt4(CString label, int* v, float v_speed, int v_min, int v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2783:17
        [DllImport(LibraryName)]
        public static extern CBool igDragIntRange2(CString label, long* v_current_min, long* v_current_max, float v_speed, int v_min, int v_max, CString format, CString format_max, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2784:17
        [DllImport(LibraryName)]
        public static extern CBool igDragScalar(CString label, ImGuiDataType data_type, void* p_data, float v_speed, void* p_min, void* p_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2785:17
        [DllImport(LibraryName)]
        public static extern CBool igDragScalarN(CString label, ImGuiDataType data_type, void* p_data, int components, float v_speed, void* p_min, void* p_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2786:17
        [DllImport(LibraryName)]
        public static extern CBool igSliderFloat(CString label, float* v, float v_min, float v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2787:17
        [DllImport(LibraryName)]
        public static extern CBool igSliderFloat2(CString label, float* v, float v_min, float v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2788:17
        [DllImport(LibraryName)]
        public static extern CBool igSliderFloat3(CString label, float* v, float v_min, float v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2789:17
        [DllImport(LibraryName)]
        public static extern CBool igSliderFloat4(CString label, float* v, float v_min, float v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2790:17
        [DllImport(LibraryName)]
        public static extern CBool igSliderAngle(CString label, float* v_rad, float v_degrees_min, float v_degrees_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2791:17
        [DllImport(LibraryName)]
        public static extern CBool igSliderInt(CString label, long* v, int v_min, int v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2792:17
        [DllImport(LibraryName)]
        public static extern CBool igSliderInt2(CString label, int* v, int v_min, int v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2793:17
        [DllImport(LibraryName)]
        public static extern CBool igSliderInt3(CString label, int* v, int v_min, int v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2794:17
        [DllImport(LibraryName)]
        public static extern CBool igSliderInt4(CString label, int* v, int v_min, int v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2795:17
        [DllImport(LibraryName)]
        public static extern CBool igSliderScalar(CString label, ImGuiDataType data_type, void* p_data, void* p_min, void* p_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2796:17
        [DllImport(LibraryName)]
        public static extern CBool igSliderScalarN(CString label, ImGuiDataType data_type, void* p_data, int components, void* p_min, void* p_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2797:17
        [DllImport(LibraryName)]
        public static extern CBool igVSliderFloat(CString label, Vector2 size, float* v, float v_min, float v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2798:17
        [DllImport(LibraryName)]
        public static extern CBool igVSliderInt(CString label, Vector2 size, long* v, int v_min, int v_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2799:17
        [DllImport(LibraryName)]
        public static extern CBool igVSliderScalar(CString label, Vector2 size, ImGuiDataType data_type, void* p_data, void* p_min, void* p_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:2800:17
        [DllImport(LibraryName)]
        public static extern CBool igInputText(CString label, CString buf, ulong buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data);

        // Function @ cimgui.h:2801:17
        [DllImport(LibraryName)]
        public static extern CBool igInputTextMultiline(CString label, CString buf, ulong buf_size, Vector2 size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data);

        // Function @ cimgui.h:2802:17
        [DllImport(LibraryName)]
        public static extern CBool igInputTextWithHint(CString label, CString hint, CString buf, ulong buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data);

        // Function @ cimgui.h:2803:17
        [DllImport(LibraryName)]
        public static extern CBool igInputFloat(CString label, float* v, float step, float step_fast, CString format, ImGuiInputTextFlags flags);

        // Function @ cimgui.h:2804:17
        [DllImport(LibraryName)]
        public static extern CBool igInputFloat2(CString label, float* v, CString format, ImGuiInputTextFlags flags);

        // Function @ cimgui.h:2805:17
        [DllImport(LibraryName)]
        public static extern CBool igInputFloat3(CString label, float* v, CString format, ImGuiInputTextFlags flags);

        // Function @ cimgui.h:2806:17
        [DllImport(LibraryName)]
        public static extern CBool igInputFloat4(CString label, float* v, CString format, ImGuiInputTextFlags flags);

        // Function @ cimgui.h:2807:17
        [DllImport(LibraryName)]
        public static extern CBool igInputInt(CString label, long* v, int step, int step_fast, ImGuiInputTextFlags flags);

        // Function @ cimgui.h:2808:17
        [DllImport(LibraryName)]
        public static extern CBool igInputInt2(CString label, int* v, ImGuiInputTextFlags flags);

        // Function @ cimgui.h:2809:17
        [DllImport(LibraryName)]
        public static extern CBool igInputInt3(CString label, int* v, ImGuiInputTextFlags flags);

        // Function @ cimgui.h:2810:17
        [DllImport(LibraryName)]
        public static extern CBool igInputInt4(CString label, int* v, ImGuiInputTextFlags flags);

        // Function @ cimgui.h:2811:17
        [DllImport(LibraryName)]
        public static extern CBool igInputDouble(CString label, double* v, double step, double step_fast, CString format, ImGuiInputTextFlags flags);

        // Function @ cimgui.h:2812:17
        [DllImport(LibraryName)]
        public static extern CBool igInputScalar(CString label, ImGuiDataType data_type, void* p_data, void* p_step, void* p_step_fast, CString format, ImGuiInputTextFlags flags);

        // Function @ cimgui.h:2813:17
        [DllImport(LibraryName)]
        public static extern CBool igInputScalarN(CString label, ImGuiDataType data_type, void* p_data, int components, void* p_step, void* p_step_fast, CString format, ImGuiInputTextFlags flags);

        // Function @ cimgui.h:2814:17
        [DllImport(LibraryName)]
        public static extern CBool igColorEdit3(CString label, float* col, ImGuiColorEditFlags flags);

        // Function @ cimgui.h:2815:17
        [DllImport(LibraryName)]
        public static extern CBool igColorEdit4(CString label, float* col, ImGuiColorEditFlags flags);

        // Function @ cimgui.h:2816:17
        [DllImport(LibraryName)]
        public static extern CBool igColorPicker3(CString label, float* col, ImGuiColorEditFlags flags);

        // Function @ cimgui.h:2817:17
        [DllImport(LibraryName)]
        public static extern CBool igColorPicker4(CString label, float* col, ImGuiColorEditFlags flags, float* ref_col);

        // Function @ cimgui.h:2818:17
        [DllImport(LibraryName)]
        public static extern CBool igColorButton(CString desc_id, Vector4 col, ImGuiColorEditFlags flags, Vector2 size);

        // Function @ cimgui.h:2819:17
        [DllImport(LibraryName)]
        public static extern void igSetColorEditOptions(ImGuiColorEditFlags flags);

        // Function @ cimgui.h:2820:17
        [DllImport(LibraryName)]
        public static extern CBool igTreeNode_Str(CString label);

        // Function @ cimgui.h:2821:17
        [DllImport(LibraryName)]
        public static extern CBool igTreeNode_StrStr(CString str_id, CString fmt);

        // Function @ cimgui.h:2822:17
        [DllImport(LibraryName)]
        public static extern CBool igTreeNode_Ptr(void* ptr_id, CString fmt);

        // Function @ cimgui.h:2823:17
        [DllImport(LibraryName)]
        public static extern CBool igTreeNodeV_Str(CString str_id, CString fmt, nint args);

        // Function @ cimgui.h:2824:17
        [DllImport(LibraryName)]
        public static extern CBool igTreeNodeV_Ptr(void* ptr_id, CString fmt, nint args);

        // Function @ cimgui.h:2825:17
        [DllImport(LibraryName)]
        public static extern CBool igTreeNodeEx_Str(CString label, ImGuiTreeNodeFlags flags);

        // Function @ cimgui.h:2826:17
        [DllImport(LibraryName)]
        public static extern CBool igTreeNodeEx_StrStr(CString str_id, ImGuiTreeNodeFlags flags, CString fmt);

        // Function @ cimgui.h:2827:17
        [DllImport(LibraryName)]
        public static extern CBool igTreeNodeEx_Ptr(void* ptr_id, ImGuiTreeNodeFlags flags, CString fmt);

        // Function @ cimgui.h:2828:17
        [DllImport(LibraryName)]
        public static extern CBool igTreeNodeExV_Str(CString str_id, ImGuiTreeNodeFlags flags, CString fmt, nint args);

        // Function @ cimgui.h:2829:17
        [DllImport(LibraryName)]
        public static extern CBool igTreeNodeExV_Ptr(void* ptr_id, ImGuiTreeNodeFlags flags, CString fmt, nint args);

        // Function @ cimgui.h:2830:17
        [DllImport(LibraryName)]
        public static extern void igTreePush_Str(CString str_id);

        // Function @ cimgui.h:2831:17
        [DllImport(LibraryName)]
        public static extern void igTreePush_Ptr(void* ptr_id);

        // Function @ cimgui.h:2832:17
        [DllImport(LibraryName)]
        public static extern void igTreePop();

        // Function @ cimgui.h:2833:18
        [DllImport(LibraryName)]
        public static extern float igGetTreeNodeToLabelSpacing();

        // Function @ cimgui.h:2834:17
        [DllImport(LibraryName)]
        public static extern CBool igCollapsingHeader_TreeNodeFlags(CString label, ImGuiTreeNodeFlags flags);

        // Function @ cimgui.h:2835:17
        [DllImport(LibraryName)]
        public static extern CBool igCollapsingHeader_BoolPtr(CString label, CBool* p_visible, ImGuiTreeNodeFlags flags);

        // Function @ cimgui.h:2836:17
        [DllImport(LibraryName)]
        public static extern void igSetNextItemOpen(CBool is_open, ImGuiCond cond);

        // Function @ cimgui.h:2837:17
        [DllImport(LibraryName)]
        public static extern CBool igSelectable_Bool(CString label, CBool selected, ImGuiSelectableFlags flags, Vector2 size);

        // Function @ cimgui.h:2838:17
        [DllImport(LibraryName)]
        public static extern CBool igSelectable_BoolPtr(CString label, CBool* p_selected, ImGuiSelectableFlags flags, Vector2 size);

        // Function @ cimgui.h:2839:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginListBox(CString label, Vector2 size);

        // Function @ cimgui.h:2840:17
        [DllImport(LibraryName)]
        public static extern void igEndListBox();

        // Function @ cimgui.h:2841:17
        [DllImport(LibraryName)]
        public static extern CBool igListBox_Str_arr(CString label, long* current_item, CString* items, int items_count, int height_in_items);

        // Function @ cimgui.h:2842:17
        [DllImport(LibraryName)]
        public static extern CBool igListBox_FnBoolPtr(CString label, long* current_item, FnPtr_VoidPtr_Int_CStringPtr_CBool items_getter, void* data, int items_count, int height_in_items);

        // Function @ cimgui.h:2843:17
        [DllImport(LibraryName)]
        public static extern void igPlotLines_FloatPtr(CString label, float* values, int values_count, int values_offset, CString overlay_text, float scale_min, float scale_max, Vector2 graph_size, int stride);

        // Function @ cimgui.h:2844:17
        [DllImport(LibraryName)]
        public static extern void igPlotLines_FnFloatPtr(CString label, FnPtr_VoidPtr_Int_Float values_getter, void* data, int values_count, int values_offset, CString overlay_text, float scale_min, float scale_max, Vector2 graph_size);

        // Function @ cimgui.h:2845:17
        [DllImport(LibraryName)]
        public static extern void igPlotHistogram_FloatPtr(CString label, float* values, int values_count, int values_offset, CString overlay_text, float scale_min, float scale_max, Vector2 graph_size, int stride);

        // Function @ cimgui.h:2846:17
        [DllImport(LibraryName)]
        public static extern void igPlotHistogram_FnFloatPtr(CString label, FnPtr_VoidPtr_Int_Float values_getter, void* data, int values_count, int values_offset, CString overlay_text, float scale_min, float scale_max, Vector2 graph_size);

        // Function @ cimgui.h:2847:17
        [DllImport(LibraryName)]
        public static extern void igValue_Bool(CString prefix, CBool b);

        // Function @ cimgui.h:2848:17
        [DllImport(LibraryName)]
        public static extern void igValue_Int(CString prefix, int v);

        // Function @ cimgui.h:2849:17
        [DllImport(LibraryName)]
        public static extern void igValue_Uint(CString prefix, uint v);

        // Function @ cimgui.h:2850:17
        [DllImport(LibraryName)]
        public static extern void igValue_Float(CString prefix, float v, CString float_format);

        // Function @ cimgui.h:2851:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginMenuBar();

        // Function @ cimgui.h:2852:17
        [DllImport(LibraryName)]
        public static extern void igEndMenuBar();

        // Function @ cimgui.h:2853:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginMainMenuBar();

        // Function @ cimgui.h:2854:17
        [DllImport(LibraryName)]
        public static extern void igEndMainMenuBar();

        // Function @ cimgui.h:2855:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginMenu(CString label, CBool enabled);

        // Function @ cimgui.h:2856:17
        [DllImport(LibraryName)]
        public static extern void igEndMenu();

        // Function @ cimgui.h:2857:17
        [DllImport(LibraryName)]
        public static extern CBool igMenuItem_Bool(CString label, CString shortcut, CBool selected, CBool enabled);

        // Function @ cimgui.h:2858:17
        [DllImport(LibraryName)]
        public static extern CBool igMenuItem_BoolPtr(CString label, CString shortcut, CBool* p_selected, CBool enabled);

        // Function @ cimgui.h:2859:17
        [DllImport(LibraryName)]
        public static extern void igBeginTooltip();

        // Function @ cimgui.h:2860:17
        [DllImport(LibraryName)]
        public static extern void igEndTooltip();

        // Function @ cimgui.h:2861:17
        [DllImport(LibraryName)]
        public static extern void igSetTooltip(CString fmt);

        // Function @ cimgui.h:2862:17
        [DllImport(LibraryName)]
        public static extern void igSetTooltipV(CString fmt, nint args);

        // Function @ cimgui.h:2863:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginPopup(CString str_id, ImGuiWindowFlags flags);

        // Function @ cimgui.h:2864:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginPopupModal(CString name, CBool* p_open, ImGuiWindowFlags flags);

        // Function @ cimgui.h:2865:17
        [DllImport(LibraryName)]
        public static extern void igEndPopup();

        // Function @ cimgui.h:2866:17
        [DllImport(LibraryName)]
        public static extern void igOpenPopup_Str(CString str_id, ImGuiPopupFlags popup_flags);

        // Function @ cimgui.h:2867:17
        [DllImport(LibraryName)]
        public static extern void igOpenPopup_ID(ImGuiID id, ImGuiPopupFlags popup_flags);

        // Function @ cimgui.h:2868:17
        [DllImport(LibraryName)]
        public static extern void igOpenPopupOnItemClick(CString str_id, ImGuiPopupFlags popup_flags);

        // Function @ cimgui.h:2869:17
        [DllImport(LibraryName)]
        public static extern void igCloseCurrentPopup();

        // Function @ cimgui.h:2870:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginPopupContextItem(CString str_id, ImGuiPopupFlags popup_flags);

        // Function @ cimgui.h:2871:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginPopupContextWindow(CString str_id, ImGuiPopupFlags popup_flags);

        // Function @ cimgui.h:2872:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginPopupContextVoid(CString str_id, ImGuiPopupFlags popup_flags);

        // Function @ cimgui.h:2873:17
        [DllImport(LibraryName)]
        public static extern CBool igIsPopupOpen_Str(CString str_id, ImGuiPopupFlags flags);

        // Function @ cimgui.h:2874:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginTable(CString str_id, int column, ImGuiTableFlags flags, Vector2 outer_size, float inner_width);

        // Function @ cimgui.h:2875:17
        [DllImport(LibraryName)]
        public static extern void igEndTable();

        // Function @ cimgui.h:2876:17
        [DllImport(LibraryName)]
        public static extern void igTableNextRow(ImGuiTableRowFlags row_flags, float min_row_height);

        // Function @ cimgui.h:2877:17
        [DllImport(LibraryName)]
        public static extern CBool igTableNextColumn();

        // Function @ cimgui.h:2878:17
        [DllImport(LibraryName)]
        public static extern CBool igTableSetColumnIndex(int column_n);

        // Function @ cimgui.h:2879:17
        [DllImport(LibraryName)]
        public static extern void igTableSetupColumn(CString label, ImGuiTableColumnFlags flags, float init_width_or_weight, ImGuiID user_id);

        // Function @ cimgui.h:2880:17
        [DllImport(LibraryName)]
        public static extern void igTableSetupScrollFreeze(int cols, int rows);

        // Function @ cimgui.h:2881:17
        [DllImport(LibraryName)]
        public static extern void igTableHeadersRow();

        // Function @ cimgui.h:2882:17
        [DllImport(LibraryName)]
        public static extern void igTableHeader(CString label);

        // Function @ cimgui.h:2883:33
        [DllImport(LibraryName)]
        public static extern ImGuiTableSortSpecs* igTableGetSortSpecs();

        // Function @ cimgui.h:2884:16
        [DllImport(LibraryName)]
        public static extern int igTableGetColumnCount();

        // Function @ cimgui.h:2885:16
        [DllImport(LibraryName)]
        public static extern int igTableGetColumnIndex();

        // Function @ cimgui.h:2886:16
        [DllImport(LibraryName)]
        public static extern int igTableGetRowIndex();

        // Function @ cimgui.h:2887:24
        [DllImport(LibraryName)]
        public static extern CString igTableGetColumnName_Int(int column_n);

        // Function @ cimgui.h:2888:34
        [DllImport(LibraryName)]
        public static extern ImGuiTableColumnFlags igTableGetColumnFlags(int column_n);

        // Function @ cimgui.h:2889:17
        [DllImport(LibraryName)]
        public static extern void igTableSetColumnEnabled(int column_n, CBool v);

        // Function @ cimgui.h:2890:17
        [DllImport(LibraryName)]
        public static extern void igTableSetBgColor(ImGuiTableBgTarget target, uint color, int column_n);

        // Function @ cimgui.h:2891:17
        [DllImport(LibraryName)]
        public static extern void igColumns(int count, CString id, CBool border);

        // Function @ cimgui.h:2892:17
        [DllImport(LibraryName)]
        public static extern void igNextColumn();

        // Function @ cimgui.h:2893:16
        [DllImport(LibraryName)]
        public static extern int igGetColumnIndex();

        // Function @ cimgui.h:2894:18
        [DllImport(LibraryName)]
        public static extern float igGetColumnWidth(int column_index);

        // Function @ cimgui.h:2895:17
        [DllImport(LibraryName)]
        public static extern void igSetColumnWidth(int column_index, float width);

        // Function @ cimgui.h:2896:18
        [DllImport(LibraryName)]
        public static extern float igGetColumnOffset(int column_index);

        // Function @ cimgui.h:2897:17
        [DllImport(LibraryName)]
        public static extern void igSetColumnOffset(int column_index, float offset_x);

        // Function @ cimgui.h:2898:16
        [DllImport(LibraryName)]
        public static extern int igGetColumnsCount();

        // Function @ cimgui.h:2899:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginTabBar(CString str_id, ImGuiTabBarFlags flags);

        // Function @ cimgui.h:2900:17
        [DllImport(LibraryName)]
        public static extern void igEndTabBar();

        // Function @ cimgui.h:2901:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginTabItem(CString label, CBool* p_open, ImGuiTabItemFlags flags);

        // Function @ cimgui.h:2902:17
        [DllImport(LibraryName)]
        public static extern void igEndTabItem();

        // Function @ cimgui.h:2903:17
        [DllImport(LibraryName)]
        public static extern CBool igTabItemButton(CString label, ImGuiTabItemFlags flags);

        // Function @ cimgui.h:2904:17
        [DllImport(LibraryName)]
        public static extern void igSetTabItemClosed(CString tab_or_docked_window_label);

        // Function @ cimgui.h:2905:17
        [DllImport(LibraryName)]
        public static extern void igLogToTTY(int auto_open_depth);

        // Function @ cimgui.h:2906:17
        [DllImport(LibraryName)]
        public static extern void igLogToFile(int auto_open_depth, CString filename);

        // Function @ cimgui.h:2907:17
        [DllImport(LibraryName)]
        public static extern void igLogToClipboard(int auto_open_depth);

        // Function @ cimgui.h:2908:17
        [DllImport(LibraryName)]
        public static extern void igLogFinish();

        // Function @ cimgui.h:2909:17
        [DllImport(LibraryName)]
        public static extern void igLogButtons();

        // Function @ cimgui.h:2910:17
        [DllImport(LibraryName)]
        public static extern void igLogTextV(CString fmt, nint args);

        // Function @ cimgui.h:2911:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginDragDropSource(ImGuiDragDropFlags flags);

        // Function @ cimgui.h:2912:17
        [DllImport(LibraryName)]
        public static extern CBool igSetDragDropPayload(CString type, void* data, ulong sz, ImGuiCond cond);

        // Function @ cimgui.h:2913:17
        [DllImport(LibraryName)]
        public static extern void igEndDragDropSource();

        // Function @ cimgui.h:2914:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginDragDropTarget();

        // Function @ cimgui.h:2915:32
        [DllImport(LibraryName)]
        public static extern ImGuiPayload* igAcceptDragDropPayload(CString type, ImGuiDragDropFlags flags);

        // Function @ cimgui.h:2916:17
        [DllImport(LibraryName)]
        public static extern void igEndDragDropTarget();

        // Function @ cimgui.h:2917:32
        [DllImport(LibraryName)]
        public static extern ImGuiPayload* igGetDragDropPayload();

        // Function @ cimgui.h:2918:17
        [DllImport(LibraryName)]
        public static extern void igBeginDisabled(CBool disabled);

        // Function @ cimgui.h:2919:17
        [DllImport(LibraryName)]
        public static extern void igEndDisabled();

        // Function @ cimgui.h:2920:17
        [DllImport(LibraryName)]
        public static extern void igPushClipRect(Vector2 clip_rect_min, Vector2 clip_rect_max, CBool intersect_with_current_clip_rect);

        // Function @ cimgui.h:2921:17
        [DllImport(LibraryName)]
        public static extern void igPopClipRect();

        // Function @ cimgui.h:2922:17
        [DllImport(LibraryName)]
        public static extern void igSetItemDefaultFocus();

        // Function @ cimgui.h:2923:17
        [DllImport(LibraryName)]
        public static extern void igSetKeyboardFocusHere(int offset);

        // Function @ cimgui.h:2924:17
        [DllImport(LibraryName)]
        public static extern CBool igIsItemHovered(ImGuiHoveredFlags flags);

        // Function @ cimgui.h:2925:17
        [DllImport(LibraryName)]
        public static extern CBool igIsItemActive();

        // Function @ cimgui.h:2926:17
        [DllImport(LibraryName)]
        public static extern CBool igIsItemFocused();

        // Function @ cimgui.h:2927:17
        [DllImport(LibraryName)]
        public static extern CBool igIsItemClicked(ImGuiMouseButton mouse_button);

        // Function @ cimgui.h:2928:17
        [DllImport(LibraryName)]
        public static extern CBool igIsItemVisible();

        // Function @ cimgui.h:2929:17
        [DllImport(LibraryName)]
        public static extern CBool igIsItemEdited();

        // Function @ cimgui.h:2930:17
        [DllImport(LibraryName)]
        public static extern CBool igIsItemActivated();

        // Function @ cimgui.h:2931:17
        [DllImport(LibraryName)]
        public static extern CBool igIsItemDeactivated();

        // Function @ cimgui.h:2932:17
        [DllImport(LibraryName)]
        public static extern CBool igIsItemDeactivatedAfterEdit();

        // Function @ cimgui.h:2933:17
        [DllImport(LibraryName)]
        public static extern CBool igIsItemToggledOpen();

        // Function @ cimgui.h:2934:17
        [DllImport(LibraryName)]
        public static extern CBool igIsAnyItemHovered();

        // Function @ cimgui.h:2935:17
        [DllImport(LibraryName)]
        public static extern CBool igIsAnyItemActive();

        // Function @ cimgui.h:2936:17
        [DllImport(LibraryName)]
        public static extern CBool igIsAnyItemFocused();

        // Function @ cimgui.h:2937:17
        [DllImport(LibraryName)]
        public static extern void igGetItemRectMin(Vector2* pOut);

        // Function @ cimgui.h:2938:17
        [DllImport(LibraryName)]
        public static extern void igGetItemRectMax(Vector2* pOut);

        // Function @ cimgui.h:2939:17
        [DllImport(LibraryName)]
        public static extern void igGetItemRectSize(Vector2* pOut);

        // Function @ cimgui.h:2940:17
        [DllImport(LibraryName)]
        public static extern void igSetItemAllowOverlap();

        // Function @ cimgui.h:2941:27
        [DllImport(LibraryName)]
        public static extern ImGuiViewport* igGetMainViewport();

        // Function @ cimgui.h:2942:17
        [DllImport(LibraryName)]
        public static extern CBool igIsRectVisible_Nil(Vector2 size);

        // Function @ cimgui.h:2943:17
        [DllImport(LibraryName)]
        public static extern CBool igIsRectVisible_Vec2(Vector2 rect_min, Vector2 rect_max);

        // Function @ cimgui.h:2944:19
        [DllImport(LibraryName)]
        public static extern double igGetTime();

        // Function @ cimgui.h:2945:16
        [DllImport(LibraryName)]
        public static extern int igGetFrameCount();

        // Function @ cimgui.h:2946:24
        [DllImport(LibraryName)]
        public static extern ImDrawList* igGetBackgroundDrawList_Nil();

        // Function @ cimgui.h:2947:24
        [DllImport(LibraryName)]
        public static extern ImDrawList* igGetForegroundDrawList_Nil();

        // Function @ cimgui.h:2948:34
        [DllImport(LibraryName)]
        public static extern ImDrawListSharedData* igGetDrawListSharedData();

        // Function @ cimgui.h:2949:24
        [DllImport(LibraryName)]
        public static extern CString igGetStyleColorName(ImGuiCol idx);

        // Function @ cimgui.h:2950:17
        [DllImport(LibraryName)]
        public static extern void igSetStateStorage(ImGuiStorage* storage);

        // Function @ cimgui.h:2951:26
        [DllImport(LibraryName)]
        public static extern ImGuiStorage* igGetStateStorage();

        // Function @ cimgui.h:2952:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginChildFrame(ImGuiID id, Vector2 size, ImGuiWindowFlags flags);

        // Function @ cimgui.h:2953:17
        [DllImport(LibraryName)]
        public static extern void igEndChildFrame();

        // Function @ cimgui.h:2954:17
        [DllImport(LibraryName)]
        public static extern void igCalcTextSize(Vector2* pOut, CString text, CString text_end, CBool hide_text_after_double_hash, float wrap_width);

        // Function @ cimgui.h:2955:17
        [DllImport(LibraryName)]
        public static extern void igColorConvertU32ToFloat4(Vector4* pOut, uint @in);

        // Function @ cimgui.h:2956:18
        [DllImport(LibraryName)]
        public static extern uint igColorConvertFloat4ToU32(Vector4 @in);

        // Function @ cimgui.h:2957:17
        [DllImport(LibraryName)]
        public static extern void igColorConvertRGBtoHSV(float r, float g, float b, float* out_h, float* out_s, float* out_v);

        // Function @ cimgui.h:2958:17
        [DllImport(LibraryName)]
        public static extern void igColorConvertHSVtoRGB(float h, float s, float v, float* out_r, float* out_g, float* out_b);

        // Function @ cimgui.h:2959:17
        [DllImport(LibraryName)]
        public static extern CBool igIsKeyDown(ImGuiKey key);

        // Function @ cimgui.h:2960:17
        [DllImport(LibraryName)]
        public static extern CBool igIsKeyPressed(ImGuiKey key, CBool repeat);

        // Function @ cimgui.h:2961:17
        [DllImport(LibraryName)]
        public static extern CBool igIsKeyReleased(ImGuiKey key);

        // Function @ cimgui.h:2962:16
        [DllImport(LibraryName)]
        public static extern int igGetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate);

        // Function @ cimgui.h:2963:24
        [DllImport(LibraryName)]
        public static extern CString igGetKeyName(ImGuiKey key);

        // Function @ cimgui.h:2964:17
        [DllImport(LibraryName)]
        public static extern void igCaptureKeyboardFromApp(CBool want_capture_keyboard_value);

        // Function @ cimgui.h:2965:17
        [DllImport(LibraryName)]
        public static extern CBool igIsMouseDown(ImGuiMouseButton button);

        // Function @ cimgui.h:2966:17
        [DllImport(LibraryName)]
        public static extern CBool igIsMouseClicked(ImGuiMouseButton button, CBool repeat);

        // Function @ cimgui.h:2967:17
        [DllImport(LibraryName)]
        public static extern CBool igIsMouseReleased(ImGuiMouseButton button);

        // Function @ cimgui.h:2968:17
        [DllImport(LibraryName)]
        public static extern CBool igIsMouseDoubleClicked(ImGuiMouseButton button);

        // Function @ cimgui.h:2969:16
        [DllImport(LibraryName)]
        public static extern int igGetMouseClickedCount(ImGuiMouseButton button);

        // Function @ cimgui.h:2970:17
        [DllImport(LibraryName)]
        public static extern CBool igIsMouseHoveringRect(Vector2 r_min, Vector2 r_max, CBool clip);

        // Function @ cimgui.h:2971:17
        [DllImport(LibraryName)]
        public static extern CBool igIsMousePosValid(Vector2* mouse_pos);

        // Function @ cimgui.h:2972:17
        [DllImport(LibraryName)]
        public static extern CBool igIsAnyMouseDown();

        // Function @ cimgui.h:2973:17
        [DllImport(LibraryName)]
        public static extern void igGetMousePos(Vector2* pOut);

        // Function @ cimgui.h:2974:17
        [DllImport(LibraryName)]
        public static extern void igGetMousePosOnOpeningCurrentPopup(Vector2* pOut);

        // Function @ cimgui.h:2975:17
        [DllImport(LibraryName)]
        public static extern CBool igIsMouseDragging(ImGuiMouseButton button, float lock_threshold);

        // Function @ cimgui.h:2976:17
        [DllImport(LibraryName)]
        public static extern void igGetMouseDragDelta(Vector2* pOut, ImGuiMouseButton button, float lock_threshold);

        // Function @ cimgui.h:2977:17
        [DllImport(LibraryName)]
        public static extern void igResetMouseDragDelta(ImGuiMouseButton button);

        // Function @ cimgui.h:2978:29
        [DllImport(LibraryName)]
        public static extern ImGuiMouseCursor igGetMouseCursor();

        // Function @ cimgui.h:2979:17
        [DllImport(LibraryName)]
        public static extern void igSetMouseCursor(ImGuiMouseCursor cursor_type);

        // Function @ cimgui.h:2980:17
        [DllImport(LibraryName)]
        public static extern void igCaptureMouseFromApp(CBool want_capture_mouse_value);

        // Function @ cimgui.h:2981:24
        [DllImport(LibraryName)]
        public static extern CString igGetClipboardText();

        // Function @ cimgui.h:2982:17
        [DllImport(LibraryName)]
        public static extern void igSetClipboardText(CString text);

        // Function @ cimgui.h:2983:17
        [DllImport(LibraryName)]
        public static extern void igLoadIniSettingsFromDisk(CString ini_filename);

        // Function @ cimgui.h:2984:17
        [DllImport(LibraryName)]
        public static extern void igLoadIniSettingsFromMemory(CString ini_data, ulong ini_size);

        // Function @ cimgui.h:2985:17
        [DllImport(LibraryName)]
        public static extern void igSaveIniSettingsToDisk(CString ini_filename);

        // Function @ cimgui.h:2986:24
        [DllImport(LibraryName)]
        public static extern CString igSaveIniSettingsToMemory(ulong* out_ini_size);

        // Function @ cimgui.h:2987:17
        [DllImport(LibraryName)]
        public static extern CBool igDebugCheckVersionAndDataLayout(CString version_str, ulong sz_io, ulong sz_style, ulong sz_vec2, ulong sz_vec4, ulong sz_drawvert, ulong sz_drawidx);

        // Function @ cimgui.h:2988:17
        [DllImport(LibraryName)]
        public static extern void igSetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void* user_data);

        // Function @ cimgui.h:2989:17
        [DllImport(LibraryName)]
        public static extern void igGetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func, void** p_user_data);

        // Function @ cimgui.h:2990:18
        [DllImport(LibraryName)]
        public static extern void* igMemAlloc(ulong size);

        // Function @ cimgui.h:2991:17
        [DllImport(LibraryName)]
        public static extern void igMemFree(void* ptr);

        // Function @ cimgui.h:2992:24
        [DllImport(LibraryName)]
        public static extern ImGuiStyle* ImGuiStyle_ImGuiStyle();

        // Function @ cimgui.h:2993:17
        [DllImport(LibraryName)]
        public static extern void ImGuiStyle_destroy(ImGuiStyle* self);

        // Function @ cimgui.h:2994:17
        [DllImport(LibraryName)]
        public static extern void ImGuiStyle_ScaleAllSizes(ImGuiStyle* self, float scale_factor);

        // Function @ cimgui.h:2995:17
        [DllImport(LibraryName)]
        public static extern void ImGuiIO_AddKeyEvent(ImGuiIO* self, ImGuiKey key, CBool down);

        // Function @ cimgui.h:2996:17
        [DllImport(LibraryName)]
        public static extern void ImGuiIO_AddKeyAnalogEvent(ImGuiIO* self, ImGuiKey key, CBool down, float v);

        // Function @ cimgui.h:2997:17
        [DllImport(LibraryName)]
        public static extern void ImGuiIO_AddMousePosEvent(ImGuiIO* self, float x, float y);

        // Function @ cimgui.h:2998:17
        [DllImport(LibraryName)]
        public static extern void ImGuiIO_AddMouseButtonEvent(ImGuiIO* self, int button, CBool down);

        // Function @ cimgui.h:2999:17
        [DllImport(LibraryName)]
        public static extern void ImGuiIO_AddMouseWheelEvent(ImGuiIO* self, float wh_x, float wh_y);

        // Function @ cimgui.h:3000:17
        [DllImport(LibraryName)]
        public static extern void ImGuiIO_AddFocusEvent(ImGuiIO* self, CBool focused);

        // Function @ cimgui.h:3001:17
        [DllImport(LibraryName)]
        public static extern void ImGuiIO_AddInputCharacter(ImGuiIO* self, uint c);

        // Function @ cimgui.h:3002:17
        [DllImport(LibraryName)]
        public static extern void ImGuiIO_AddInputCharacterUTF16(ImGuiIO* self, ushort c);

        // Function @ cimgui.h:3003:17
        [DllImport(LibraryName)]
        public static extern void ImGuiIO_AddInputCharactersUTF8(ImGuiIO* self, CString str);

        // Function @ cimgui.h:3004:17
        [DllImport(LibraryName)]
        public static extern void ImGuiIO_ClearInputCharacters(ImGuiIO* self);

        // Function @ cimgui.h:3005:17
        [DllImport(LibraryName)]
        public static extern void ImGuiIO_ClearInputKeys(ImGuiIO* self);

        // Function @ cimgui.h:3006:17
        [DllImport(LibraryName)]
        public static extern void ImGuiIO_SetKeyEventNativeData(ImGuiIO* self, ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index);

        // Function @ cimgui.h:3007:21
        [DllImport(LibraryName)]
        public static extern ImGuiIO* ImGuiIO_ImGuiIO();

        // Function @ cimgui.h:3008:17
        [DllImport(LibraryName)]
        public static extern void ImGuiIO_destroy(ImGuiIO* self);

        // Function @ cimgui.h:3009:40
        [DllImport(LibraryName)]
        public static extern ImGuiInputTextCallbackData* ImGuiInputTextCallbackData_ImGuiInputTextCallbackData();

        // Function @ cimgui.h:3010:17
        [DllImport(LibraryName)]
        public static extern void ImGuiInputTextCallbackData_destroy(ImGuiInputTextCallbackData* self);

        // Function @ cimgui.h:3011:17
        [DllImport(LibraryName)]
        public static extern void ImGuiInputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData* self, int pos, int bytes_count);

        // Function @ cimgui.h:3012:17
        [DllImport(LibraryName)]
        public static extern void ImGuiInputTextCallbackData_InsertChars(ImGuiInputTextCallbackData* self, int pos, CString text, CString text_end);

        // Function @ cimgui.h:3013:17
        [DllImport(LibraryName)]
        public static extern void ImGuiInputTextCallbackData_SelectAll(ImGuiInputTextCallbackData* self);

        // Function @ cimgui.h:3014:17
        [DllImport(LibraryName)]
        public static extern void ImGuiInputTextCallbackData_ClearSelection(ImGuiInputTextCallbackData* self);

        // Function @ cimgui.h:3015:17
        [DllImport(LibraryName)]
        public static extern CBool ImGuiInputTextCallbackData_HasSelection(ImGuiInputTextCallbackData* self);

        // Function @ cimgui.h:3016:26
        [DllImport(LibraryName)]
        public static extern ImGuiPayload* ImGuiPayload_ImGuiPayload();

        // Function @ cimgui.h:3017:17
        [DllImport(LibraryName)]
        public static extern void ImGuiPayload_destroy(ImGuiPayload* self);

        // Function @ cimgui.h:3018:17
        [DllImport(LibraryName)]
        public static extern void ImGuiPayload_Clear(ImGuiPayload* self);

        // Function @ cimgui.h:3019:17
        [DllImport(LibraryName)]
        public static extern CBool ImGuiPayload_IsDataType(ImGuiPayload* self, CString type);

        // Function @ cimgui.h:3020:17
        [DllImport(LibraryName)]
        public static extern CBool ImGuiPayload_IsPreview(ImGuiPayload* self);

        // Function @ cimgui.h:3021:17
        [DllImport(LibraryName)]
        public static extern CBool ImGuiPayload_IsDelivery(ImGuiPayload* self);

        // Function @ cimgui.h:3022:39
        [DllImport(LibraryName)]
        public static extern ImGuiTableColumnSortSpecs* ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs();

        // Function @ cimgui.h:3023:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTableColumnSortSpecs_destroy(ImGuiTableColumnSortSpecs* self);

        // Function @ cimgui.h:3024:33
        [DllImport(LibraryName)]
        public static extern ImGuiTableSortSpecs* ImGuiTableSortSpecs_ImGuiTableSortSpecs();

        // Function @ cimgui.h:3025:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTableSortSpecs_destroy(ImGuiTableSortSpecs* self);

        // Function @ cimgui.h:3026:33
        [DllImport(LibraryName)]
        public static extern ImGuiOnceUponAFrame* ImGuiOnceUponAFrame_ImGuiOnceUponAFrame();

        // Function @ cimgui.h:3027:17
        [DllImport(LibraryName)]
        public static extern void ImGuiOnceUponAFrame_destroy(ImGuiOnceUponAFrame* self);

        // Function @ cimgui.h:3028:29
        [DllImport(LibraryName)]
        public static extern ImGuiTextFilter* ImGuiTextFilter_ImGuiTextFilter(CString default_filter);

        // Function @ cimgui.h:3029:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTextFilter_destroy(ImGuiTextFilter* self);

        // Function @ cimgui.h:3030:17
        [DllImport(LibraryName)]
        public static extern CBool ImGuiTextFilter_Draw(ImGuiTextFilter* self, CString label, float width);

        // Function @ cimgui.h:3031:17
        [DllImport(LibraryName)]
        public static extern CBool ImGuiTextFilter_PassFilter(ImGuiTextFilter* self, CString text, CString text_end);

        // Function @ cimgui.h:3032:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTextFilter_Build(ImGuiTextFilter* self);

        // Function @ cimgui.h:3033:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTextFilter_Clear(ImGuiTextFilter* self);

        // Function @ cimgui.h:3034:17
        [DllImport(LibraryName)]
        public static extern CBool ImGuiTextFilter_IsActive(ImGuiTextFilter* self);

        // Function @ cimgui.h:3035:28
        [DllImport(LibraryName)]
        public static extern ImGuiTextRange* ImGuiTextRange_ImGuiTextRange_Nil();

        // Function @ cimgui.h:3036:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTextRange_destroy(ImGuiTextRange* self);

        // Function @ cimgui.h:3037:28
        [DllImport(LibraryName)]
        public static extern ImGuiTextRange* ImGuiTextRange_ImGuiTextRange_Str(CString _b, CString _e);

        // Function @ cimgui.h:3038:17
        [DllImport(LibraryName)]
        public static extern CBool ImGuiTextRange_empty(ImGuiTextRange* self);

        // Function @ cimgui.h:3039:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTextRange_split(ImGuiTextRange* self, CChar separator, ImVector_ImGuiTextRange* @out);

        // Function @ cimgui.h:3040:29
        [DllImport(LibraryName)]
        public static extern ImGuiTextBuffer* ImGuiTextBuffer_ImGuiTextBuffer();

        // Function @ cimgui.h:3041:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTextBuffer_destroy(ImGuiTextBuffer* self);

        // Function @ cimgui.h:3042:24
        [DllImport(LibraryName)]
        public static extern CString ImGuiTextBuffer_begin(ImGuiTextBuffer* self);

        // Function @ cimgui.h:3043:24
        [DllImport(LibraryName)]
        public static extern CString ImGuiTextBuffer_end(ImGuiTextBuffer* self);

        // Function @ cimgui.h:3044:16
        [DllImport(LibraryName)]
        public static extern int ImGuiTextBuffer_size(ImGuiTextBuffer* self);

        // Function @ cimgui.h:3045:17
        [DllImport(LibraryName)]
        public static extern CBool ImGuiTextBuffer_empty(ImGuiTextBuffer* self);

        // Function @ cimgui.h:3046:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTextBuffer_clear(ImGuiTextBuffer* self);

        // Function @ cimgui.h:3047:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTextBuffer_reserve(ImGuiTextBuffer* self, int capacity);

        // Function @ cimgui.h:3048:24
        [DllImport(LibraryName)]
        public static extern CString ImGuiTextBuffer_c_str(ImGuiTextBuffer* self);

        // Function @ cimgui.h:3049:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTextBuffer_append(ImGuiTextBuffer* self, CString str, CString str_end);

        // Function @ cimgui.h:3050:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTextBuffer_appendfv(ImGuiTextBuffer* self, CString fmt, nint args);

        // Function @ cimgui.h:3051:30
        [DllImport(LibraryName)]
        public static extern ImGuiStoragePair* ImGuiStoragePair_ImGuiStoragePair_Int(ImGuiID _key, int _val_i);

        // Function @ cimgui.h:3052:17
        [DllImport(LibraryName)]
        public static extern void ImGuiStoragePair_destroy(ImGuiStoragePair* self);

        // Function @ cimgui.h:3053:30
        [DllImport(LibraryName)]
        public static extern ImGuiStoragePair* ImGuiStoragePair_ImGuiStoragePair_Float(ImGuiID _key, float _val_f);

        // Function @ cimgui.h:3054:30
        [DllImport(LibraryName)]
        public static extern ImGuiStoragePair* ImGuiStoragePair_ImGuiStoragePair_Ptr(ImGuiID _key, void* _val_p);

        // Function @ cimgui.h:3055:17
        [DllImport(LibraryName)]
        public static extern void ImGuiStorage_Clear(ImGuiStorage* self);

        // Function @ cimgui.h:3056:16
        [DllImport(LibraryName)]
        public static extern int ImGuiStorage_GetInt(ImGuiStorage* self, ImGuiID key, int default_val);

        // Function @ cimgui.h:3057:17
        [DllImport(LibraryName)]
        public static extern void ImGuiStorage_SetInt(ImGuiStorage* self, ImGuiID key, int val);

        // Function @ cimgui.h:3058:17
        [DllImport(LibraryName)]
        public static extern CBool ImGuiStorage_GetBool(ImGuiStorage* self, ImGuiID key, CBool default_val);

        // Function @ cimgui.h:3059:17
        [DllImport(LibraryName)]
        public static extern void ImGuiStorage_SetBool(ImGuiStorage* self, ImGuiID key, CBool val);

        // Function @ cimgui.h:3060:18
        [DllImport(LibraryName)]
        public static extern float ImGuiStorage_GetFloat(ImGuiStorage* self, ImGuiID key, float default_val);

        // Function @ cimgui.h:3061:17
        [DllImport(LibraryName)]
        public static extern void ImGuiStorage_SetFloat(ImGuiStorage* self, ImGuiID key, float val);

        // Function @ cimgui.h:3062:18
        [DllImport(LibraryName)]
        public static extern void* ImGuiStorage_GetVoidPtr(ImGuiStorage* self, ImGuiID key);

        // Function @ cimgui.h:3063:17
        [DllImport(LibraryName)]
        public static extern void ImGuiStorage_SetVoidPtr(ImGuiStorage* self, ImGuiID key, void* val);

        // Function @ cimgui.h:3064:17
        [DllImport(LibraryName)]
        public static extern long* ImGuiStorage_GetIntRef(ImGuiStorage* self, ImGuiID key, int default_val);

        // Function @ cimgui.h:3065:18
        [DllImport(LibraryName)]
        public static extern CBool* ImGuiStorage_GetBoolRef(ImGuiStorage* self, ImGuiID key, CBool default_val);

        // Function @ cimgui.h:3066:19
        [DllImport(LibraryName)]
        public static extern float* ImGuiStorage_GetFloatRef(ImGuiStorage* self, ImGuiID key, float default_val);

        // Function @ cimgui.h:3067:19
        [DllImport(LibraryName)]
        public static extern void** ImGuiStorage_GetVoidPtrRef(ImGuiStorage* self, ImGuiID key, void* default_val);

        // Function @ cimgui.h:3068:17
        [DllImport(LibraryName)]
        public static extern void ImGuiStorage_SetAllInt(ImGuiStorage* self, int val);

        // Function @ cimgui.h:3069:17
        [DllImport(LibraryName)]
        public static extern void ImGuiStorage_BuildSortByKey(ImGuiStorage* self);

        // Function @ cimgui.h:3070:30
        [DllImport(LibraryName)]
        public static extern ImGuiListClipper* ImGuiListClipper_ImGuiListClipper();

        // Function @ cimgui.h:3071:17
        [DllImport(LibraryName)]
        public static extern void ImGuiListClipper_destroy(ImGuiListClipper* self);

        // Function @ cimgui.h:3072:17
        [DllImport(LibraryName)]
        public static extern void ImGuiListClipper_Begin(ImGuiListClipper* self, int items_count, float items_height);

        // Function @ cimgui.h:3073:17
        [DllImport(LibraryName)]
        public static extern void ImGuiListClipper_End(ImGuiListClipper* self);

        // Function @ cimgui.h:3074:17
        [DllImport(LibraryName)]
        public static extern CBool ImGuiListClipper_Step(ImGuiListClipper* self);

        // Function @ cimgui.h:3075:17
        [DllImport(LibraryName)]
        public static extern void ImGuiListClipper_ForceDisplayRangeByIndices(ImGuiListClipper* self, int item_min, int item_max);

        // Function @ cimgui.h:3076:21
        [DllImport(LibraryName)]
        public static extern ImColor* ImColor_ImColor_Nil();

        // Function @ cimgui.h:3077:17
        [DllImport(LibraryName)]
        public static extern void ImColor_destroy(ImColor* self);

        // Function @ cimgui.h:3078:21
        [DllImport(LibraryName)]
        public static extern ImColor* ImColor_ImColor_Int(int r, int g, int b, int a);

        // Function @ cimgui.h:3079:21
        [DllImport(LibraryName)]
        public static extern ImColor* ImColor_ImColor_U32(uint rgba);

        // Function @ cimgui.h:3080:21
        [DllImport(LibraryName)]
        public static extern ImColor* ImColor_ImColor_Float(float r, float g, float b, float a);

        // Function @ cimgui.h:3081:21
        [DllImport(LibraryName)]
        public static extern ImColor* ImColor_ImColor_Vec4(Vector4 col);

        // Function @ cimgui.h:3082:17
        [DllImport(LibraryName)]
        public static extern void ImColor_SetHSV(ImColor* self, float h, float s, float v, float a);

        // Function @ cimgui.h:3083:17
        [DllImport(LibraryName)]
        public static extern void ImColor_HSV(ImColor* pOut, float h, float s, float v, float a);

        // Function @ cimgui.h:3084:23
        [DllImport(LibraryName)]
        public static extern ImDrawCmd* ImDrawCmd_ImDrawCmd();

        // Function @ cimgui.h:3085:17
        [DllImport(LibraryName)]
        public static extern void ImDrawCmd_destroy(ImDrawCmd* self);

        // Function @ cimgui.h:3086:24
        [DllImport(LibraryName)]
        public static extern ImTextureID ImDrawCmd_GetTexID(ImDrawCmd* self);

        // Function @ cimgui.h:3087:32
        [DllImport(LibraryName)]
        public static extern ImDrawListSplitter* ImDrawListSplitter_ImDrawListSplitter();

        // Function @ cimgui.h:3088:17
        [DllImport(LibraryName)]
        public static extern void ImDrawListSplitter_destroy(ImDrawListSplitter* self);

        // Function @ cimgui.h:3089:17
        [DllImport(LibraryName)]
        public static extern void ImDrawListSplitter_Clear(ImDrawListSplitter* self);

        // Function @ cimgui.h:3090:17
        [DllImport(LibraryName)]
        public static extern void ImDrawListSplitter_ClearFreeMemory(ImDrawListSplitter* self);

        // Function @ cimgui.h:3091:17
        [DllImport(LibraryName)]
        public static extern void ImDrawListSplitter_Split(ImDrawListSplitter* self, ImDrawList* draw_list, int count);

        // Function @ cimgui.h:3092:17
        [DllImport(LibraryName)]
        public static extern void ImDrawListSplitter_Merge(ImDrawListSplitter* self, ImDrawList* draw_list);

        // Function @ cimgui.h:3093:17
        [DllImport(LibraryName)]
        public static extern void ImDrawListSplitter_SetCurrentChannel(ImDrawListSplitter* self, ImDrawList* draw_list, int channel_idx);

        // Function @ cimgui.h:3094:24
        [DllImport(LibraryName)]
        public static extern ImDrawList* ImDrawList_ImDrawList(ImDrawListSharedData* shared_data);

        // Function @ cimgui.h:3095:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_destroy(ImDrawList* self);

        // Function @ cimgui.h:3096:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PushClipRect(ImDrawList* self, Vector2 clip_rect_min, Vector2 clip_rect_max, CBool intersect_with_current_clip_rect);

        // Function @ cimgui.h:3097:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PushClipRectFullScreen(ImDrawList* self);

        // Function @ cimgui.h:3098:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PopClipRect(ImDrawList* self);

        // Function @ cimgui.h:3099:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PushTextureID(ImDrawList* self, ImTextureID texture_id);

        // Function @ cimgui.h:3100:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PopTextureID(ImDrawList* self);

        // Function @ cimgui.h:3101:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_GetClipRectMin(Vector2* pOut, ImDrawList* self);

        // Function @ cimgui.h:3102:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_GetClipRectMax(Vector2* pOut, ImDrawList* self);

        // Function @ cimgui.h:3103:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddLine(ImDrawList* self, Vector2 p1, Vector2 p2, uint col, float thickness);

        // Function @ cimgui.h:3104:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddRect(ImDrawList* self, Vector2 p_min, Vector2 p_max, uint col, float rounding, ImDrawFlags flags, float thickness);

        // Function @ cimgui.h:3105:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddRectFilled(ImDrawList* self, Vector2 p_min, Vector2 p_max, uint col, float rounding, ImDrawFlags flags);

        // Function @ cimgui.h:3106:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddRectFilledMultiColor(ImDrawList* self, Vector2 p_min, Vector2 p_max, uint col_upr_left, uint col_upr_right, uint col_bot_right, uint col_bot_left);

        // Function @ cimgui.h:3107:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddQuad(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness);

        // Function @ cimgui.h:3108:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddQuadFilled(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col);

        // Function @ cimgui.h:3109:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddTriangle(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness);

        // Function @ cimgui.h:3110:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddTriangleFilled(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, uint col);

        // Function @ cimgui.h:3111:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddCircle(ImDrawList* self, Vector2 center, float radius, uint col, int num_segments, float thickness);

        // Function @ cimgui.h:3112:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddCircleFilled(ImDrawList* self, Vector2 center, float radius, uint col, int num_segments);

        // Function @ cimgui.h:3113:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddNgon(ImDrawList* self, Vector2 center, float radius, uint col, int num_segments, float thickness);

        // Function @ cimgui.h:3114:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddNgonFilled(ImDrawList* self, Vector2 center, float radius, uint col, int num_segments);

        // Function @ cimgui.h:3115:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddText_Vec2(ImDrawList* self, Vector2 pos, uint col, CString text_begin, CString text_end);

        // Function @ cimgui.h:3116:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddText_FontPtr(ImDrawList* self, ImFont* font, float font_size, Vector2 pos, uint col, CString text_begin, CString text_end, float wrap_width, Vector4* cpu_fine_clip_rect);

        // Function @ cimgui.h:3117:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddPolyline(ImDrawList* self, Vector2* points, int num_points, uint col, ImDrawFlags flags, float thickness);

        // Function @ cimgui.h:3118:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddConvexPolyFilled(ImDrawList* self, Vector2* points, int num_points, uint col);

        // Function @ cimgui.h:3119:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddBezierCubic(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness, int num_segments);

        // Function @ cimgui.h:3120:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddBezierQuadratic(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness, int num_segments);

        // Function @ cimgui.h:3121:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddImage(ImDrawList* self, ImTextureID user_texture_id, Vector2 p_min, Vector2 p_max, Vector2 uv_min, Vector2 uv_max, uint col);

        // Function @ cimgui.h:3122:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddImageQuad(ImDrawList* self, ImTextureID user_texture_id, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector2 uv4, uint col);

        // Function @ cimgui.h:3123:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddImageRounded(ImDrawList* self, ImTextureID user_texture_id, Vector2 p_min, Vector2 p_max, Vector2 uv_min, Vector2 uv_max, uint col, float rounding, ImDrawFlags flags);

        // Function @ cimgui.h:3124:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PathClear(ImDrawList* self);

        // Function @ cimgui.h:3125:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PathLineTo(ImDrawList* self, Vector2 pos);

        // Function @ cimgui.h:3126:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PathLineToMergeDuplicate(ImDrawList* self, Vector2 pos);

        // Function @ cimgui.h:3127:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PathFillConvex(ImDrawList* self, uint col);

        // Function @ cimgui.h:3128:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PathStroke(ImDrawList* self, uint col, ImDrawFlags flags, float thickness);

        // Function @ cimgui.h:3129:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PathArcTo(ImDrawList* self, Vector2 center, float radius, float a_min, float a_max, int num_segments);

        // Function @ cimgui.h:3130:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PathArcToFast(ImDrawList* self, Vector2 center, float radius, int a_min_of_12, int a_max_of_12);

        // Function @ cimgui.h:3131:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PathBezierCubicCurveTo(ImDrawList* self, Vector2 p2, Vector2 p3, Vector2 p4, int num_segments);

        // Function @ cimgui.h:3132:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PathBezierQuadraticCurveTo(ImDrawList* self, Vector2 p2, Vector2 p3, int num_segments);

        // Function @ cimgui.h:3133:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PathRect(ImDrawList* self, Vector2 rect_min, Vector2 rect_max, float rounding, ImDrawFlags flags);

        // Function @ cimgui.h:3134:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddCallback(ImDrawList* self, ImDrawCallback callback, void* callback_data);

        // Function @ cimgui.h:3135:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_AddDrawCmd(ImDrawList* self);

        // Function @ cimgui.h:3136:24
        [DllImport(LibraryName)]
        public static extern ImDrawList* ImDrawList_CloneOutput(ImDrawList* self);

        // Function @ cimgui.h:3137:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_ChannelsSplit(ImDrawList* self, int count);

        // Function @ cimgui.h:3138:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_ChannelsMerge(ImDrawList* self);

        // Function @ cimgui.h:3139:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_ChannelsSetCurrent(ImDrawList* self, int n);

        // Function @ cimgui.h:3140:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PrimReserve(ImDrawList* self, int idx_count, int vtx_count);

        // Function @ cimgui.h:3141:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PrimUnreserve(ImDrawList* self, int idx_count, int vtx_count);

        // Function @ cimgui.h:3142:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PrimRect(ImDrawList* self, Vector2 a, Vector2 b, uint col);

        // Function @ cimgui.h:3143:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PrimRectUV(ImDrawList* self, Vector2 a, Vector2 b, Vector2 uv_a, Vector2 uv_b, uint col);

        // Function @ cimgui.h:3144:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PrimQuadUV(ImDrawList* self, Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 uv_a, Vector2 uv_b, Vector2 uv_c, Vector2 uv_d, uint col);

        // Function @ cimgui.h:3145:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PrimWriteVtx(ImDrawList* self, Vector2 pos, Vector2 uv, uint col);

        // Function @ cimgui.h:3146:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PrimWriteIdx(ImDrawList* self, ImDrawIdx idx);

        // Function @ cimgui.h:3147:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList_PrimVtx(ImDrawList* self, Vector2 pos, Vector2 uv, uint col);

        // Function @ cimgui.h:3148:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList__ResetForNewFrame(ImDrawList* self);

        // Function @ cimgui.h:3149:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList__ClearFreeMemory(ImDrawList* self);

        // Function @ cimgui.h:3150:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList__PopUnusedDrawCmd(ImDrawList* self);

        // Function @ cimgui.h:3151:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList__TryMergeDrawCmds(ImDrawList* self);

        // Function @ cimgui.h:3152:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList__OnChangedClipRect(ImDrawList* self);

        // Function @ cimgui.h:3153:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList__OnChangedTextureID(ImDrawList* self);

        // Function @ cimgui.h:3154:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList__OnChangedVtxOffset(ImDrawList* self);

        // Function @ cimgui.h:3155:16
        [DllImport(LibraryName)]
        public static extern int ImDrawList__CalcCircleAutoSegmentCount(ImDrawList* self, float radius);

        // Function @ cimgui.h:3156:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList__PathArcToFastEx(ImDrawList* self, Vector2 center, float radius, int a_min_sample, int a_max_sample, int a_step);

        // Function @ cimgui.h:3157:17
        [DllImport(LibraryName)]
        public static extern void ImDrawList__PathArcToN(ImDrawList* self, Vector2 center, float radius, float a_min, float a_max, int num_segments);

        // Function @ cimgui.h:3158:24
        [DllImport(LibraryName)]
        public static extern ImDrawData* ImDrawData_ImDrawData();

        // Function @ cimgui.h:3159:17
        [DllImport(LibraryName)]
        public static extern void ImDrawData_destroy(ImDrawData* self);

        // Function @ cimgui.h:3160:17
        [DllImport(LibraryName)]
        public static extern void ImDrawData_Clear(ImDrawData* self);

        // Function @ cimgui.h:3161:17
        [DllImport(LibraryName)]
        public static extern void ImDrawData_DeIndexAllBuffers(ImDrawData* self);

        // Function @ cimgui.h:3162:17
        [DllImport(LibraryName)]
        public static extern void ImDrawData_ScaleClipRects(ImDrawData* self, Vector2 fb_scale);

        // Function @ cimgui.h:3163:26
        [DllImport(LibraryName)]
        public static extern ImFontConfig* ImFontConfig_ImFontConfig();

        // Function @ cimgui.h:3164:17
        [DllImport(LibraryName)]
        public static extern void ImFontConfig_destroy(ImFontConfig* self);

        // Function @ cimgui.h:3165:38
        [DllImport(LibraryName)]
        public static extern ImFontGlyphRangesBuilder* ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder();

        // Function @ cimgui.h:3166:17
        [DllImport(LibraryName)]
        public static extern void ImFontGlyphRangesBuilder_destroy(ImFontGlyphRangesBuilder* self);

        // Function @ cimgui.h:3167:17
        [DllImport(LibraryName)]
        public static extern void ImFontGlyphRangesBuilder_Clear(ImFontGlyphRangesBuilder* self);

        // Function @ cimgui.h:3168:17
        [DllImport(LibraryName)]
        public static extern CBool ImFontGlyphRangesBuilder_GetBit(ImFontGlyphRangesBuilder* self, ulong n);

        // Function @ cimgui.h:3169:17
        [DllImport(LibraryName)]
        public static extern void ImFontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder* self, ulong n);

        // Function @ cimgui.h:3170:17
        [DllImport(LibraryName)]
        public static extern void ImFontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder* self, byte c);

        // Function @ cimgui.h:3171:17
        [DllImport(LibraryName)]
        public static extern void ImFontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder* self, CString text, CString text_end);

        // Function @ cimgui.h:3172:17
        [DllImport(LibraryName)]
        public static extern void ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder* self, byte* ranges);

        // Function @ cimgui.h:3173:17
        [DllImport(LibraryName)]
        public static extern void ImFontGlyphRangesBuilder_BuildRanges(ImFontGlyphRangesBuilder* self, ImVector_ImWchar* out_ranges);

        // Function @ cimgui.h:3174:35
        [DllImport(LibraryName)]
        public static extern ImFontAtlasCustomRect* ImFontAtlasCustomRect_ImFontAtlasCustomRect();

        // Function @ cimgui.h:3175:17
        [DllImport(LibraryName)]
        public static extern void ImFontAtlasCustomRect_destroy(ImFontAtlasCustomRect* self);

        // Function @ cimgui.h:3176:17
        [DllImport(LibraryName)]
        public static extern CBool ImFontAtlasCustomRect_IsPacked(ImFontAtlasCustomRect* self);

        // Function @ cimgui.h:3177:25
        [DllImport(LibraryName)]
        public static extern ImFontAtlas* ImFontAtlas_ImFontAtlas();

        // Function @ cimgui.h:3178:17
        [DllImport(LibraryName)]
        public static extern void ImFontAtlas_destroy(ImFontAtlas* self);

        // Function @ cimgui.h:3179:20
        [DllImport(LibraryName)]
        public static extern ImFont* ImFontAtlas_AddFont(ImFontAtlas* self, ImFontConfig* font_cfg);

        // Function @ cimgui.h:3180:20
        [DllImport(LibraryName)]
        public static extern ImFont* ImFontAtlas_AddFontDefault(ImFontAtlas* self, ImFontConfig* font_cfg);

        // Function @ cimgui.h:3181:20
        [DllImport(LibraryName)]
        public static extern ImFont* ImFontAtlas_AddFontFromFileTTF(ImFontAtlas* self, CString filename, float size_pixels, ImFontConfig* font_cfg, byte* glyph_ranges);

        // Function @ cimgui.h:3182:20
        [DllImport(LibraryName)]
        public static extern ImFont* ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas* self, void* font_data, int font_size, float size_pixels, ImFontConfig* font_cfg, byte* glyph_ranges);

        // Function @ cimgui.h:3183:20
        [DllImport(LibraryName)]
        public static extern ImFont* ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas* self, void* compressed_font_data, int compressed_font_size, float size_pixels, ImFontConfig* font_cfg, byte* glyph_ranges);

        // Function @ cimgui.h:3184:20
        [DllImport(LibraryName)]
        public static extern ImFont* ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas* self, CString compressed_font_data_base85, float size_pixels, ImFontConfig* font_cfg, byte* glyph_ranges);

        // Function @ cimgui.h:3185:17
        [DllImport(LibraryName)]
        public static extern void ImFontAtlas_ClearInputData(ImFontAtlas* self);

        // Function @ cimgui.h:3186:17
        [DllImport(LibraryName)]
        public static extern void ImFontAtlas_ClearTexData(ImFontAtlas* self);

        // Function @ cimgui.h:3187:17
        [DllImport(LibraryName)]
        public static extern void ImFontAtlas_ClearFonts(ImFontAtlas* self);

        // Function @ cimgui.h:3188:17
        [DllImport(LibraryName)]
        public static extern void ImFontAtlas_Clear(ImFontAtlas* self);

        // Function @ cimgui.h:3189:17
        [DllImport(LibraryName)]
        public static extern CBool ImFontAtlas_Build(ImFontAtlas* self);

        // Function @ cimgui.h:3190:17
        [DllImport(LibraryName)]
        public static extern void ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas* self, ulong** out_pixels, long* out_width, long* out_height, long* out_bytes_per_pixel);

        // Function @ cimgui.h:3191:17
        [DllImport(LibraryName)]
        public static extern void ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas* self, ulong** out_pixels, long* out_width, long* out_height, long* out_bytes_per_pixel);

        // Function @ cimgui.h:3192:17
        [DllImport(LibraryName)]
        public static extern CBool ImFontAtlas_IsBuilt(ImFontAtlas* self);

        // Function @ cimgui.h:3193:17
        [DllImport(LibraryName)]
        public static extern void ImFontAtlas_SetTexID(ImFontAtlas* self, ImTextureID id);

        // Function @ cimgui.h:3194:27
        [DllImport(LibraryName)]
        public static extern byte* ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas* self);

        // Function @ cimgui.h:3195:27
        [DllImport(LibraryName)]
        public static extern byte* ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas* self);

        // Function @ cimgui.h:3196:27
        [DllImport(LibraryName)]
        public static extern byte* ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas* self);

        // Function @ cimgui.h:3197:27
        [DllImport(LibraryName)]
        public static extern byte* ImFontAtlas_GetGlyphRangesChineseFull(ImFontAtlas* self);

        // Function @ cimgui.h:3198:27
        [DllImport(LibraryName)]
        public static extern byte* ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas* self);

        // Function @ cimgui.h:3199:27
        [DllImport(LibraryName)]
        public static extern byte* ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas* self);

        // Function @ cimgui.h:3200:27
        [DllImport(LibraryName)]
        public static extern byte* ImFontAtlas_GetGlyphRangesThai(ImFontAtlas* self);

        // Function @ cimgui.h:3201:27
        [DllImport(LibraryName)]
        public static extern byte* ImFontAtlas_GetGlyphRangesVietnamese(ImFontAtlas* self);

        // Function @ cimgui.h:3202:16
        [DllImport(LibraryName)]
        public static extern int ImFontAtlas_AddCustomRectRegular(ImFontAtlas* self, int width, int height);

        // Function @ cimgui.h:3203:16
        [DllImport(LibraryName)]
        public static extern int ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas* self, ImFont* font, byte id, int width, int height, float advance_x, Vector2 offset);

        // Function @ cimgui.h:3204:35
        [DllImport(LibraryName)]
        public static extern ImFontAtlasCustomRect* ImFontAtlas_GetCustomRectByIndex(ImFontAtlas* self, int index);

        // Function @ cimgui.h:3205:17
        [DllImport(LibraryName)]
        public static extern void ImFontAtlas_CalcCustomRectUV(ImFontAtlas* self, ImFontAtlasCustomRect* rect, Vector2* out_uv_min, Vector2* out_uv_max);

        // Function @ cimgui.h:3206:17
        [DllImport(LibraryName)]
        public static extern CBool ImFontAtlas_GetMouseCursorTexData(ImFontAtlas* self, ImGuiMouseCursor cursor, Vector2* out_offset, Vector2* out_size, Vector2* out_uv_border, Vector2* out_uv_fill);

        // Function @ cimgui.h:3207:20
        [DllImport(LibraryName)]
        public static extern ImFont* ImFont_ImFont();

        // Function @ cimgui.h:3208:17
        [DllImport(LibraryName)]
        public static extern void ImFont_destroy(ImFont* self);

        // Function @ cimgui.h:3209:31
        [DllImport(LibraryName)]
        public static extern ImFontGlyph* ImFont_FindGlyph(ImFont* self, byte c);

        // Function @ cimgui.h:3210:31
        [DllImport(LibraryName)]
        public static extern ImFontGlyph* ImFont_FindGlyphNoFallback(ImFont* self, byte c);

        // Function @ cimgui.h:3211:18
        [DllImport(LibraryName)]
        public static extern float ImFont_GetCharAdvance(ImFont* self, byte c);

        // Function @ cimgui.h:3212:17
        [DllImport(LibraryName)]
        public static extern CBool ImFont_IsLoaded(ImFont* self);

        // Function @ cimgui.h:3213:24
        [DllImport(LibraryName)]
        public static extern CString ImFont_GetDebugName(ImFont* self);

        // Function @ cimgui.h:3214:17
        [DllImport(LibraryName)]
        public static extern void ImFont_CalcTextSizeA(Vector2* pOut, ImFont* self, float size, float max_width, float wrap_width, CString text_begin, CString text_end, CString* remaining);

        // Function @ cimgui.h:3215:24
        [DllImport(LibraryName)]
        public static extern CString ImFont_CalcWordWrapPositionA(ImFont* self, float scale, CString text, CString text_end, float wrap_width);

        // Function @ cimgui.h:3216:17
        [DllImport(LibraryName)]
        public static extern void ImFont_RenderChar(ImFont* self, ImDrawList* draw_list, float size, Vector2 pos, uint col, byte c);

        // Function @ cimgui.h:3217:17
        [DllImport(LibraryName)]
        public static extern void ImFont_RenderText(ImFont* self, ImDrawList* draw_list, float size, Vector2 pos, uint col, Vector4 clip_rect, CString text_begin, CString text_end, float wrap_width, CBool cpu_fine_clip);

        // Function @ cimgui.h:3218:17
        [DllImport(LibraryName)]
        public static extern void ImFont_BuildLookupTable(ImFont* self);

        // Function @ cimgui.h:3219:17
        [DllImport(LibraryName)]
        public static extern void ImFont_ClearOutputData(ImFont* self);

        // Function @ cimgui.h:3220:17
        [DllImport(LibraryName)]
        public static extern void ImFont_GrowIndex(ImFont* self, int new_size);

        // Function @ cimgui.h:3221:17
        [DllImport(LibraryName)]
        public static extern void ImFont_AddGlyph(ImFont* self, ImFontConfig* src_cfg, byte c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);

        // Function @ cimgui.h:3222:17
        [DllImport(LibraryName)]
        public static extern void ImFont_AddRemapChar(ImFont* self, byte dst, byte src, CBool overwrite_dst);

        // Function @ cimgui.h:3223:17
        [DllImport(LibraryName)]
        public static extern void ImFont_SetGlyphVisible(ImFont* self, byte c, CBool visible);

        // Function @ cimgui.h:3224:17
        [DllImport(LibraryName)]
        public static extern CBool ImFont_IsGlyphRangeUnused(ImFont* self, uint c_begin, uint c_last);

        // Function @ cimgui.h:3225:27
        [DllImport(LibraryName)]
        public static extern ImGuiViewport* ImGuiViewport_ImGuiViewport();

        // Function @ cimgui.h:3226:17
        [DllImport(LibraryName)]
        public static extern void ImGuiViewport_destroy(ImGuiViewport* self);

        // Function @ cimgui.h:3227:17
        [DllImport(LibraryName)]
        public static extern void ImGuiViewport_GetCenter(Vector2* pOut, ImGuiViewport* self);

        // Function @ cimgui.h:3228:17
        [DllImport(LibraryName)]
        public static extern void ImGuiViewport_GetWorkCenter(Vector2* pOut, ImGuiViewport* self);

        // Function @ cimgui.h:3229:34
        [DllImport(LibraryName)]
        public static extern ImGuiPlatformImeData* ImGuiPlatformImeData_ImGuiPlatformImeData();

        // Function @ cimgui.h:3230:17
        [DllImport(LibraryName)]
        public static extern void ImGuiPlatformImeData_destroy(ImGuiPlatformImeData* self);

        // Function @ cimgui.h:3231:16
        [DllImport(LibraryName)]
        public static extern int igGetKeyIndex(ImGuiKey key);

        // Function @ cimgui.h:3232:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igImHashData(void* data, ulong data_size, uint seed);

        // Function @ cimgui.h:3233:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igImHashStr(CString data, ulong data_size, uint seed);

        // Function @ cimgui.h:3234:17
        [DllImport(LibraryName)]
        public static extern void igImQsort(void* @base, ulong count, ulong size_of_element, FnPtr_VoidPtr_VoidPtr_Int compare_func);

        // Function @ cimgui.h:3235:18
        [DllImport(LibraryName)]
        public static extern uint igImAlphaBlendColors(uint col_a, uint col_b);

        // Function @ cimgui.h:3236:17
        [DllImport(LibraryName)]
        public static extern CBool igImIsPowerOfTwo_Int(int v);

        // Function @ cimgui.h:3237:17
        [DllImport(LibraryName)]
        public static extern CBool igImIsPowerOfTwo_U64(ulong v);

        // Function @ cimgui.h:3238:16
        [DllImport(LibraryName)]
        public static extern int igImUpperPowerOfTwo(int v);

        // Function @ cimgui.h:3239:16
        [DllImport(LibraryName)]
        public static extern int igImStricmp(CString str1, CString str2);

        // Function @ cimgui.h:3240:16
        [DllImport(LibraryName)]
        public static extern int igImStrnicmp(CString str1, CString str2, ulong count);

        // Function @ cimgui.h:3241:17
        [DllImport(LibraryName)]
        public static extern void igImStrncpy(CString dst, CString src, ulong count);

        // Function @ cimgui.h:3242:18
        [DllImport(LibraryName)]
        public static extern CString igImStrdup(CString str);

        // Function @ cimgui.h:3243:18
        [DllImport(LibraryName)]
        public static extern CString igImStrdupcpy(CString dst, ulong* p_dst_size, CString str);

        // Function @ cimgui.h:3244:24
        [DllImport(LibraryName)]
        public static extern CString igImStrchrRange(CString str_begin, CString str_end, CChar c);

        // Function @ cimgui.h:3245:16
        [DllImport(LibraryName)]
        public static extern int igImStrlenW(byte* str);

        // Function @ cimgui.h:3246:24
        [DllImport(LibraryName)]
        public static extern CString igImStreolRange(CString str, CString str_end);

        // Function @ cimgui.h:3247:27
        [DllImport(LibraryName)]
        public static extern byte* igImStrbolW(byte* buf_mid_line, byte* buf_begin);

        // Function @ cimgui.h:3248:24
        [DllImport(LibraryName)]
        public static extern CString igImStristr(CString haystack, CString haystack_end, CString needle, CString needle_end);

        // Function @ cimgui.h:3249:17
        [DllImport(LibraryName)]
        public static extern void igImStrTrimBlanks(CString str);

        // Function @ cimgui.h:3250:24
        [DllImport(LibraryName)]
        public static extern CString igImStrSkipBlank(CString str);

        // Function @ cimgui.h:3251:16
        [DllImport(LibraryName)]
        public static extern int igImFormatString(CString buf, ulong buf_size, CString fmt);

        // Function @ cimgui.h:3252:16
        [DllImport(LibraryName)]
        public static extern int igImFormatStringV(CString buf, ulong buf_size, CString fmt, nint args);

        // Function @ cimgui.h:3253:24
        [DllImport(LibraryName)]
        public static extern CString igImParseFormatFindStart(CString format);

        // Function @ cimgui.h:3254:24
        [DllImport(LibraryName)]
        public static extern CString igImParseFormatFindEnd(CString format);

        // Function @ cimgui.h:3255:24
        [DllImport(LibraryName)]
        public static extern CString igImParseFormatTrimDecorations(CString format, CString buf, ulong buf_size);

        // Function @ cimgui.h:3256:16
        [DllImport(LibraryName)]
        public static extern int igImParseFormatPrecision(CString format, int default_value);

        // Function @ cimgui.h:3257:17
        [DllImport(LibraryName)]
        public static extern CBool igImCharIsBlankA(CChar c);

        // Function @ cimgui.h:3258:17
        [DllImport(LibraryName)]
        public static extern CBool igImCharIsBlankW(uint c);

        // Function @ cimgui.h:3259:24
        [DllImport(LibraryName)]
        public static extern CString igImTextCharToUtf8(CString out_buf, uint c);

        // Function @ cimgui.h:3260:16
        [DllImport(LibraryName)]
        public static extern int igImTextStrToUtf8(CString out_buf, int out_buf_size, byte* in_text, byte* in_text_end);

        // Function @ cimgui.h:3261:16
        [DllImport(LibraryName)]
        public static extern int igImTextCharFromUtf8(ulong* out_char, CString in_text, CString in_text_end);

        // Function @ cimgui.h:3262:16
        [DllImport(LibraryName)]
        public static extern int igImTextStrFromUtf8(byte* out_buf, int out_buf_size, CString in_text, CString in_text_end, CString* in_remaining);

        // Function @ cimgui.h:3263:16
        [DllImport(LibraryName)]
        public static extern int igImTextCountCharsFromUtf8(CString in_text, CString in_text_end);

        // Function @ cimgui.h:3264:16
        [DllImport(LibraryName)]
        public static extern int igImTextCountUtf8BytesFromChar(CString in_text, CString in_text_end);

        // Function @ cimgui.h:3265:16
        [DllImport(LibraryName)]
        public static extern int igImTextCountUtf8BytesFromStr(byte* in_text, byte* in_text_end);

        // Function @ cimgui.h:3266:25
        [DllImport(LibraryName)]
        public static extern ImFileHandle igImFileOpen(CString filename, CString mode);

        // Function @ cimgui.h:3267:17
        [DllImport(LibraryName)]
        public static extern CBool igImFileClose(ImFileHandle file);

        // Function @ cimgui.h:3268:18
        [DllImport(LibraryName)]
        public static extern ulong igImFileGetSize(ImFileHandle file);

        // Function @ cimgui.h:3269:18
        [DllImport(LibraryName)]
        public static extern ulong igImFileRead(void* data, ulong size, ulong count, ImFileHandle file);

        // Function @ cimgui.h:3270:18
        [DllImport(LibraryName)]
        public static extern ulong igImFileWrite(void* data, ulong size, ulong count, ImFileHandle file);

        // Function @ cimgui.h:3271:18
        [DllImport(LibraryName)]
        public static extern void* igImFileLoadToMemory(CString filename, CString mode, ulong* out_file_size, int padding_bytes);

        // Function @ cimgui.h:3272:18
        [DllImport(LibraryName)]
        public static extern float igImPow_Float(float x, float y);

        // Function @ cimgui.h:3273:19
        [DllImport(LibraryName)]
        public static extern double igImPow_double(double x, double y);

        // Function @ cimgui.h:3274:18
        [DllImport(LibraryName)]
        public static extern float igImLog_Float(float x);

        // Function @ cimgui.h:3275:19
        [DllImport(LibraryName)]
        public static extern double igImLog_double(double x);

        // Function @ cimgui.h:3276:16
        [DllImport(LibraryName)]
        public static extern int igImAbs_Int(int x);

        // Function @ cimgui.h:3277:18
        [DllImport(LibraryName)]
        public static extern float igImAbs_Float(float x);

        // Function @ cimgui.h:3278:19
        [DllImport(LibraryName)]
        public static extern double igImAbs_double(double x);

        // Function @ cimgui.h:3279:18
        [DllImport(LibraryName)]
        public static extern float igImSign_Float(float x);

        // Function @ cimgui.h:3280:19
        [DllImport(LibraryName)]
        public static extern double igImSign_double(double x);

        // Function @ cimgui.h:3281:18
        [DllImport(LibraryName)]
        public static extern float igImRsqrt_Float(float x);

        // Function @ cimgui.h:3282:19
        [DllImport(LibraryName)]
        public static extern double igImRsqrt_double(double x);

        // Function @ cimgui.h:3283:17
        [DllImport(LibraryName)]
        public static extern void igImMin(Vector2* pOut, Vector2 lhs, Vector2 rhs);

        // Function @ cimgui.h:3284:17
        [DllImport(LibraryName)]
        public static extern void igImMax(Vector2* pOut, Vector2 lhs, Vector2 rhs);

        // Function @ cimgui.h:3285:17
        [DllImport(LibraryName)]
        public static extern void igImClamp(Vector2* pOut, Vector2 v, Vector2 mn, Vector2 mx);

        // Function @ cimgui.h:3286:17
        [DllImport(LibraryName)]
        public static extern void igImLerp_Vec2Float(Vector2* pOut, Vector2 a, Vector2 b, float t);

        // Function @ cimgui.h:3287:17
        [DllImport(LibraryName)]
        public static extern void igImLerp_Vec2Vec2(Vector2* pOut, Vector2 a, Vector2 b, Vector2 t);

        // Function @ cimgui.h:3288:17
        [DllImport(LibraryName)]
        public static extern void igImLerp_Vec4(Vector4* pOut, Vector4 a, Vector4 b, float t);

        // Function @ cimgui.h:3289:18
        [DllImport(LibraryName)]
        public static extern float igImSaturate(float f);

        // Function @ cimgui.h:3290:18
        [DllImport(LibraryName)]
        public static extern float igImLengthSqr_Vec2(Vector2 lhs);

        // Function @ cimgui.h:3291:18
        [DllImport(LibraryName)]
        public static extern float igImLengthSqr_Vec4(Vector4 lhs);

        // Function @ cimgui.h:3292:18
        [DllImport(LibraryName)]
        public static extern float igImInvLength(Vector2 lhs, float fail_value);

        // Function @ cimgui.h:3293:18
        [DllImport(LibraryName)]
        public static extern float igImFloor_Float(float f);

        // Function @ cimgui.h:3294:18
        [DllImport(LibraryName)]
        public static extern float igImFloorSigned_Float(float f);

        // Function @ cimgui.h:3295:17
        [DllImport(LibraryName)]
        public static extern void igImFloor_Vec2(Vector2* pOut, Vector2 v);

        // Function @ cimgui.h:3296:17
        [DllImport(LibraryName)]
        public static extern void igImFloorSigned_Vec2(Vector2* pOut, Vector2 v);

        // Function @ cimgui.h:3297:16
        [DllImport(LibraryName)]
        public static extern int igImModPositive(int a, int b);

        // Function @ cimgui.h:3298:18
        [DllImport(LibraryName)]
        public static extern float igImDot(Vector2 a, Vector2 b);

        // Function @ cimgui.h:3299:17
        [DllImport(LibraryName)]
        public static extern void igImRotate(Vector2* pOut, Vector2 v, float cos_a, float sin_a);

        // Function @ cimgui.h:3300:18
        [DllImport(LibraryName)]
        public static extern float igImLinearSweep(float current, float target, float speed);

        // Function @ cimgui.h:3301:17
        [DllImport(LibraryName)]
        public static extern void igImMul(Vector2* pOut, Vector2 lhs, Vector2 rhs);

        // Function @ cimgui.h:3302:17
        [DllImport(LibraryName)]
        public static extern CBool igImIsFloatAboveGuaranteedIntegerPrecision(float f);

        // Function @ cimgui.h:3303:17
        [DllImport(LibraryName)]
        public static extern void igImBezierCubicCalc(Vector2* pOut, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t);

        // Function @ cimgui.h:3304:17
        [DllImport(LibraryName)]
        public static extern void igImBezierCubicClosestPoint(Vector2* pOut, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, int num_segments);

        // Function @ cimgui.h:3305:17
        [DllImport(LibraryName)]
        public static extern void igImBezierCubicClosestPointCasteljau(Vector2* pOut, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, float tess_tol);

        // Function @ cimgui.h:3306:17
        [DllImport(LibraryName)]
        public static extern void igImBezierQuadraticCalc(Vector2* pOut, Vector2 p1, Vector2 p2, Vector2 p3, float t);

        // Function @ cimgui.h:3307:17
        [DllImport(LibraryName)]
        public static extern void igImLineClosestPoint(Vector2* pOut, Vector2 a, Vector2 b, Vector2 p);

        // Function @ cimgui.h:3308:17
        [DllImport(LibraryName)]
        public static extern CBool igImTriangleContainsPoint(Vector2 a, Vector2 b, Vector2 c, Vector2 p);

        // Function @ cimgui.h:3309:17
        [DllImport(LibraryName)]
        public static extern void igImTriangleClosestPoint(Vector2* pOut, Vector2 a, Vector2 b, Vector2 c, Vector2 p);

        // Function @ cimgui.h:3310:17
        [DllImport(LibraryName)]
        public static extern void igImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, float* out_u, float* out_v, float* out_w);

        // Function @ cimgui.h:3311:18
        [DllImport(LibraryName)]
        public static extern float igImTriangleArea(Vector2 a, Vector2 b, Vector2 c);

        // Function @ cimgui.h:3312:21
        [DllImport(LibraryName)]
        public static extern ImGuiDir igImGetDirQuadrantFromDelta(float dx, float dy);

        // Function @ cimgui.h:3313:20
        [DllImport(LibraryName)]
        public static extern float* ImVec1_ImVec1_Nil();

        // Function @ cimgui.h:3314:17
        [DllImport(LibraryName)]
        public static extern void ImVec1_destroy(float* self);

        // Function @ cimgui.h:3315:20
        [DllImport(LibraryName)]
        public static extern float* ImVec1_ImVec1_Float(float _x);

        // Function @ cimgui.h:3316:22
        [DllImport(LibraryName)]
        public static extern ImVec2ih* ImVec2ih_ImVec2ih_Nil();

        // Function @ cimgui.h:3317:17
        [DllImport(LibraryName)]
        public static extern void ImVec2ih_destroy(ImVec2ih* self);

        // Function @ cimgui.h:3318:22
        [DllImport(LibraryName)]
        public static extern ImVec2ih* ImVec2ih_ImVec2ih_short(short _x, short _y);

        // Function @ cimgui.h:3319:22
        [DllImport(LibraryName)]
        public static extern ImVec2ih* ImVec2ih_ImVec2ih_Vec2(Vector2 rhs);

        // Function @ cimgui.h:3320:20
        [DllImport(LibraryName)]
        public static extern ImRect* ImRect_ImRect_Nil();

        // Function @ cimgui.h:3321:17
        [DllImport(LibraryName)]
        public static extern void ImRect_destroy(ImRect* self);

        // Function @ cimgui.h:3322:20
        [DllImport(LibraryName)]
        public static extern ImRect* ImRect_ImRect_Vec2(Vector2 min, Vector2 max);

        // Function @ cimgui.h:3323:20
        [DllImport(LibraryName)]
        public static extern ImRect* ImRect_ImRect_Vec4(Vector4 v);

        // Function @ cimgui.h:3324:20
        [DllImport(LibraryName)]
        public static extern ImRect* ImRect_ImRect_Float(float x1, float y1, float x2, float y2);

        // Function @ cimgui.h:3325:17
        [DllImport(LibraryName)]
        public static extern void ImRect_GetCenter(Vector2* pOut, ImRect* self);

        // Function @ cimgui.h:3326:17
        [DllImport(LibraryName)]
        public static extern void ImRect_GetSize(Vector2* pOut, ImRect* self);

        // Function @ cimgui.h:3327:18
        [DllImport(LibraryName)]
        public static extern float ImRect_GetWidth(ImRect* self);

        // Function @ cimgui.h:3328:18
        [DllImport(LibraryName)]
        public static extern float ImRect_GetHeight(ImRect* self);

        // Function @ cimgui.h:3329:18
        [DllImport(LibraryName)]
        public static extern float ImRect_GetArea(ImRect* self);

        // Function @ cimgui.h:3330:17
        [DllImport(LibraryName)]
        public static extern void ImRect_GetTL(Vector2* pOut, ImRect* self);

        // Function @ cimgui.h:3331:17
        [DllImport(LibraryName)]
        public static extern void ImRect_GetTR(Vector2* pOut, ImRect* self);

        // Function @ cimgui.h:3332:17
        [DllImport(LibraryName)]
        public static extern void ImRect_GetBL(Vector2* pOut, ImRect* self);

        // Function @ cimgui.h:3333:17
        [DllImport(LibraryName)]
        public static extern void ImRect_GetBR(Vector2* pOut, ImRect* self);

        // Function @ cimgui.h:3334:17
        [DllImport(LibraryName)]
        public static extern CBool ImRect_Contains_Vec2(ImRect* self, Vector2 p);

        // Function @ cimgui.h:3335:17
        [DllImport(LibraryName)]
        public static extern CBool ImRect_Contains_Rect(ImRect* self, ImRect r);

        // Function @ cimgui.h:3336:17
        [DllImport(LibraryName)]
        public static extern CBool ImRect_Overlaps(ImRect* self, ImRect r);

        // Function @ cimgui.h:3337:17
        [DllImport(LibraryName)]
        public static extern void ImRect_Add_Vec2(ImRect* self, Vector2 p);

        // Function @ cimgui.h:3338:17
        [DllImport(LibraryName)]
        public static extern void ImRect_Add_Rect(ImRect* self, ImRect r);

        // Function @ cimgui.h:3339:17
        [DllImport(LibraryName)]
        public static extern void ImRect_Expand_Float(ImRect* self, float amount);

        // Function @ cimgui.h:3340:17
        [DllImport(LibraryName)]
        public static extern void ImRect_Expand_Vec2(ImRect* self, Vector2 amount);

        // Function @ cimgui.h:3341:17
        [DllImport(LibraryName)]
        public static extern void ImRect_Translate(ImRect* self, Vector2 d);

        // Function @ cimgui.h:3342:17
        [DllImport(LibraryName)]
        public static extern void ImRect_TranslateX(ImRect* self, float dx);

        // Function @ cimgui.h:3343:17
        [DllImport(LibraryName)]
        public static extern void ImRect_TranslateY(ImRect* self, float dy);

        // Function @ cimgui.h:3344:17
        [DllImport(LibraryName)]
        public static extern void ImRect_ClipWith(ImRect* self, ImRect r);

        // Function @ cimgui.h:3345:17
        [DllImport(LibraryName)]
        public static extern void ImRect_ClipWithFull(ImRect* self, ImRect r);

        // Function @ cimgui.h:3346:17
        [DllImport(LibraryName)]
        public static extern void ImRect_Floor(ImRect* self);

        // Function @ cimgui.h:3347:17
        [DllImport(LibraryName)]
        public static extern CBool ImRect_IsInverted(ImRect* self);

        // Function @ cimgui.h:3348:17
        [DllImport(LibraryName)]
        public static extern void ImRect_ToVec4(Vector4* pOut, ImRect* self);

        // Function @ cimgui.h:3349:17
        [DllImport(LibraryName)]
        public static extern CBool igImBitArrayTestBit(uint* arr, int n);

        // Function @ cimgui.h:3350:17
        [DllImport(LibraryName)]
        public static extern void igImBitArrayClearBit(uint* arr, int n);

        // Function @ cimgui.h:3351:17
        [DllImport(LibraryName)]
        public static extern void igImBitArraySetBit(uint* arr, int n);

        // Function @ cimgui.h:3352:17
        [DllImport(LibraryName)]
        public static extern void igImBitArraySetBitRange(uint* arr, int n, int n2);

        // Function @ cimgui.h:3353:17
        [DllImport(LibraryName)]
        public static extern void ImBitVector_Create(ImBitVector* self, int sz);

        // Function @ cimgui.h:3354:17
        [DllImport(LibraryName)]
        public static extern void ImBitVector_Clear(ImBitVector* self);

        // Function @ cimgui.h:3355:17
        [DllImport(LibraryName)]
        public static extern CBool ImBitVector_TestBit(ImBitVector* self, int n);

        // Function @ cimgui.h:3356:17
        [DllImport(LibraryName)]
        public static extern void ImBitVector_SetBit(ImBitVector* self, int n);

        // Function @ cimgui.h:3357:17
        [DllImport(LibraryName)]
        public static extern void ImBitVector_ClearBit(ImBitVector* self, int n);

        // Function @ cimgui.h:3358:34
        [DllImport(LibraryName)]
        public static extern ImDrawListSharedData* ImDrawListSharedData_ImDrawListSharedData();

        // Function @ cimgui.h:3359:17
        [DllImport(LibraryName)]
        public static extern void ImDrawListSharedData_destroy(ImDrawListSharedData* self);

        // Function @ cimgui.h:3360:17
        [DllImport(LibraryName)]
        public static extern void ImDrawListSharedData_SetCircleTessellationMaxError(ImDrawListSharedData* self, float max_error);

        // Function @ cimgui.h:3361:17
        [DllImport(LibraryName)]
        public static extern void ImDrawDataBuilder_Clear(ImDrawDataBuilder* self);

        // Function @ cimgui.h:3362:17
        [DllImport(LibraryName)]
        public static extern void ImDrawDataBuilder_ClearFreeMemory(ImDrawDataBuilder* self);

        // Function @ cimgui.h:3363:16
        [DllImport(LibraryName)]
        public static extern int ImDrawDataBuilder_GetDrawListCount(ImDrawDataBuilder* self);

        // Function @ cimgui.h:3364:17
        [DllImport(LibraryName)]
        public static extern void ImDrawDataBuilder_FlattenIntoSingleLayer(ImDrawDataBuilder* self);

        // Function @ cimgui.h:3365:27
        [DllImport(LibraryName)]
        public static extern ImGuiStyleMod* ImGuiStyleMod_ImGuiStyleMod_Int(ImGuiStyleVar idx, int v);

        // Function @ cimgui.h:3366:17
        [DllImport(LibraryName)]
        public static extern void ImGuiStyleMod_destroy(ImGuiStyleMod* self);

        // Function @ cimgui.h:3367:27
        [DllImport(LibraryName)]
        public static extern ImGuiStyleMod* ImGuiStyleMod_ImGuiStyleMod_Float(ImGuiStyleVar idx, float v);

        // Function @ cimgui.h:3368:27
        [DllImport(LibraryName)]
        public static extern ImGuiStyleMod* ImGuiStyleMod_ImGuiStyleMod_Vec2(ImGuiStyleVar idx, Vector2 v);

        // Function @ cimgui.h:3369:35
        [DllImport(LibraryName)]
        public static extern ImGuiComboPreviewData* ImGuiComboPreviewData_ImGuiComboPreviewData();

        // Function @ cimgui.h:3370:17
        [DllImport(LibraryName)]
        public static extern void ImGuiComboPreviewData_destroy(ImGuiComboPreviewData* self);

        // Function @ cimgui.h:3371:30
        [DllImport(LibraryName)]
        public static extern ImGuiMenuColumns* ImGuiMenuColumns_ImGuiMenuColumns();

        // Function @ cimgui.h:3372:17
        [DllImport(LibraryName)]
        public static extern void ImGuiMenuColumns_destroy(ImGuiMenuColumns* self);

        // Function @ cimgui.h:3373:17
        [DllImport(LibraryName)]
        public static extern void ImGuiMenuColumns_Update(ImGuiMenuColumns* self, float spacing, CBool window_reappearing);

        // Function @ cimgui.h:3374:18
        [DllImport(LibraryName)]
        public static extern float ImGuiMenuColumns_DeclColumns(ImGuiMenuColumns* self, float w_icon, float w_label, float w_shortcut, float w_mark);

        // Function @ cimgui.h:3375:17
        [DllImport(LibraryName)]
        public static extern void ImGuiMenuColumns_CalcNextTotalWidth(ImGuiMenuColumns* self, CBool update_offsets);

        // Function @ cimgui.h:3376:33
        [DllImport(LibraryName)]
        public static extern ImGuiInputTextState* ImGuiInputTextState_ImGuiInputTextState();

        // Function @ cimgui.h:3377:17
        [DllImport(LibraryName)]
        public static extern void ImGuiInputTextState_destroy(ImGuiInputTextState* self);

        // Function @ cimgui.h:3378:17
        [DllImport(LibraryName)]
        public static extern void ImGuiInputTextState_ClearText(ImGuiInputTextState* self);

        // Function @ cimgui.h:3379:17
        [DllImport(LibraryName)]
        public static extern void ImGuiInputTextState_ClearFreeMemory(ImGuiInputTextState* self);

        // Function @ cimgui.h:3380:16
        [DllImport(LibraryName)]
        public static extern int ImGuiInputTextState_GetUndoAvailCount(ImGuiInputTextState* self);

        // Function @ cimgui.h:3381:16
        [DllImport(LibraryName)]
        public static extern int ImGuiInputTextState_GetRedoAvailCount(ImGuiInputTextState* self);

        // Function @ cimgui.h:3382:17
        [DllImport(LibraryName)]
        public static extern void ImGuiInputTextState_OnKeyPressed(ImGuiInputTextState* self, int key);

        // Function @ cimgui.h:3383:17
        [DllImport(LibraryName)]
        public static extern void ImGuiInputTextState_CursorAnimReset(ImGuiInputTextState* self);

        // Function @ cimgui.h:3384:17
        [DllImport(LibraryName)]
        public static extern void ImGuiInputTextState_CursorClamp(ImGuiInputTextState* self);

        // Function @ cimgui.h:3385:17
        [DllImport(LibraryName)]
        public static extern CBool ImGuiInputTextState_HasSelection(ImGuiInputTextState* self);

        // Function @ cimgui.h:3386:17
        [DllImport(LibraryName)]
        public static extern void ImGuiInputTextState_ClearSelection(ImGuiInputTextState* self);

        // Function @ cimgui.h:3387:16
        [DllImport(LibraryName)]
        public static extern int ImGuiInputTextState_GetCursorPos(ImGuiInputTextState* self);

        // Function @ cimgui.h:3388:16
        [DllImport(LibraryName)]
        public static extern int ImGuiInputTextState_GetSelectionStart(ImGuiInputTextState* self);

        // Function @ cimgui.h:3389:16
        [DllImport(LibraryName)]
        public static extern int ImGuiInputTextState_GetSelectionEnd(ImGuiInputTextState* self);

        // Function @ cimgui.h:3390:17
        [DllImport(LibraryName)]
        public static extern void ImGuiInputTextState_SelectAll(ImGuiInputTextState* self);

        // Function @ cimgui.h:3391:28
        [DllImport(LibraryName)]
        public static extern ImGuiPopupData* ImGuiPopupData_ImGuiPopupData();

        // Function @ cimgui.h:3392:17
        [DllImport(LibraryName)]
        public static extern void ImGuiPopupData_destroy(ImGuiPopupData* self);

        // Function @ cimgui.h:3393:33
        [DllImport(LibraryName)]
        public static extern ImGuiNextWindowData* ImGuiNextWindowData_ImGuiNextWindowData();

        // Function @ cimgui.h:3394:17
        [DllImport(LibraryName)]
        public static extern void ImGuiNextWindowData_destroy(ImGuiNextWindowData* self);

        // Function @ cimgui.h:3395:17
        [DllImport(LibraryName)]
        public static extern void ImGuiNextWindowData_ClearFlags(ImGuiNextWindowData* self);

        // Function @ cimgui.h:3396:31
        [DllImport(LibraryName)]
        public static extern ImGuiNextItemData* ImGuiNextItemData_ImGuiNextItemData();

        // Function @ cimgui.h:3397:17
        [DllImport(LibraryName)]
        public static extern void ImGuiNextItemData_destroy(ImGuiNextItemData* self);

        // Function @ cimgui.h:3398:17
        [DllImport(LibraryName)]
        public static extern void ImGuiNextItemData_ClearFlags(ImGuiNextItemData* self);

        // Function @ cimgui.h:3399:31
        [DllImport(LibraryName)]
        public static extern ImGuiLastItemData* ImGuiLastItemData_ImGuiLastItemData();

        // Function @ cimgui.h:3400:17
        [DllImport(LibraryName)]
        public static extern void ImGuiLastItemData_destroy(ImGuiLastItemData* self);

        // Function @ cimgui.h:3401:29
        [DllImport(LibraryName)]
        public static extern ImGuiStackSizes* ImGuiStackSizes_ImGuiStackSizes();

        // Function @ cimgui.h:3402:17
        [DllImport(LibraryName)]
        public static extern void ImGuiStackSizes_destroy(ImGuiStackSizes* self);

        // Function @ cimgui.h:3403:17
        [DllImport(LibraryName)]
        public static extern void ImGuiStackSizes_SetToCurrentState(ImGuiStackSizes* self);

        // Function @ cimgui.h:3404:17
        [DllImport(LibraryName)]
        public static extern void ImGuiStackSizes_CompareWithCurrentState(ImGuiStackSizes* self);

        // Function @ cimgui.h:3405:29
        [DllImport(LibraryName)]
        public static extern ImGuiPtrOrIndex* ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(void* ptr);

        // Function @ cimgui.h:3406:17
        [DllImport(LibraryName)]
        public static extern void ImGuiPtrOrIndex_destroy(ImGuiPtrOrIndex* self);

        // Function @ cimgui.h:3407:29
        [DllImport(LibraryName)]
        public static extern ImGuiPtrOrIndex* ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(int index);

        // Function @ cimgui.h:3408:29
        [DllImport(LibraryName)]
        public static extern ImGuiInputEvent* ImGuiInputEvent_ImGuiInputEvent();

        // Function @ cimgui.h:3409:17
        [DllImport(LibraryName)]
        public static extern void ImGuiInputEvent_destroy(ImGuiInputEvent* self);

        // Function @ cimgui.h:3410:34
        [DllImport(LibraryName)]
        public static extern ImGuiListClipperRange ImGuiListClipperRange_FromIndices(int min, int max);

        // Function @ cimgui.h:3411:34
        [DllImport(LibraryName)]
        public static extern ImGuiListClipperRange ImGuiListClipperRange_FromPositions(float y1, float y2, int off_min, int off_max);

        // Function @ cimgui.h:3412:34
        [DllImport(LibraryName)]
        public static extern ImGuiListClipperData* ImGuiListClipperData_ImGuiListClipperData();

        // Function @ cimgui.h:3413:17
        [DllImport(LibraryName)]
        public static extern void ImGuiListClipperData_destroy(ImGuiListClipperData* self);

        // Function @ cimgui.h:3414:17
        [DllImport(LibraryName)]
        public static extern void ImGuiListClipperData_Reset(ImGuiListClipperData* self, ImGuiListClipper* clipper);

        // Function @ cimgui.h:3415:30
        [DllImport(LibraryName)]
        public static extern ImGuiNavItemData* ImGuiNavItemData_ImGuiNavItemData();

        // Function @ cimgui.h:3416:17
        [DllImport(LibraryName)]
        public static extern void ImGuiNavItemData_destroy(ImGuiNavItemData* self);

        // Function @ cimgui.h:3417:17
        [DllImport(LibraryName)]
        public static extern void ImGuiNavItemData_Clear(ImGuiNavItemData* self);

        // Function @ cimgui.h:3418:32
        [DllImport(LibraryName)]
        public static extern ImGuiOldColumnData* ImGuiOldColumnData_ImGuiOldColumnData();

        // Function @ cimgui.h:3419:17
        [DllImport(LibraryName)]
        public static extern void ImGuiOldColumnData_destroy(ImGuiOldColumnData* self);

        // Function @ cimgui.h:3420:29
        [DllImport(LibraryName)]
        public static extern ImGuiOldColumns* ImGuiOldColumns_ImGuiOldColumns();

        // Function @ cimgui.h:3421:17
        [DllImport(LibraryName)]
        public static extern void ImGuiOldColumns_destroy(ImGuiOldColumns* self);

        // Function @ cimgui.h:3422:28
        [DllImport(LibraryName)]
        public static extern ImGuiViewportP* ImGuiViewportP_ImGuiViewportP();

        // Function @ cimgui.h:3423:17
        [DllImport(LibraryName)]
        public static extern void ImGuiViewportP_destroy(ImGuiViewportP* self);

        // Function @ cimgui.h:3424:17
        [DllImport(LibraryName)]
        public static extern void ImGuiViewportP_CalcWorkRectPos(Vector2* pOut, ImGuiViewportP* self, Vector2 off_min);

        // Function @ cimgui.h:3425:17
        [DllImport(LibraryName)]
        public static extern void ImGuiViewportP_CalcWorkRectSize(Vector2* pOut, ImGuiViewportP* self, Vector2 off_min, Vector2 off_max);

        // Function @ cimgui.h:3426:17
        [DllImport(LibraryName)]
        public static extern void ImGuiViewportP_UpdateWorkRect(ImGuiViewportP* self);

        // Function @ cimgui.h:3427:17
        [DllImport(LibraryName)]
        public static extern void ImGuiViewportP_GetMainRect(ImRect* pOut, ImGuiViewportP* self);

        // Function @ cimgui.h:3428:17
        [DllImport(LibraryName)]
        public static extern void ImGuiViewportP_GetWorkRect(ImRect* pOut, ImGuiViewportP* self);

        // Function @ cimgui.h:3429:17
        [DllImport(LibraryName)]
        public static extern void ImGuiViewportP_GetBuildWorkRect(ImRect* pOut, ImGuiViewportP* self);

        // Function @ cimgui.h:3430:33
        [DllImport(LibraryName)]
        public static extern ImGuiWindowSettings* ImGuiWindowSettings_ImGuiWindowSettings();

        // Function @ cimgui.h:3431:17
        [DllImport(LibraryName)]
        public static extern void ImGuiWindowSettings_destroy(ImGuiWindowSettings* self);

        // Function @ cimgui.h:3432:18
        [DllImport(LibraryName)]
        public static extern CString ImGuiWindowSettings_GetName(ImGuiWindowSettings* self);

        // Function @ cimgui.h:3433:34
        [DllImport(LibraryName)]
        public static extern ImGuiSettingsHandler* ImGuiSettingsHandler_ImGuiSettingsHandler();

        // Function @ cimgui.h:3434:17
        [DllImport(LibraryName)]
        public static extern void ImGuiSettingsHandler_destroy(ImGuiSettingsHandler* self);

        // Function @ cimgui.h:3435:32
        [DllImport(LibraryName)]
        public static extern ImGuiMetricsConfig* ImGuiMetricsConfig_ImGuiMetricsConfig();

        // Function @ cimgui.h:3436:17
        [DllImport(LibraryName)]
        public static extern void ImGuiMetricsConfig_destroy(ImGuiMetricsConfig* self);

        // Function @ cimgui.h:3437:33
        [DllImport(LibraryName)]
        public static extern ImGuiStackLevelInfo* ImGuiStackLevelInfo_ImGuiStackLevelInfo();

        // Function @ cimgui.h:3438:17
        [DllImport(LibraryName)]
        public static extern void ImGuiStackLevelInfo_destroy(ImGuiStackLevelInfo* self);

        // Function @ cimgui.h:3439:28
        [DllImport(LibraryName)]
        public static extern ImGuiStackTool* ImGuiStackTool_ImGuiStackTool();

        // Function @ cimgui.h:3440:17
        [DllImport(LibraryName)]
        public static extern void ImGuiStackTool_destroy(ImGuiStackTool* self);

        // Function @ cimgui.h:3441:30
        [DllImport(LibraryName)]
        public static extern ImGuiContextHook* ImGuiContextHook_ImGuiContextHook();

        // Function @ cimgui.h:3442:17
        [DllImport(LibraryName)]
        public static extern void ImGuiContextHook_destroy(ImGuiContextHook* self);

        // Function @ cimgui.h:3443:26
        [DllImport(LibraryName)]
        public static extern ImGuiContext* ImGuiContext_ImGuiContext(ImFontAtlas* shared_font_atlas);

        // Function @ cimgui.h:3444:17
        [DllImport(LibraryName)]
        public static extern void ImGuiContext_destroy(ImGuiContext* self);

        // Function @ cimgui.h:3445:25
        [DllImport(LibraryName)]
        public static extern ImGuiWindow* ImGuiWindow_ImGuiWindow(ImGuiContext* context, CString name);

        // Function @ cimgui.h:3446:17
        [DllImport(LibraryName)]
        public static extern void ImGuiWindow_destroy(ImGuiWindow* self);

        // Function @ cimgui.h:3447:20
        [DllImport(LibraryName)]
        public static extern ImGuiID ImGuiWindow_GetID_Str(ImGuiWindow* self, CString str, CString str_end);

        // Function @ cimgui.h:3448:20
        [DllImport(LibraryName)]
        public static extern ImGuiID ImGuiWindow_GetID_Ptr(ImGuiWindow* self, void* ptr);

        // Function @ cimgui.h:3449:20
        [DllImport(LibraryName)]
        public static extern ImGuiID ImGuiWindow_GetID_Int(ImGuiWindow* self, int n);

        // Function @ cimgui.h:3450:20
        [DllImport(LibraryName)]
        public static extern ImGuiID ImGuiWindow_GetIDNoKeepAlive_Str(ImGuiWindow* self, CString str, CString str_end);

        // Function @ cimgui.h:3451:20
        [DllImport(LibraryName)]
        public static extern ImGuiID ImGuiWindow_GetIDNoKeepAlive_Ptr(ImGuiWindow* self, void* ptr);

        // Function @ cimgui.h:3452:20
        [DllImport(LibraryName)]
        public static extern ImGuiID ImGuiWindow_GetIDNoKeepAlive_Int(ImGuiWindow* self, int n);

        // Function @ cimgui.h:3453:20
        [DllImport(LibraryName)]
        public static extern ImGuiID ImGuiWindow_GetIDFromRectangle(ImGuiWindow* self, ImRect r_abs);

        // Function @ cimgui.h:3454:17
        [DllImport(LibraryName)]
        public static extern void ImGuiWindow_Rect(ImRect* pOut, ImGuiWindow* self);

        // Function @ cimgui.h:3455:18
        [DllImport(LibraryName)]
        public static extern float ImGuiWindow_CalcFontSize(ImGuiWindow* self);

        // Function @ cimgui.h:3456:18
        [DllImport(LibraryName)]
        public static extern float ImGuiWindow_TitleBarHeight(ImGuiWindow* self);

        // Function @ cimgui.h:3457:17
        [DllImport(LibraryName)]
        public static extern void ImGuiWindow_TitleBarRect(ImRect* pOut, ImGuiWindow* self);

        // Function @ cimgui.h:3458:18
        [DllImport(LibraryName)]
        public static extern float ImGuiWindow_MenuBarHeight(ImGuiWindow* self);

        // Function @ cimgui.h:3459:17
        [DllImport(LibraryName)]
        public static extern void ImGuiWindow_MenuBarRect(ImRect* pOut, ImGuiWindow* self);

        // Function @ cimgui.h:3460:26
        [DllImport(LibraryName)]
        public static extern ImGuiTabItem* ImGuiTabItem_ImGuiTabItem();

        // Function @ cimgui.h:3461:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTabItem_destroy(ImGuiTabItem* self);

        // Function @ cimgui.h:3462:25
        [DllImport(LibraryName)]
        public static extern ImGuiTabBar* ImGuiTabBar_ImGuiTabBar();

        // Function @ cimgui.h:3463:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTabBar_destroy(ImGuiTabBar* self);

        // Function @ cimgui.h:3464:16
        [DllImport(LibraryName)]
        public static extern int ImGuiTabBar_GetTabOrder(ImGuiTabBar* self, ImGuiTabItem* tab);

        // Function @ cimgui.h:3465:24
        [DllImport(LibraryName)]
        public static extern CString ImGuiTabBar_GetTabName(ImGuiTabBar* self, ImGuiTabItem* tab);

        // Function @ cimgui.h:3466:30
        [DllImport(LibraryName)]
        public static extern ImGuiTableColumn* ImGuiTableColumn_ImGuiTableColumn();

        // Function @ cimgui.h:3467:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTableColumn_destroy(ImGuiTableColumn* self);

        // Function @ cimgui.h:3468:24
        [DllImport(LibraryName)]
        public static extern ImGuiTable* ImGuiTable_ImGuiTable();

        // Function @ cimgui.h:3469:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTable_destroy(ImGuiTable* self);

        // Function @ cimgui.h:3470:32
        [DllImport(LibraryName)]
        public static extern ImGuiTableTempData* ImGuiTableTempData_ImGuiTableTempData();

        // Function @ cimgui.h:3471:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTableTempData_destroy(ImGuiTableTempData* self);

        // Function @ cimgui.h:3472:38
        [DllImport(LibraryName)]
        public static extern ImGuiTableColumnSettings* ImGuiTableColumnSettings_ImGuiTableColumnSettings();

        // Function @ cimgui.h:3473:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTableColumnSettings_destroy(ImGuiTableColumnSettings* self);

        // Function @ cimgui.h:3474:32
        [DllImport(LibraryName)]
        public static extern ImGuiTableSettings* ImGuiTableSettings_ImGuiTableSettings();

        // Function @ cimgui.h:3475:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTableSettings_destroy(ImGuiTableSettings* self);

        // Function @ cimgui.h:3476:38
        [DllImport(LibraryName)]
        public static extern ImGuiTableColumnSettings* ImGuiTableSettings_GetColumnSettings(ImGuiTableSettings* self);

        // Function @ cimgui.h:3477:25
        [DllImport(LibraryName)]
        public static extern ImGuiWindow* igGetCurrentWindowRead();

        // Function @ cimgui.h:3478:25
        [DllImport(LibraryName)]
        public static extern ImGuiWindow* igGetCurrentWindow();

        // Function @ cimgui.h:3479:25
        [DllImport(LibraryName)]
        public static extern ImGuiWindow* igFindWindowByID(ImGuiID id);

        // Function @ cimgui.h:3480:25
        [DllImport(LibraryName)]
        public static extern ImGuiWindow* igFindWindowByName(CString name);

        // Function @ cimgui.h:3481:17
        [DllImport(LibraryName)]
        public static extern void igUpdateWindowParentAndRootLinks(ImGuiWindow* window, ImGuiWindowFlags flags, ImGuiWindow* parent_window);

        // Function @ cimgui.h:3482:17
        [DllImport(LibraryName)]
        public static extern void igCalcWindowNextAutoFitSize(Vector2* pOut, ImGuiWindow* window);

        // Function @ cimgui.h:3483:17
        [DllImport(LibraryName)]
        public static extern CBool igIsWindowChildOf(ImGuiWindow* window, ImGuiWindow* potential_parent, CBool popup_hierarchy);

        // Function @ cimgui.h:3484:17
        [DllImport(LibraryName)]
        public static extern CBool igIsWindowWithinBeginStackOf(ImGuiWindow* window, ImGuiWindow* potential_parent);

        // Function @ cimgui.h:3485:17
        [DllImport(LibraryName)]
        public static extern CBool igIsWindowAbove(ImGuiWindow* potential_above, ImGuiWindow* potential_below);

        // Function @ cimgui.h:3486:17
        [DllImport(LibraryName)]
        public static extern CBool igIsWindowNavFocusable(ImGuiWindow* window);

        // Function @ cimgui.h:3487:17
        [DllImport(LibraryName)]
        public static extern void igSetWindowPos_WindowPtr(ImGuiWindow* window, Vector2 pos, ImGuiCond cond);

        // Function @ cimgui.h:3488:17
        [DllImport(LibraryName)]
        public static extern void igSetWindowSize_WindowPtr(ImGuiWindow* window, Vector2 size, ImGuiCond cond);

        // Function @ cimgui.h:3489:17
        [DllImport(LibraryName)]
        public static extern void igSetWindowCollapsed_WindowPtr(ImGuiWindow* window, CBool collapsed, ImGuiCond cond);

        // Function @ cimgui.h:3490:17
        [DllImport(LibraryName)]
        public static extern void igSetWindowHitTestHole(ImGuiWindow* window, Vector2 pos, Vector2 size);

        // Function @ cimgui.h:3491:17
        [DllImport(LibraryName)]
        public static extern void igWindowRectAbsToRel(ImRect* pOut, ImGuiWindow* window, ImRect r);

        // Function @ cimgui.h:3492:17
        [DllImport(LibraryName)]
        public static extern void igWindowRectRelToAbs(ImRect* pOut, ImGuiWindow* window, ImRect r);

        // Function @ cimgui.h:3493:17
        [DllImport(LibraryName)]
        public static extern void igFocusWindow(ImGuiWindow* window);

        // Function @ cimgui.h:3494:17
        [DllImport(LibraryName)]
        public static extern void igFocusTopMostWindowUnderOne(ImGuiWindow* under_this_window, ImGuiWindow* ignore_window);

        // Function @ cimgui.h:3495:17
        [DllImport(LibraryName)]
        public static extern void igBringWindowToFocusFront(ImGuiWindow* window);

        // Function @ cimgui.h:3496:17
        [DllImport(LibraryName)]
        public static extern void igBringWindowToDisplayFront(ImGuiWindow* window);

        // Function @ cimgui.h:3497:17
        [DllImport(LibraryName)]
        public static extern void igBringWindowToDisplayBack(ImGuiWindow* window);

        // Function @ cimgui.h:3498:17
        [DllImport(LibraryName)]
        public static extern void igBringWindowToDisplayBehind(ImGuiWindow* window, ImGuiWindow* above_window);

        // Function @ cimgui.h:3499:16
        [DllImport(LibraryName)]
        public static extern int igFindWindowDisplayIndex(ImGuiWindow* window);

        // Function @ cimgui.h:3500:25
        [DllImport(LibraryName)]
        public static extern ImGuiWindow* igFindBottomMostVisibleWindowWithinBeginStack(ImGuiWindow* window);

        // Function @ cimgui.h:3501:17
        [DllImport(LibraryName)]
        public static extern void igSetCurrentFont(ImFont* font);

        // Function @ cimgui.h:3502:20
        [DllImport(LibraryName)]
        public static extern ImFont* igGetDefaultFont();

        // Function @ cimgui.h:3503:24
        [DllImport(LibraryName)]
        public static extern ImDrawList* igGetForegroundDrawList_WindowPtr(ImGuiWindow* window);

        // Function @ cimgui.h:3504:24
        [DllImport(LibraryName)]
        public static extern ImDrawList* igGetBackgroundDrawList_ViewportPtr(ImGuiViewport* viewport);

        // Function @ cimgui.h:3505:24
        [DllImport(LibraryName)]
        public static extern ImDrawList* igGetForegroundDrawList_ViewportPtr(ImGuiViewport* viewport);

        // Function @ cimgui.h:3506:17
        [DllImport(LibraryName)]
        public static extern void igInitialize(ImGuiContext* context);

        // Function @ cimgui.h:3507:17
        [DllImport(LibraryName)]
        public static extern void igShutdown(ImGuiContext* context);

        // Function @ cimgui.h:3508:17
        [DllImport(LibraryName)]
        public static extern void igUpdateInputEvents(CBool trickle_fast_inputs);

        // Function @ cimgui.h:3509:17
        [DllImport(LibraryName)]
        public static extern void igUpdateHoveredWindowAndCaptureFlags();

        // Function @ cimgui.h:3510:17
        [DllImport(LibraryName)]
        public static extern void igStartMouseMovingWindow(ImGuiWindow* window);

        // Function @ cimgui.h:3511:17
        [DllImport(LibraryName)]
        public static extern void igUpdateMouseMovingWindowNewFrame();

        // Function @ cimgui.h:3512:17
        [DllImport(LibraryName)]
        public static extern void igUpdateMouseMovingWindowEndFrame();

        // Function @ cimgui.h:3513:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igAddContextHook(ImGuiContext* context, ImGuiContextHook* hook);

        // Function @ cimgui.h:3514:17
        [DllImport(LibraryName)]
        public static extern void igRemoveContextHook(ImGuiContext* context, ImGuiID hook_to_remove);

        // Function @ cimgui.h:3515:17
        [DllImport(LibraryName)]
        public static extern void igCallContextHooks(ImGuiContext* context, ImGuiContextHookType type);

        // Function @ cimgui.h:3516:17
        [DllImport(LibraryName)]
        public static extern void igMarkIniSettingsDirty_Nil();

        // Function @ cimgui.h:3517:17
        [DllImport(LibraryName)]
        public static extern void igMarkIniSettingsDirty_WindowPtr(ImGuiWindow* window);

        // Function @ cimgui.h:3518:17
        [DllImport(LibraryName)]
        public static extern void igClearIniSettings();

        // Function @ cimgui.h:3519:33
        [DllImport(LibraryName)]
        public static extern ImGuiWindowSettings* igCreateNewWindowSettings(CString name);

        // Function @ cimgui.h:3520:33
        [DllImport(LibraryName)]
        public static extern ImGuiWindowSettings* igFindWindowSettings(ImGuiID id);

        // Function @ cimgui.h:3521:33
        [DllImport(LibraryName)]
        public static extern ImGuiWindowSettings* igFindOrCreateWindowSettings(CString name);

        // Function @ cimgui.h:3522:34
        [DllImport(LibraryName)]
        public static extern ImGuiSettingsHandler* igFindSettingsHandler(CString type_name);

        // Function @ cimgui.h:3523:17
        [DllImport(LibraryName)]
        public static extern void igSetNextWindowScroll(Vector2 scroll);

        // Function @ cimgui.h:3524:17
        [DllImport(LibraryName)]
        public static extern void igSetScrollX_WindowPtr(ImGuiWindow* window, float scroll_x);

        // Function @ cimgui.h:3525:17
        [DllImport(LibraryName)]
        public static extern void igSetScrollY_WindowPtr(ImGuiWindow* window, float scroll_y);

        // Function @ cimgui.h:3526:17
        [DllImport(LibraryName)]
        public static extern void igSetScrollFromPosX_WindowPtr(ImGuiWindow* window, float local_x, float center_x_ratio);

        // Function @ cimgui.h:3527:17
        [DllImport(LibraryName)]
        public static extern void igSetScrollFromPosY_WindowPtr(ImGuiWindow* window, float local_y, float center_y_ratio);

        // Function @ cimgui.h:3528:17
        [DllImport(LibraryName)]
        public static extern void igScrollToItem(ImGuiScrollFlags flags);

        // Function @ cimgui.h:3529:17
        [DllImport(LibraryName)]
        public static extern void igScrollToRect(ImGuiWindow* window, ImRect rect, ImGuiScrollFlags flags);

        // Function @ cimgui.h:3530:17
        [DllImport(LibraryName)]
        public static extern void igScrollToRectEx(Vector2* pOut, ImGuiWindow* window, ImRect rect, ImGuiScrollFlags flags);

        // Function @ cimgui.h:3531:17
        [DllImport(LibraryName)]
        public static extern void igScrollToBringRectIntoView(ImGuiWindow* window, ImRect rect);

        // Function @ cimgui.h:3532:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igGetItemID();

        // Function @ cimgui.h:3533:33
        [DllImport(LibraryName)]
        public static extern ImGuiItemStatusFlags igGetItemStatusFlags();

        // Function @ cimgui.h:3534:27
        [DllImport(LibraryName)]
        public static extern ImGuiItemFlags igGetItemFlags();

        // Function @ cimgui.h:3535:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igGetActiveID();

        // Function @ cimgui.h:3536:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igGetFocusID();

        // Function @ cimgui.h:3537:17
        [DllImport(LibraryName)]
        public static extern void igSetActiveID(ImGuiID id, ImGuiWindow* window);

        // Function @ cimgui.h:3538:17
        [DllImport(LibraryName)]
        public static extern void igSetFocusID(ImGuiID id, ImGuiWindow* window);

        // Function @ cimgui.h:3539:17
        [DllImport(LibraryName)]
        public static extern void igClearActiveID();

        // Function @ cimgui.h:3540:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igGetHoveredID();

        // Function @ cimgui.h:3541:17
        [DllImport(LibraryName)]
        public static extern void igSetHoveredID(ImGuiID id);

        // Function @ cimgui.h:3542:17
        [DllImport(LibraryName)]
        public static extern void igKeepAliveID(ImGuiID id);

        // Function @ cimgui.h:3543:17
        [DllImport(LibraryName)]
        public static extern void igMarkItemEdited(ImGuiID id);

        // Function @ cimgui.h:3544:17
        [DllImport(LibraryName)]
        public static extern void igPushOverrideID(ImGuiID id);

        // Function @ cimgui.h:3545:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igGetIDWithSeed(CString str_id_begin, CString str_id_end, ImGuiID seed);

        // Function @ cimgui.h:3546:17
        [DllImport(LibraryName)]
        public static extern void igItemSize_Vec2(Vector2 size, float text_baseline_y);

        // Function @ cimgui.h:3547:17
        [DllImport(LibraryName)]
        public static extern void igItemSize_Rect(ImRect bb, float text_baseline_y);

        // Function @ cimgui.h:3548:17
        [DllImport(LibraryName)]
        public static extern CBool igItemAdd(ImRect bb, ImGuiID id, ImRect* nav_bb, ImGuiItemFlags extra_flags);

        // Function @ cimgui.h:3549:17
        [DllImport(LibraryName)]
        public static extern CBool igItemHoverable(ImRect bb, ImGuiID id);

        // Function @ cimgui.h:3550:17
        [DllImport(LibraryName)]
        public static extern CBool igIsClippedEx(ImRect bb, ImGuiID id);

        // Function @ cimgui.h:3551:17
        [DllImport(LibraryName)]
        public static extern void igSetLastItemData(ImGuiID item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags status_flags, ImRect item_rect);

        // Function @ cimgui.h:3552:17
        [DllImport(LibraryName)]
        public static extern void igCalcItemSize(Vector2* pOut, Vector2 size, float default_w, float default_h);

        // Function @ cimgui.h:3553:18
        [DllImport(LibraryName)]
        public static extern float igCalcWrapWidthForPos(Vector2 pos, float wrap_pos_x);

        // Function @ cimgui.h:3554:17
        [DllImport(LibraryName)]
        public static extern void igPushMultiItemsWidths(int components, float width_full);

        // Function @ cimgui.h:3555:17
        [DllImport(LibraryName)]
        public static extern CBool igIsItemToggledSelection();

        // Function @ cimgui.h:3556:17
        [DllImport(LibraryName)]
        public static extern void igGetContentRegionMaxAbs(Vector2* pOut);

        // Function @ cimgui.h:3557:17
        [DllImport(LibraryName)]
        public static extern void igShrinkWidths(ImGuiShrinkWidthItem* items, int count, float width_excess);

        // Function @ cimgui.h:3558:17
        [DllImport(LibraryName)]
        public static extern void igPushItemFlag(ImGuiItemFlags option, CBool enabled);

        // Function @ cimgui.h:3559:17
        [DllImport(LibraryName)]
        public static extern void igPopItemFlag();

        // Function @ cimgui.h:3560:17
        [DllImport(LibraryName)]
        public static extern void igLogBegin(ImGuiLogType type, int auto_open_depth);

        // Function @ cimgui.h:3561:17
        [DllImport(LibraryName)]
        public static extern void igLogToBuffer(int auto_open_depth);

        // Function @ cimgui.h:3562:17
        [DllImport(LibraryName)]
        public static extern void igLogRenderedText(Vector2* ref_pos, CString text, CString text_end);

        // Function @ cimgui.h:3563:17
        [DllImport(LibraryName)]
        public static extern void igLogSetNextTextDecoration(CString prefix, CString suffix);

        // Function @ cimgui.h:3564:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginChildEx(CString name, ImGuiID id, Vector2 size_arg, CBool border, ImGuiWindowFlags flags);

        // Function @ cimgui.h:3565:17
        [DllImport(LibraryName)]
        public static extern void igOpenPopupEx(ImGuiID id, ImGuiPopupFlags popup_flags);

        // Function @ cimgui.h:3566:17
        [DllImport(LibraryName)]
        public static extern void igClosePopupToLevel(int remaining, CBool restore_focus_to_window_under_popup);

        // Function @ cimgui.h:3567:17
        [DllImport(LibraryName)]
        public static extern void igClosePopupsOverWindow(ImGuiWindow* ref_window, CBool restore_focus_to_window_under_popup);

        // Function @ cimgui.h:3568:17
        [DllImport(LibraryName)]
        public static extern void igClosePopupsExceptModals();

        // Function @ cimgui.h:3569:17
        [DllImport(LibraryName)]
        public static extern CBool igIsPopupOpen_ID(ImGuiID id, ImGuiPopupFlags popup_flags);

        // Function @ cimgui.h:3570:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginPopupEx(ImGuiID id, ImGuiWindowFlags extra_flags);

        // Function @ cimgui.h:3571:17
        [DllImport(LibraryName)]
        public static extern void igBeginTooltipEx(ImGuiTooltipFlags tooltip_flags, ImGuiWindowFlags extra_window_flags);

        // Function @ cimgui.h:3572:17
        [DllImport(LibraryName)]
        public static extern void igGetPopupAllowedExtentRect(ImRect* pOut, ImGuiWindow* window);

        // Function @ cimgui.h:3573:25
        [DllImport(LibraryName)]
        public static extern ImGuiWindow* igGetTopMostPopupModal();

        // Function @ cimgui.h:3574:25
        [DllImport(LibraryName)]
        public static extern ImGuiWindow* igGetTopMostAndVisiblePopupModal();

        // Function @ cimgui.h:3575:17
        [DllImport(LibraryName)]
        public static extern void igFindBestWindowPosForPopup(Vector2* pOut, ImGuiWindow* window);

        // Function @ cimgui.h:3576:17
        [DllImport(LibraryName)]
        public static extern void igFindBestWindowPosForPopupEx(Vector2* pOut, Vector2 ref_pos, Vector2 size, ImGuiDir* last_dir, ImRect r_outer, ImRect r_avoid, ImGuiPopupPositionPolicy policy);

        // Function @ cimgui.h:3577:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginViewportSideBar(CString name, ImGuiViewport* viewport, ImGuiDir dir, float size, ImGuiWindowFlags window_flags);

        // Function @ cimgui.h:3578:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginMenuEx(CString label, CString icon, CBool enabled);

        // Function @ cimgui.h:3579:17
        [DllImport(LibraryName)]
        public static extern CBool igMenuItemEx(CString label, CString icon, CString shortcut, CBool selected, CBool enabled);

        // Function @ cimgui.h:3580:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginComboPopup(ImGuiID popup_id, ImRect bb, ImGuiComboFlags flags);

        // Function @ cimgui.h:3581:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginComboPreview();

        // Function @ cimgui.h:3582:17
        [DllImport(LibraryName)]
        public static extern void igEndComboPreview();

        // Function @ cimgui.h:3583:17
        [DllImport(LibraryName)]
        public static extern void igNavInitWindow(ImGuiWindow* window, CBool force_reinit);

        // Function @ cimgui.h:3584:17
        [DllImport(LibraryName)]
        public static extern void igNavInitRequestApplyResult();

        // Function @ cimgui.h:3585:17
        [DllImport(LibraryName)]
        public static extern CBool igNavMoveRequestButNoResultYet();

        // Function @ cimgui.h:3586:17
        [DllImport(LibraryName)]
        public static extern void igNavMoveRequestSubmit(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags);

        // Function @ cimgui.h:3587:17
        [DllImport(LibraryName)]
        public static extern void igNavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags);

        // Function @ cimgui.h:3588:17
        [DllImport(LibraryName)]
        public static extern void igNavMoveRequestResolveWithLastItem(ImGuiNavItemData* result);

        // Function @ cimgui.h:3589:17
        [DllImport(LibraryName)]
        public static extern void igNavMoveRequestCancel();

        // Function @ cimgui.h:3590:17
        [DllImport(LibraryName)]
        public static extern void igNavMoveRequestApplyResult();

        // Function @ cimgui.h:3591:17
        [DllImport(LibraryName)]
        public static extern void igNavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags move_flags);

        // Function @ cimgui.h:3592:24
        [DllImport(LibraryName)]
        public static extern CString igGetNavInputName(ImGuiNavInput n);

        // Function @ cimgui.h:3593:18
        [DllImport(LibraryName)]
        public static extern float igGetNavInputAmount(ImGuiNavInput n, ImGuiInputReadMode mode);

        // Function @ cimgui.h:3594:17
        [DllImport(LibraryName)]
        public static extern void igGetNavInputAmount2d(Vector2* pOut, ImGuiNavDirSourceFlags dir_sources, ImGuiInputReadMode mode, float slow_factor, float fast_factor);

        // Function @ cimgui.h:3595:16
        [DllImport(LibraryName)]
        public static extern int igCalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate);

        // Function @ cimgui.h:3596:17
        [DllImport(LibraryName)]
        public static extern void igActivateItem(ImGuiID id);

        // Function @ cimgui.h:3597:17
        [DllImport(LibraryName)]
        public static extern void igSetNavID(ImGuiID id, ImGuiNavLayer nav_layer, ImGuiID focus_scope_id, ImRect rect_rel);

        // Function @ cimgui.h:3598:17
        [DllImport(LibraryName)]
        public static extern void igPushFocusScope(ImGuiID id);

        // Function @ cimgui.h:3599:17
        [DllImport(LibraryName)]
        public static extern void igPopFocusScope();

        // Function @ cimgui.h:3600:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igGetFocusedFocusScope();

        // Function @ cimgui.h:3601:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igGetFocusScope();

        // Function @ cimgui.h:3602:17
        [DllImport(LibraryName)]
        public static extern CBool igIsNamedKey(ImGuiKey key);

        // Function @ cimgui.h:3603:17
        [DllImport(LibraryName)]
        public static extern CBool igIsLegacyKey(ImGuiKey key);

        // Function @ cimgui.h:3604:17
        [DllImport(LibraryName)]
        public static extern CBool igIsGamepadKey(ImGuiKey key);

        // Function @ cimgui.h:3605:26
        [DllImport(LibraryName)]
        public static extern ImGuiKeyData* igGetKeyData(ImGuiKey key);

        // Function @ cimgui.h:3606:17
        [DllImport(LibraryName)]
        public static extern void igSetItemUsingMouseWheel();

        // Function @ cimgui.h:3607:17
        [DllImport(LibraryName)]
        public static extern void igSetActiveIdUsingNavAndKeys();

        // Function @ cimgui.h:3608:17
        [DllImport(LibraryName)]
        public static extern CBool igIsActiveIdUsingNavDir(ImGuiDir dir);

        // Function @ cimgui.h:3609:17
        [DllImport(LibraryName)]
        public static extern CBool igIsActiveIdUsingNavInput(ImGuiNavInput input);

        // Function @ cimgui.h:3610:17
        [DllImport(LibraryName)]
        public static extern CBool igIsActiveIdUsingKey(ImGuiKey key);

        // Function @ cimgui.h:3611:17
        [DllImport(LibraryName)]
        public static extern void igSetActiveIdUsingKey(ImGuiKey key);

        // Function @ cimgui.h:3612:17
        [DllImport(LibraryName)]
        public static extern CBool igIsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold);

        // Function @ cimgui.h:3613:17
        [DllImport(LibraryName)]
        public static extern CBool igIsNavInputDown(ImGuiNavInput n);

        // Function @ cimgui.h:3614:17
        [DllImport(LibraryName)]
        public static extern CBool igIsNavInputTest(ImGuiNavInput n, ImGuiInputReadMode rm);

        // Function @ cimgui.h:3615:29
        [DllImport(LibraryName)]
        public static extern ImGuiKeyModFlags igGetMergedKeyModFlags();

        // Function @ cimgui.h:3616:17
        [DllImport(LibraryName)]
        public static extern CBool igIsKeyPressedMap(ImGuiKey key, CBool repeat);

        // Function @ cimgui.h:3617:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginDragDropTargetCustom(ImRect bb, ImGuiID id);

        // Function @ cimgui.h:3618:17
        [DllImport(LibraryName)]
        public static extern void igClearDragDrop();

        // Function @ cimgui.h:3619:17
        [DllImport(LibraryName)]
        public static extern CBool igIsDragDropPayloadBeingAccepted();

        // Function @ cimgui.h:3620:17
        [DllImport(LibraryName)]
        public static extern void igSetWindowClipRectBeforeSetChannel(ImGuiWindow* window, ImRect clip_rect);

        // Function @ cimgui.h:3621:17
        [DllImport(LibraryName)]
        public static extern void igBeginColumns(CString str_id, int count, ImGuiOldColumnFlags flags);

        // Function @ cimgui.h:3622:17
        [DllImport(LibraryName)]
        public static extern void igEndColumns();

        // Function @ cimgui.h:3623:17
        [DllImport(LibraryName)]
        public static extern void igPushColumnClipRect(int column_index);

        // Function @ cimgui.h:3624:17
        [DllImport(LibraryName)]
        public static extern void igPushColumnsBackground();

        // Function @ cimgui.h:3625:17
        [DllImport(LibraryName)]
        public static extern void igPopColumnsBackground();

        // Function @ cimgui.h:3626:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igGetColumnsID(CString str_id, int count);

        // Function @ cimgui.h:3627:29
        [DllImport(LibraryName)]
        public static extern ImGuiOldColumns* igFindOrCreateColumns(ImGuiWindow* window, ImGuiID id);

        // Function @ cimgui.h:3628:18
        [DllImport(LibraryName)]
        public static extern float igGetColumnOffsetFromNorm(ImGuiOldColumns* columns, float offset_norm);

        // Function @ cimgui.h:3629:18
        [DllImport(LibraryName)]
        public static extern float igGetColumnNormFromOffset(ImGuiOldColumns* columns, float offset);

        // Function @ cimgui.h:3630:17
        [DllImport(LibraryName)]
        public static extern void igTableOpenContextMenu(int column_n);

        // Function @ cimgui.h:3631:17
        [DllImport(LibraryName)]
        public static extern void igTableSetColumnWidth(int column_n, float width);

        // Function @ cimgui.h:3632:17
        [DllImport(LibraryName)]
        public static extern void igTableSetColumnSortDirection(int column_n, ImGuiSortDirection sort_direction, CBool append_to_sort_specs);

        // Function @ cimgui.h:3633:16
        [DllImport(LibraryName)]
        public static extern int igTableGetHoveredColumn();

        // Function @ cimgui.h:3634:18
        [DllImport(LibraryName)]
        public static extern float igTableGetHeaderRowHeight();

        // Function @ cimgui.h:3635:17
        [DllImport(LibraryName)]
        public static extern void igTablePushBackgroundChannel();

        // Function @ cimgui.h:3636:17
        [DllImport(LibraryName)]
        public static extern void igTablePopBackgroundChannel();

        // Function @ cimgui.h:3637:24
        [DllImport(LibraryName)]
        public static extern ImGuiTable* igGetCurrentTable();

        // Function @ cimgui.h:3638:24
        [DllImport(LibraryName)]
        public static extern ImGuiTable* igTableFindByID(ImGuiID id);

        // Function @ cimgui.h:3639:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginTableEx(CString name, ImGuiID id, int columns_count, ImGuiTableFlags flags, Vector2 outer_size, float inner_width);

        // Function @ cimgui.h:3640:17
        [DllImport(LibraryName)]
        public static extern void igTableBeginInitMemory(ImGuiTable* table, int columns_count);

        // Function @ cimgui.h:3641:17
        [DllImport(LibraryName)]
        public static extern void igTableBeginApplyRequests(ImGuiTable* table);

        // Function @ cimgui.h:3642:17
        [DllImport(LibraryName)]
        public static extern void igTableSetupDrawChannels(ImGuiTable* table);

        // Function @ cimgui.h:3643:17
        [DllImport(LibraryName)]
        public static extern void igTableUpdateLayout(ImGuiTable* table);

        // Function @ cimgui.h:3644:17
        [DllImport(LibraryName)]
        public static extern void igTableUpdateBorders(ImGuiTable* table);

        // Function @ cimgui.h:3645:17
        [DllImport(LibraryName)]
        public static extern void igTableUpdateColumnsWeightFromWidth(ImGuiTable* table);

        // Function @ cimgui.h:3646:17
        [DllImport(LibraryName)]
        public static extern void igTableDrawBorders(ImGuiTable* table);

        // Function @ cimgui.h:3647:17
        [DllImport(LibraryName)]
        public static extern void igTableDrawContextMenu(ImGuiTable* table);

        // Function @ cimgui.h:3648:17
        [DllImport(LibraryName)]
        public static extern void igTableMergeDrawChannels(ImGuiTable* table);

        // Function @ cimgui.h:3649:17
        [DllImport(LibraryName)]
        public static extern void igTableSortSpecsSanitize(ImGuiTable* table);

        // Function @ cimgui.h:3650:17
        [DllImport(LibraryName)]
        public static extern void igTableSortSpecsBuild(ImGuiTable* table);

        // Function @ cimgui.h:3651:31
        [DllImport(LibraryName)]
        public static extern ImGuiSortDirection igTableGetColumnNextSortDirection(ImGuiTableColumn* column);

        // Function @ cimgui.h:3652:17
        [DllImport(LibraryName)]
        public static extern void igTableFixColumnSortDirection(ImGuiTable* table, ImGuiTableColumn* column);

        // Function @ cimgui.h:3653:18
        [DllImport(LibraryName)]
        public static extern float igTableGetColumnWidthAuto(ImGuiTable* table, ImGuiTableColumn* column);

        // Function @ cimgui.h:3654:17
        [DllImport(LibraryName)]
        public static extern void igTableBeginRow(ImGuiTable* table);

        // Function @ cimgui.h:3655:17
        [DllImport(LibraryName)]
        public static extern void igTableEndRow(ImGuiTable* table);

        // Function @ cimgui.h:3656:17
        [DllImport(LibraryName)]
        public static extern void igTableBeginCell(ImGuiTable* table, int column_n);

        // Function @ cimgui.h:3657:17
        [DllImport(LibraryName)]
        public static extern void igTableEndCell(ImGuiTable* table);

        // Function @ cimgui.h:3658:17
        [DllImport(LibraryName)]
        public static extern void igTableGetCellBgRect(ImRect* pOut, ImGuiTable* table, int column_n);

        // Function @ cimgui.h:3659:24
        [DllImport(LibraryName)]
        public static extern CString igTableGetColumnName_TablePtr(ImGuiTable* table, int column_n);

        // Function @ cimgui.h:3660:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igTableGetColumnResizeID(ImGuiTable* table, int column_n, int instance_no);

        // Function @ cimgui.h:3661:18
        [DllImport(LibraryName)]
        public static extern float igTableGetMaxColumnWidth(ImGuiTable* table, int column_n);

        // Function @ cimgui.h:3662:17
        [DllImport(LibraryName)]
        public static extern void igTableSetColumnWidthAutoSingle(ImGuiTable* table, int column_n);

        // Function @ cimgui.h:3663:17
        [DllImport(LibraryName)]
        public static extern void igTableSetColumnWidthAutoAll(ImGuiTable* table);

        // Function @ cimgui.h:3664:17
        [DllImport(LibraryName)]
        public static extern void igTableRemove(ImGuiTable* table);

        // Function @ cimgui.h:3665:17
        [DllImport(LibraryName)]
        public static extern void igTableGcCompactTransientBuffers_TablePtr(ImGuiTable* table);

        // Function @ cimgui.h:3666:17
        [DllImport(LibraryName)]
        public static extern void igTableGcCompactTransientBuffers_TableTempDataPtr(ImGuiTableTempData* table);

        // Function @ cimgui.h:3667:17
        [DllImport(LibraryName)]
        public static extern void igTableGcCompactSettings();

        // Function @ cimgui.h:3668:17
        [DllImport(LibraryName)]
        public static extern void igTableLoadSettings(ImGuiTable* table);

        // Function @ cimgui.h:3669:17
        [DllImport(LibraryName)]
        public static extern void igTableSaveSettings(ImGuiTable* table);

        // Function @ cimgui.h:3670:17
        [DllImport(LibraryName)]
        public static extern void igTableResetSettings(ImGuiTable* table);

        // Function @ cimgui.h:3671:32
        [DllImport(LibraryName)]
        public static extern ImGuiTableSettings* igTableGetBoundSettings(ImGuiTable* table);

        // Function @ cimgui.h:3672:17
        [DllImport(LibraryName)]
        public static extern void igTableSettingsInstallHandler(ImGuiContext* context);

        // Function @ cimgui.h:3673:32
        [DllImport(LibraryName)]
        public static extern ImGuiTableSettings* igTableSettingsCreate(ImGuiID id, int columns_count);

        // Function @ cimgui.h:3674:32
        [DllImport(LibraryName)]
        public static extern ImGuiTableSettings* igTableSettingsFindByID(ImGuiID id);

        // Function @ cimgui.h:3675:17
        [DllImport(LibraryName)]
        public static extern CBool igBeginTabBarEx(ImGuiTabBar* tab_bar, ImRect bb, ImGuiTabBarFlags flags);

        // Function @ cimgui.h:3676:26
        [DllImport(LibraryName)]
        public static extern ImGuiTabItem* igTabBarFindTabByID(ImGuiTabBar* tab_bar, ImGuiID tab_id);

        // Function @ cimgui.h:3677:17
        [DllImport(LibraryName)]
        public static extern void igTabBarRemoveTab(ImGuiTabBar* tab_bar, ImGuiID tab_id);

        // Function @ cimgui.h:3678:17
        [DllImport(LibraryName)]
        public static extern void igTabBarCloseTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab);

        // Function @ cimgui.h:3679:17
        [DllImport(LibraryName)]
        public static extern void igTabBarQueueReorder(ImGuiTabBar* tab_bar, ImGuiTabItem* tab, int offset);

        // Function @ cimgui.h:3680:17
        [DllImport(LibraryName)]
        public static extern void igTabBarQueueReorderFromMousePos(ImGuiTabBar* tab_bar, ImGuiTabItem* tab, Vector2 mouse_pos);

        // Function @ cimgui.h:3681:17
        [DllImport(LibraryName)]
        public static extern CBool igTabBarProcessReorder(ImGuiTabBar* tab_bar);

        // Function @ cimgui.h:3682:17
        [DllImport(LibraryName)]
        public static extern CBool igTabItemEx(ImGuiTabBar* tab_bar, CString label, CBool* p_open, ImGuiTabItemFlags flags);

        // Function @ cimgui.h:3683:17
        [DllImport(LibraryName)]
        public static extern void igTabItemCalcSize(Vector2* pOut, CString label, CBool has_close_button);

        // Function @ cimgui.h:3684:17
        [DllImport(LibraryName)]
        public static extern void igTabItemBackground(ImDrawList* draw_list, ImRect bb, ImGuiTabItemFlags flags, uint col);

        // Function @ cimgui.h:3685:17
        [DllImport(LibraryName)]
        public static extern void igTabItemLabelAndCloseButton(ImDrawList* draw_list, ImRect bb, ImGuiTabItemFlags flags, Vector2 frame_padding, CString label, ImGuiID tab_id, ImGuiID close_button_id, CBool is_contents_visible, CBool* out_just_closed, CBool* out_text_clipped);

        // Function @ cimgui.h:3686:17
        [DllImport(LibraryName)]
        public static extern void igRenderText(Vector2 pos, CString text, CString text_end, CBool hide_text_after_hash);

        // Function @ cimgui.h:3687:17
        [DllImport(LibraryName)]
        public static extern void igRenderTextWrapped(Vector2 pos, CString text, CString text_end, float wrap_width);

        // Function @ cimgui.h:3688:17
        [DllImport(LibraryName)]
        public static extern void igRenderTextClipped(Vector2 pos_min, Vector2 pos_max, CString text, CString text_end, Vector2* text_size_if_known, Vector2 align, ImRect* clip_rect);

        // Function @ cimgui.h:3689:17
        [DllImport(LibraryName)]
        public static extern void igRenderTextClippedEx(ImDrawList* draw_list, Vector2 pos_min, Vector2 pos_max, CString text, CString text_end, Vector2* text_size_if_known, Vector2 align, ImRect* clip_rect);

        // Function @ cimgui.h:3690:17
        [DllImport(LibraryName)]
        public static extern void igRenderTextEllipsis(ImDrawList* draw_list, Vector2 pos_min, Vector2 pos_max, float clip_max_x, float ellipsis_max_x, CString text, CString text_end, Vector2* text_size_if_known);

        // Function @ cimgui.h:3691:17
        [DllImport(LibraryName)]
        public static extern void igRenderFrame(Vector2 p_min, Vector2 p_max, uint fill_col, CBool border, float rounding);

        // Function @ cimgui.h:3692:17
        [DllImport(LibraryName)]
        public static extern void igRenderFrameBorder(Vector2 p_min, Vector2 p_max, float rounding);

        // Function @ cimgui.h:3693:17
        [DllImport(LibraryName)]
        public static extern void igRenderColorRectWithAlphaCheckerboard(ImDrawList* draw_list, Vector2 p_min, Vector2 p_max, uint fill_col, float grid_step, Vector2 grid_off, float rounding, ImDrawFlags flags);

        // Function @ cimgui.h:3694:17
        [DllImport(LibraryName)]
        public static extern void igRenderNavHighlight(ImRect bb, ImGuiID id, ImGuiNavHighlightFlags flags);

        // Function @ cimgui.h:3695:24
        [DllImport(LibraryName)]
        public static extern CString igFindRenderedTextEnd(CString text, CString text_end);

        // Function @ cimgui.h:3696:17
        [DllImport(LibraryName)]
        public static extern void igRenderArrow(ImDrawList* draw_list, Vector2 pos, uint col, ImGuiDir dir, float scale);

        // Function @ cimgui.h:3697:17
        [DllImport(LibraryName)]
        public static extern void igRenderBullet(ImDrawList* draw_list, Vector2 pos, uint col);

        // Function @ cimgui.h:3698:17
        [DllImport(LibraryName)]
        public static extern void igRenderCheckMark(ImDrawList* draw_list, Vector2 pos, uint col, float sz);

        // Function @ cimgui.h:3699:17
        [DllImport(LibraryName)]
        public static extern void igRenderMouseCursor(ImDrawList* draw_list, Vector2 pos, float scale, ImGuiMouseCursor mouse_cursor, uint col_fill, uint col_border, uint col_shadow);

        // Function @ cimgui.h:3700:17
        [DllImport(LibraryName)]
        public static extern void igRenderArrowPointingAt(ImDrawList* draw_list, Vector2 pos, Vector2 half_sz, ImGuiDir direction, uint col);

        // Function @ cimgui.h:3701:17
        [DllImport(LibraryName)]
        public static extern void igRenderRectFilledRangeH(ImDrawList* draw_list, ImRect rect, uint col, float x_start_norm, float x_end_norm, float rounding);

        // Function @ cimgui.h:3702:17
        [DllImport(LibraryName)]
        public static extern void igRenderRectFilledWithHole(ImDrawList* draw_list, ImRect outer, ImRect inner, uint col, float rounding);

        // Function @ cimgui.h:3703:17
        [DllImport(LibraryName)]
        public static extern void igTextEx(CString text, CString text_end, ImGuiTextFlags flags);

        // Function @ cimgui.h:3704:17
        [DllImport(LibraryName)]
        public static extern CBool igButtonEx(CString label, Vector2 size_arg, ImGuiButtonFlags flags);

        // Function @ cimgui.h:3705:17
        [DllImport(LibraryName)]
        public static extern CBool igCloseButton(ImGuiID id, Vector2 pos);

        // Function @ cimgui.h:3706:17
        [DllImport(LibraryName)]
        public static extern CBool igCollapseButton(ImGuiID id, Vector2 pos);

        // Function @ cimgui.h:3707:17
        [DllImport(LibraryName)]
        public static extern CBool igArrowButtonEx(CString str_id, ImGuiDir dir, Vector2 size_arg, ImGuiButtonFlags flags);

        // Function @ cimgui.h:3708:17
        [DllImport(LibraryName)]
        public static extern void igScrollbar(ImGuiAxis axis);

        // Function @ cimgui.h:3709:17
        [DllImport(LibraryName)]
        public static extern CBool igScrollbarEx(ImRect bb, ImGuiID id, ImGuiAxis axis, long* p_scroll_v, long avail_v, long contents_v, ImDrawFlags flags);

        // Function @ cimgui.h:3710:17
        [DllImport(LibraryName)]
        public static extern CBool igImageButtonEx(ImGuiID id, ImTextureID texture_id, Vector2 size, Vector2 uv0, Vector2 uv1, Vector2 padding, Vector4 bg_col, Vector4 tint_col);

        // Function @ cimgui.h:3711:17
        [DllImport(LibraryName)]
        public static extern void igGetWindowScrollbarRect(ImRect* pOut, ImGuiWindow* window, ImGuiAxis axis);

        // Function @ cimgui.h:3712:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igGetWindowScrollbarID(ImGuiWindow* window, ImGuiAxis axis);

        // Function @ cimgui.h:3713:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igGetWindowResizeCornerID(ImGuiWindow* window, int n);

        // Function @ cimgui.h:3714:20
        [DllImport(LibraryName)]
        public static extern ImGuiID igGetWindowResizeBorderID(ImGuiWindow* window, ImGuiDir dir);

        // Function @ cimgui.h:3715:17
        [DllImport(LibraryName)]
        public static extern void igSeparatorEx(ImGuiSeparatorFlags flags);

        // Function @ cimgui.h:3716:17
        [DllImport(LibraryName)]
        public static extern CBool igCheckboxFlags_S64Ptr(CString label, long* flags, long flags_value);

        // Function @ cimgui.h:3717:17
        [DllImport(LibraryName)]
        public static extern CBool igCheckboxFlags_U64Ptr(CString label, ulong* flags, ulong flags_value);

        // Function @ cimgui.h:3718:17
        [DllImport(LibraryName)]
        public static extern CBool igButtonBehavior(ImRect bb, ImGuiID id, CBool* out_hovered, CBool* out_held, ImGuiButtonFlags flags);

        // Function @ cimgui.h:3719:17
        [DllImport(LibraryName)]
        public static extern CBool igDragBehavior(ImGuiID id, ImGuiDataType data_type, void* p_v, float v_speed, void* p_min, void* p_max, CString format, ImGuiSliderFlags flags);

        // Function @ cimgui.h:3720:17
        [DllImport(LibraryName)]
        public static extern CBool igSliderBehavior(ImRect bb, ImGuiID id, ImGuiDataType data_type, void* p_v, void* p_min, void* p_max, CString format, ImGuiSliderFlags flags, ImRect* out_grab_bb);

        // Function @ cimgui.h:3721:17
        [DllImport(LibraryName)]
        public static extern CBool igSplitterBehavior(ImRect bb, ImGuiID id, ImGuiAxis axis, float* size1, float* size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay);

        // Function @ cimgui.h:3722:17
        [DllImport(LibraryName)]
        public static extern CBool igTreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, CString label, CString label_end);

        // Function @ cimgui.h:3723:17
        [DllImport(LibraryName)]
        public static extern CBool igTreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags);

        // Function @ cimgui.h:3724:17
        [DllImport(LibraryName)]
        public static extern void igTreePushOverrideID(ImGuiID id);

        // Function @ cimgui.h:3725:37
        [DllImport(LibraryName)]
        public static extern ImGuiDataTypeInfo* igDataTypeGetInfo(ImGuiDataType data_type);

        // Function @ cimgui.h:3726:16
        [DllImport(LibraryName)]
        public static extern int igDataTypeFormatString(CString buf, int buf_size, ImGuiDataType data_type, void* p_data, CString format);

        // Function @ cimgui.h:3727:17
        [DllImport(LibraryName)]
        public static extern void igDataTypeApplyOp(ImGuiDataType data_type, int op, void* output, void* arg_1, void* arg_2);

        // Function @ cimgui.h:3728:17
        [DllImport(LibraryName)]
        public static extern CBool igDataTypeApplyFromText(CString buf, ImGuiDataType data_type, void* p_data, CString format);

        // Function @ cimgui.h:3729:16
        [DllImport(LibraryName)]
        public static extern int igDataTypeCompare(ImGuiDataType data_type, void* arg_1, void* arg_2);

        // Function @ cimgui.h:3730:17
        [DllImport(LibraryName)]
        public static extern CBool igDataTypeClamp(ImGuiDataType data_type, void* p_data, void* p_min, void* p_max);

        // Function @ cimgui.h:3731:17
        [DllImport(LibraryName)]
        public static extern CBool igInputTextEx(CString label, CString hint, CString buf, int buf_size, Vector2 size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data);

        // Function @ cimgui.h:3732:17
        [DllImport(LibraryName)]
        public static extern CBool igTempInputText(ImRect bb, ImGuiID id, CString label, CString buf, int buf_size, ImGuiInputTextFlags flags);

        // Function @ cimgui.h:3733:17
        [DllImport(LibraryName)]
        public static extern CBool igTempInputScalar(ImRect bb, ImGuiID id, CString label, ImGuiDataType data_type, void* p_data, CString format, void* p_clamp_min, void* p_clamp_max);

        // Function @ cimgui.h:3734:17
        [DllImport(LibraryName)]
        public static extern CBool igTempInputIsActive(ImGuiID id);

        // Function @ cimgui.h:3735:33
        [DllImport(LibraryName)]
        public static extern ImGuiInputTextState* igGetInputTextState(ImGuiID id);

        // Function @ cimgui.h:3736:17
        [DllImport(LibraryName)]
        public static extern void igColorTooltip(CString text, float* col, ImGuiColorEditFlags flags);

        // Function @ cimgui.h:3737:17
        [DllImport(LibraryName)]
        public static extern void igColorEditOptionsPopup(float* col, ImGuiColorEditFlags flags);

        // Function @ cimgui.h:3738:17
        [DllImport(LibraryName)]
        public static extern void igColorPickerOptionsPopup(float* ref_col, ImGuiColorEditFlags flags);

        // Function @ cimgui.h:3739:16
        [DllImport(LibraryName)]
        public static extern int igPlotEx(ImGuiPlotType plot_type, CString label, FnPtr_VoidPtr_Int_Float values_getter, void* data, int values_count, int values_offset, CString overlay_text, float scale_min, float scale_max, Vector2 frame_size);

        // Function @ cimgui.h:3740:17
        [DllImport(LibraryName)]
        public static extern void igShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, Vector2 gradient_p0, Vector2 gradient_p1, uint col0, uint col1);

        // Function @ cimgui.h:3741:17
        [DllImport(LibraryName)]
        public static extern void igShadeVertsLinearUV(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, Vector2 a, Vector2 b, Vector2 uv_a, Vector2 uv_b, CBool clamp);

        // Function @ cimgui.h:3742:17
        [DllImport(LibraryName)]
        public static extern void igGcCompactTransientMiscBuffers();

        // Function @ cimgui.h:3743:17
        [DllImport(LibraryName)]
        public static extern void igGcCompactTransientWindowBuffers(ImGuiWindow* window);

        // Function @ cimgui.h:3744:17
        [DllImport(LibraryName)]
        public static extern void igGcAwakeTransientWindowBuffers(ImGuiWindow* window);

        // Function @ cimgui.h:3745:17
        [DllImport(LibraryName)]
        public static extern void igErrorCheckEndFrameRecover(ImGuiErrorLogCallback log_callback, void* user_data);

        // Function @ cimgui.h:3746:17
        [DllImport(LibraryName)]
        public static extern void igErrorCheckEndWindowRecover(ImGuiErrorLogCallback log_callback, void* user_data);

        // Function @ cimgui.h:3747:17
        [DllImport(LibraryName)]
        public static extern void igDebugDrawItemRect(uint col);

        // Function @ cimgui.h:3748:17
        [DllImport(LibraryName)]
        public static extern void igDebugStartItemPicker();

        // Function @ cimgui.h:3749:17
        [DllImport(LibraryName)]
        public static extern void igShowFontAtlas(ImFontAtlas* atlas);

        // Function @ cimgui.h:3750:17
        [DllImport(LibraryName)]
        public static extern void igDebugHookIdInfo(ImGuiID id, ImGuiDataType data_type, void* data_id, void* data_id_end);

        // Function @ cimgui.h:3751:17
        [DllImport(LibraryName)]
        public static extern void igDebugNodeColumns(ImGuiOldColumns* columns);

        // Function @ cimgui.h:3752:17
        [DllImport(LibraryName)]
        public static extern void igDebugNodeDrawList(ImGuiWindow* window, ImDrawList* draw_list, CString label);

        // Function @ cimgui.h:3753:17
        [DllImport(LibraryName)]
        public static extern void igDebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList* out_draw_list, ImDrawList* draw_list, ImDrawCmd* draw_cmd, CBool show_mesh, CBool show_aabb);

        // Function @ cimgui.h:3754:17
        [DllImport(LibraryName)]
        public static extern void igDebugNodeFont(ImFont* font);

        // Function @ cimgui.h:3755:17
        [DllImport(LibraryName)]
        public static extern void igDebugNodeStorage(ImGuiStorage* storage, CString label);

        // Function @ cimgui.h:3756:17
        [DllImport(LibraryName)]
        public static extern void igDebugNodeTabBar(ImGuiTabBar* tab_bar, CString label);

        // Function @ cimgui.h:3757:17
        [DllImport(LibraryName)]
        public static extern void igDebugNodeTable(ImGuiTable* table);

        // Function @ cimgui.h:3758:17
        [DllImport(LibraryName)]
        public static extern void igDebugNodeTableSettings(ImGuiTableSettings* settings);

        // Function @ cimgui.h:3759:17
        [DllImport(LibraryName)]
        public static extern void igDebugNodeWindow(ImGuiWindow* window, CString label);

        // Function @ cimgui.h:3760:17
        [DllImport(LibraryName)]
        public static extern void igDebugNodeWindowSettings(ImGuiWindowSettings* settings);

        // Function @ cimgui.h:3761:17
        [DllImport(LibraryName)]
        public static extern void igDebugNodeWindowsList(ImVector_ImGuiWindowPtr* windows, CString label);

        // Function @ cimgui.h:3762:17
        [DllImport(LibraryName)]
        public static extern void igDebugNodeWindowsListByBeginStackParent(ImGuiWindow** windows, int windows_size, ImGuiWindow* parent_in_begin_stack);

        // Function @ cimgui.h:3763:17
        [DllImport(LibraryName)]
        public static extern void igDebugNodeViewport(ImGuiViewportP* viewport);

        // Function @ cimgui.h:3764:17
        [DllImport(LibraryName)]
        public static extern void igDebugRenderViewportThumbnail(ImDrawList* draw_list, ImGuiViewportP* viewport, ImRect bb);

        // Function @ cimgui.h:3765:35
        [DllImport(LibraryName)]
        public static extern ImFontBuilderIO* igImFontAtlasGetBuilderForStbTruetype();

        // Function @ cimgui.h:3766:17
        [DllImport(LibraryName)]
        public static extern void igImFontAtlasBuildInit(ImFontAtlas* atlas);

        // Function @ cimgui.h:3767:17
        [DllImport(LibraryName)]
        public static extern void igImFontAtlasBuildSetupFont(ImFontAtlas* atlas, ImFont* font, ImFontConfig* font_config, float ascent, float descent);

        // Function @ cimgui.h:3768:17
        [DllImport(LibraryName)]
        public static extern void igImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas, void* stbrp_context_opaque);

        // Function @ cimgui.h:3769:17
        [DllImport(LibraryName)]
        public static extern void igImFontAtlasBuildFinish(ImFontAtlas* atlas);

        // Function @ cimgui.h:3770:17
        [DllImport(LibraryName)]
        public static extern void igImFontAtlasBuildRender8bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, CString in_str, CChar in_marker_char, byte in_marker_pixel_value);

        // Function @ cimgui.h:3771:17
        [DllImport(LibraryName)]
        public static extern void igImFontAtlasBuildRender32bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, CString in_str, CChar in_marker_char, uint in_marker_pixel_value);

        // Function @ cimgui.h:3772:17
        [DllImport(LibraryName)]
        public static extern void igImFontAtlasBuildMultiplyCalcLookupTable(byte* out_table, float in_multiply_factor);

        // Function @ cimgui.h:3773:17
        [DllImport(LibraryName)]
        public static extern void igImFontAtlasBuildMultiplyRectAlpha8(byte* table, ulong* pixels, int x, int y, int w, int h, int stride);

        // Function @ cimgui.h:3778:17
        [DllImport(LibraryName)]
        public static extern void igLogText(CString fmt);

        // Function @ cimgui.h:3780:17
        [DllImport(LibraryName)]
        public static extern void ImGuiTextBuffer_appendf(ImGuiTextBuffer* buffer, CString fmt);

        // Function @ cimgui.h:3782:18
        [DllImport(LibraryName)]
        public static extern float igGET_FLT_MAX();

        // Function @ cimgui.h:3784:18
        [DllImport(LibraryName)]
        public static extern float igGET_FLT_MIN();

        // Function @ cimgui.h:3787:30
        [DllImport(LibraryName)]
        public static extern ImVector_ImWchar* ImVector_ImWchar_create();

        // Function @ cimgui.h:3788:17
        [DllImport(LibraryName)]
        public static extern void ImVector_ImWchar_destroy(ImVector_ImWchar* self);

        // Function @ cimgui.h:3789:17
        [DllImport(LibraryName)]
        public static extern void ImVector_ImWchar_Init(ImVector_ImWchar* p);

        // Function @ cimgui.h:3790:17
        [DllImport(LibraryName)]
        public static extern void ImVector_ImWchar_UnInit(ImVector_ImWchar* p);

        // FunctionPointer @ cimgui.h:183:16
        [StructLayout(LayoutKind.Sequential)]
        public struct ImGuiSizeCallback
        {
            public delegate* unmanaged<ImGuiSizeCallbackData*, void> Pointer;
        }

        // FunctionPointer @ cimgui.h:2773:77
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Int_CStringPtr_CBool
        {
            public delegate* unmanaged<void*, int, CString*, CBool> Pointer;
        }

        // FunctionPointer @ cimgui.h:182:15
        [StructLayout(LayoutKind.Sequential)]
        public struct ImGuiInputTextCallback
        {
            public delegate* unmanaged<ImGuiInputTextCallbackData*, int> Pointer;
        }

        // FunctionPointer @ cimgui.h:2844:65
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Int_Float
        {
            public delegate* unmanaged<void*, int, float> Pointer;
        }

        // FunctionPointer @ cimgui.h:184:17
        [StructLayout(LayoutKind.Sequential)]
        public struct ImGuiMemAllocFunc
        {
            public delegate* unmanaged<ulong, void*, void*> Pointer;
        }

        // FunctionPointer @ cimgui.h:185:16
        [StructLayout(LayoutKind.Sequential)]
        public struct ImGuiMemFreeFunc
        {
            public delegate* unmanaged<void*, void*, void> Pointer;
        }

        // FunctionPointer @ cimgui.h:994:16
        [StructLayout(LayoutKind.Sequential)]
        public struct ImDrawCallback
        {
            public delegate* unmanaged<ImDrawList*, ImDrawCmd*, void> Pointer;
        }

        // FunctionPointer @ cimgui.h:3234:79
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_VoidPtr_Int
        {
            public delegate* unmanaged<void*, void*, int> Pointer;
        }

        // FunctionPointer @ cimgui.h:1269:16
        [StructLayout(LayoutKind.Sequential)]
        public struct ImGuiErrorLogCallback
        {
            public delegate* unmanaged<void*, CString, void> Pointer;
        }

        // FunctionPointer @ cimgui.h:839:19
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_CString
        {
            public delegate* unmanaged<void*, CString> Pointer;
        }

        // FunctionPointer @ cimgui.h:840:12
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_CString_Void
        {
            public delegate* unmanaged<void*, CString, void> Pointer;
        }

        // FunctionPointer @ cimgui.h:842:12
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_ImGuiViewportPtr_ImGuiPlatformImeDataPtr_Void
        {
            public delegate* unmanaged<ImGuiViewport*, ImGuiPlatformImeData*, void> Pointer;
        }

        // FunctionPointer @ cimgui.h:1850:12
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_ImGuiContextPtr_ImGuiSettingsHandlerPtr_Void
        {
            public delegate* unmanaged<ImGuiContext*, ImGuiSettingsHandler*, void> Pointer;
        }

        // FunctionPointer @ cimgui.h:1852:13
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_ImGuiContextPtr_ImGuiSettingsHandlerPtr_CString_VoidPtr
        {
            public delegate* unmanaged<ImGuiContext*, ImGuiSettingsHandler*, CString, void*> Pointer;
        }

        // FunctionPointer @ cimgui.h:1853:12
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_ImGuiContextPtr_ImGuiSettingsHandlerPtr_VoidPtr_CString_Void
        {
            public delegate* unmanaged<ImGuiContext*, ImGuiSettingsHandler*, void*, CString, void> Pointer;
        }

        // FunctionPointer @ cimgui.h:1855:12
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_ImGuiContextPtr_ImGuiSettingsHandlerPtr_ImGuiTextBufferPtr_Void
        {
            public delegate* unmanaged<ImGuiContext*, ImGuiSettingsHandler*, ImGuiTextBuffer*, void> Pointer;
        }

        // FunctionPointer @ cimgui.h:1887:16
        [StructLayout(LayoutKind.Sequential)]
        public struct ImGuiContextHookCallback
        {
            public delegate* unmanaged<ImGuiContext*, ImGuiContextHook*, void> Pointer;
        }

        // FunctionPointer @ cimgui.h:2551:12
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_ImFontAtlasPtr_CBool
        {
            public delegate* unmanaged<ImFontAtlas*, CBool> Pointer;
        }

        // Struct @ cimgui.h:57:29
        [StructLayout(LayoutKind.Explicit, Size = 25048, Pack = 8)]
        public struct ImGuiContext
        {
            [FieldOffset(0)] // size = 1, padding = 0
            public CBool Initialized;

            [FieldOffset(1)] // size = 1, padding = 6
            public CBool FontAtlasOwnedByContext;

            [FieldOffset(8)] // size = 14160, padding = 0
            public ImGuiIO IO;

            [FieldOffset(14168)] // size = 16, padding = 0
            public ImVector_ImGuiInputEvent InputEventsQueue;

            [FieldOffset(14184)] // size = 16, padding = 0
            public ImVector_ImGuiInputEvent InputEventsTrail;

            [FieldOffset(14200)] // size = 1048, padding = 0
            public ImGuiStyle Style;

            [FieldOffset(15248)] // size = 8, padding = 0
            public ImFont* Font;

            [FieldOffset(15256)] // size = 4, padding = 0
            public float FontSize;

            [FieldOffset(15260)] // size = 4, padding = 0
            public float FontBaseSize;

            [FieldOffset(15264)] // size = 512, padding = 0
            public ImDrawListSharedData DrawListSharedData;

            [FieldOffset(15776)] // size = 8, padding = 0
            public double Time;

            [FieldOffset(15784)] // size = 4, padding = 0
            public int FrameCount;

            [FieldOffset(15788)] // size = 4, padding = 0
            public int FrameCountEnded;

            [FieldOffset(15792)] // size = 4, padding = 0
            public int FrameCountRendered;

            [FieldOffset(15796)] // size = 1, padding = 0
            public CBool WithinFrameScope;

            [FieldOffset(15797)] // size = 1, padding = 0
            public CBool WithinFrameScopeWithImplicitWindow;

            [FieldOffset(15798)] // size = 1, padding = 0
            public CBool WithinEndChild;

            [FieldOffset(15799)] // size = 1, padding = 0
            public CBool GcCompactAll;

            [FieldOffset(15800)] // size = 1, padding = 7
            public CBool TestEngineHookItems;

            [FieldOffset(15808)] // size = 8, padding = 0
            public void* TestEngine;

            [FieldOffset(15816)] // size = 16, padding = 0
            public ImVector_ImGuiWindowPtr Windows;

            [FieldOffset(15832)] // size = 16, padding = 0
            public ImVector_ImGuiWindowPtr WindowsFocusOrder;

            [FieldOffset(15848)] // size = 16, padding = 0
            public ImVector_ImGuiWindowPtr WindowsTempSortBuffer;

            [FieldOffset(15864)] // size = 16, padding = 0
            public ImVector_ImGuiWindowStackData CurrentWindowStack;

            [FieldOffset(15880)] // size = 16, padding = 0
            public ImGuiStorage WindowsById;

            [FieldOffset(15896)] // size = 4, padding = 0
            public int WindowsActiveCount;

            [FieldOffset(15900)] // size = 8, padding = 4
            public Vector2 WindowsHoverPadding;

            [FieldOffset(15912)] // size = 8, padding = 0
            public ImGuiWindow* CurrentWindow;

            [FieldOffset(15920)] // size = 8, padding = 0
            public ImGuiWindow* HoveredWindow;

            [FieldOffset(15928)] // size = 8, padding = 0
            public ImGuiWindow* HoveredWindowUnderMovingWindow;

            [FieldOffset(15936)] // size = 8, padding = 0
            public ImGuiWindow* MovingWindow;

            [FieldOffset(15944)] // size = 8, padding = 0
            public ImGuiWindow* WheelingWindow;

            [FieldOffset(15952)] // size = 8, padding = 0
            public Vector2 WheelingWindowRefMousePos;

            [FieldOffset(15960)] // size = 4, padding = 0
            public float WheelingWindowTimer;

            [FieldOffset(15964)] // size = 4, padding = 0
            public ImGuiID DebugHookIdInfo;

            [FieldOffset(15968)] // size = 4, padding = 0
            public ImGuiID HoveredId;

            [FieldOffset(15972)] // size = 4, padding = 0
            public ImGuiID HoveredIdPreviousFrame;

            [FieldOffset(15976)] // size = 1, padding = 0
            public CBool HoveredIdAllowOverlap;

            [FieldOffset(15977)] // size = 1, padding = 0
            public CBool HoveredIdUsingMouseWheel;

            [FieldOffset(15978)] // size = 1, padding = 0
            public CBool HoveredIdPreviousFrameUsingMouseWheel;

            [FieldOffset(15979)] // size = 1, padding = 0
            public CBool HoveredIdDisabled;

            [FieldOffset(15980)] // size = 4, padding = 0
            public float HoveredIdTimer;

            [FieldOffset(15984)] // size = 4, padding = 0
            public float HoveredIdNotActiveTimer;

            [FieldOffset(15988)] // size = 4, padding = 0
            public ImGuiID ActiveId;

            [FieldOffset(15992)] // size = 4, padding = 0
            public ImGuiID ActiveIdIsAlive;

            [FieldOffset(15996)] // size = 4, padding = 0
            public float ActiveIdTimer;

            [FieldOffset(16000)] // size = 1, padding = 0
            public CBool ActiveIdIsJustActivated;

            [FieldOffset(16001)] // size = 1, padding = 0
            public CBool ActiveIdAllowOverlap;

            [FieldOffset(16002)] // size = 1, padding = 0
            public CBool ActiveIdNoClearOnFocusLoss;

            [FieldOffset(16003)] // size = 1, padding = 0
            public CBool ActiveIdHasBeenPressedBefore;

            [FieldOffset(16004)] // size = 1, padding = 0
            public CBool ActiveIdHasBeenEditedBefore;

            [FieldOffset(16005)] // size = 1, padding = 0
            public CBool ActiveIdHasBeenEditedThisFrame;

            [FieldOffset(16006)] // size = 1, padding = 1
            public CBool ActiveIdUsingMouseWheel;

            [FieldOffset(16008)] // size = 4, padding = 0
            public uint ActiveIdUsingNavDirMask;

            [FieldOffset(16012)] // size = 4, padding = 0
            public uint ActiveIdUsingNavInputMask;

            [FieldOffset(16016)] // size = 20, padding = 0
            public ImBitArrayForNamedKeys ActiveIdUsingKeyInputMask;

            [FieldOffset(16036)] // size = 8, padding = 4
            public Vector2 ActiveIdClickOffset;

            [FieldOffset(16048)] // size = 8, padding = 0
            public ImGuiWindow* ActiveIdWindow;

            [FieldOffset(16056)] // size = 4, padding = 0
            public ImGuiInputSource ActiveIdSource;

            [FieldOffset(16060)] // size = 4, padding = 0
            public int ActiveIdMouseButton;

            [FieldOffset(16064)] // size = 4, padding = 0
            public ImGuiID ActiveIdPreviousFrame;

            [FieldOffset(16068)] // size = 1, padding = 0
            public CBool ActiveIdPreviousFrameIsAlive;

            [FieldOffset(16069)] // size = 1, padding = 2
            public CBool ActiveIdPreviousFrameHasBeenEditedBefore;

            [FieldOffset(16072)] // size = 8, padding = 0
            public ImGuiWindow* ActiveIdPreviousFrameWindow;

            [FieldOffset(16080)] // size = 4, padding = 0
            public ImGuiID LastActiveId;

            [FieldOffset(16084)] // size = 4, padding = 0
            public float LastActiveIdTimer;

            [FieldOffset(16088)] // size = 4, padding = 0
            public ImGuiItemFlags CurrentItemFlags;

            [FieldOffset(16092)] // size = 20, padding = 0
            public ImGuiNextItemData NextItemData;

            [FieldOffset(16112)] // size = 60, padding = 4
            public ImGuiLastItemData LastItemData;

            [FieldOffset(16176)] // size = 112, padding = 0
            public ImGuiNextWindowData NextWindowData;

            [FieldOffset(16288)] // size = 16, padding = 0
            public ImVector_ImGuiColorMod ColorStack;

            [FieldOffset(16304)] // size = 16, padding = 0
            public ImVector_ImGuiStyleMod StyleVarStack;

            [FieldOffset(16320)] // size = 16, padding = 0
            public ImVector_ImFontPtr FontStack;

            [FieldOffset(16336)] // size = 16, padding = 0
            public ImVector_ImGuiID FocusScopeStack;

            [FieldOffset(16352)] // size = 16, padding = 0
            public ImVector_ImGuiItemFlags ItemFlagsStack;

            [FieldOffset(16368)] // size = 16, padding = 0
            public ImVector_ImGuiGroupData GroupStack;

            [FieldOffset(16384)] // size = 16, padding = 0
            public ImVector_ImGuiPopupData OpenPopupStack;

            [FieldOffset(16400)] // size = 16, padding = 0
            public ImVector_ImGuiPopupData BeginPopupStack;

            [FieldOffset(16416)] // size = 4, padding = 4
            public int BeginMenuCount;

            [FieldOffset(16424)] // size = 16, padding = 0
            public ImVector_ImGuiViewportPPtr Viewports;

            [FieldOffset(16440)] // size = 8, padding = 0
            public ImGuiWindow* NavWindow;

            [FieldOffset(16448)] // size = 4, padding = 0
            public ImGuiID NavId;

            [FieldOffset(16452)] // size = 4, padding = 0
            public ImGuiID NavFocusScopeId;

            [FieldOffset(16456)] // size = 4, padding = 0
            public ImGuiID NavActivateId;

            [FieldOffset(16460)] // size = 4, padding = 0
            public ImGuiID NavActivateDownId;

            [FieldOffset(16464)] // size = 4, padding = 0
            public ImGuiID NavActivatePressedId;

            [FieldOffset(16468)] // size = 4, padding = 0
            public ImGuiID NavActivateInputId;

            [FieldOffset(16472)] // size = 4, padding = 0
            public ImGuiActivateFlags NavActivateFlags;

            [FieldOffset(16476)] // size = 4, padding = 0
            public ImGuiID NavJustMovedToId;

            [FieldOffset(16480)] // size = 4, padding = 0
            public ImGuiID NavJustMovedToFocusScopeId;

            [FieldOffset(16484)] // size = 4, padding = 0
            public ImGuiKeyModFlags NavJustMovedToKeyMods;

            [FieldOffset(16488)] // size = 4, padding = 0
            public ImGuiID NavNextActivateId;

            [FieldOffset(16492)] // size = 4, padding = 0
            public ImGuiActivateFlags NavNextActivateFlags;

            [FieldOffset(16496)] // size = 4, padding = 0
            public ImGuiInputSource NavInputSource;

            [FieldOffset(16500)] // size = 4, padding = 0
            public ImGuiNavLayer NavLayer;

            [FieldOffset(16504)] // size = 1, padding = 0
            public CBool NavIdIsAlive;

            [FieldOffset(16505)] // size = 1, padding = 0
            public CBool NavMousePosDirty;

            [FieldOffset(16506)] // size = 1, padding = 0
            public CBool NavDisableHighlight;

            [FieldOffset(16507)] // size = 1, padding = 0
            public CBool NavDisableMouseHover;

            [FieldOffset(16508)] // size = 1, padding = 0
            public CBool NavAnyRequest;

            [FieldOffset(16509)] // size = 1, padding = 0
            public CBool NavInitRequest;

            [FieldOffset(16510)] // size = 1, padding = 1
            public CBool NavInitRequestFromMove;

            [FieldOffset(16512)] // size = 4, padding = 0
            public ImGuiID NavInitResultId;

            [FieldOffset(16516)] // size = 16, padding = 0
            public ImRect NavInitResultRectRel;

            [FieldOffset(16532)] // size = 1, padding = 0
            public CBool NavMoveSubmitted;

            [FieldOffset(16533)] // size = 1, padding = 0
            public CBool NavMoveScoringItems;

            [FieldOffset(16534)] // size = 1, padding = 1
            public CBool NavMoveForwardToNextFrame;

            [FieldOffset(16536)] // size = 4, padding = 0
            public ImGuiNavMoveFlags NavMoveFlags;

            [FieldOffset(16540)] // size = 4, padding = 0
            public ImGuiScrollFlags NavMoveScrollFlags;

            [FieldOffset(16544)] // size = 4, padding = 0
            public ImGuiKeyModFlags NavMoveKeyMods;

            [FieldOffset(16548)] // size = 4, padding = 0
            public ImGuiDir NavMoveDir;

            [FieldOffset(16552)] // size = 4, padding = 0
            public ImGuiDir NavMoveDirForDebug;

            [FieldOffset(16556)] // size = 4, padding = 0
            public ImGuiDir NavMoveClipDir;

            [FieldOffset(16560)] // size = 16, padding = 0
            public ImRect NavScoringRect;

            [FieldOffset(16576)] // size = 16, padding = 0
            public ImRect NavScoringNoClipRect;

            [FieldOffset(16592)] // size = 4, padding = 0
            public int NavScoringDebugCount;

            [FieldOffset(16596)] // size = 4, padding = 0
            public int NavTabbingDir;

            [FieldOffset(16600)] // size = 4, padding = 4
            public int NavTabbingCounter;

            [FieldOffset(16608)] // size = 48, padding = 0
            public ImGuiNavItemData NavMoveResultLocal;

            [FieldOffset(16656)] // size = 48, padding = 0
            public ImGuiNavItemData NavMoveResultLocalVisible;

            [FieldOffset(16704)] // size = 48, padding = 0
            public ImGuiNavItemData NavMoveResultOther;

            [FieldOffset(16752)] // size = 48, padding = 0
            public ImGuiNavItemData NavTabbingResultFirst;

            [FieldOffset(16800)] // size = 8, padding = 0
            public ImGuiWindow* NavWindowingTarget;

            [FieldOffset(16808)] // size = 8, padding = 0
            public ImGuiWindow* NavWindowingTargetAnim;

            [FieldOffset(16816)] // size = 8, padding = 0
            public ImGuiWindow* NavWindowingListWindow;

            [FieldOffset(16824)] // size = 4, padding = 0
            public float NavWindowingTimer;

            [FieldOffset(16828)] // size = 4, padding = 0
            public float NavWindowingHighlightAlpha;

            [FieldOffset(16832)] // size = 1, padding = 3
            public CBool NavWindowingToggleLayer;

            [FieldOffset(16836)] // size = 4, padding = 0
            public float DimBgRatio;

            [FieldOffset(16840)] // size = 4, padding = 0
            public ImGuiMouseCursor MouseCursor;

            [FieldOffset(16844)] // size = 1, padding = 0
            public CBool DragDropActive;

            [FieldOffset(16845)] // size = 1, padding = 0
            public CBool DragDropWithinSource;

            [FieldOffset(16846)] // size = 1, padding = 1
            public CBool DragDropWithinTarget;

            [FieldOffset(16848)] // size = 4, padding = 0
            public ImGuiDragDropFlags DragDropSourceFlags;

            [FieldOffset(16852)] // size = 4, padding = 0
            public int DragDropSourceFrameCount;

            [FieldOffset(16856)] // size = 4, padding = 4
            public int DragDropMouseButton;

            [FieldOffset(16864)] // size = 64, padding = 0
            public ImGuiPayload DragDropPayload;

            [FieldOffset(16928)] // size = 16, padding = 0
            public ImRect DragDropTargetRect;

            [FieldOffset(16944)] // size = 4, padding = 0
            public ImGuiID DragDropTargetId;

            [FieldOffset(16948)] // size = 4, padding = 0
            public ImGuiDragDropFlags DragDropAcceptFlags;

            [FieldOffset(16952)] // size = 4, padding = 0
            public float DragDropAcceptIdCurrRectSurface;

            [FieldOffset(16956)] // size = 4, padding = 0
            public ImGuiID DragDropAcceptIdCurr;

            [FieldOffset(16960)] // size = 4, padding = 0
            public ImGuiID DragDropAcceptIdPrev;

            [FieldOffset(16964)] // size = 4, padding = 0
            public int DragDropAcceptFrameCount;

            [FieldOffset(16968)] // size = 4, padding = 4
            public ImGuiID DragDropHoldJustPressedId;

            [FieldOffset(16976)] // size = 16, padding = 0
            public ImVector_unsigned_char DragDropPayloadBufHeap;

            [FieldOffset(16992)] // size = 16, padding = 0
            public fixed byte _DragDropPayloadBufLocal[16 / 1]; // unsigned char[16]

            public Span<byte> DragDropPayloadBufLocal
            {
                get
                {
                    fixed (ImGuiContext* @this = &this)
                    {
                        var pointer = &@this->_DragDropPayloadBufLocal[0];
                        var span = new Span<byte>(pointer, 16);
                        return span;
                    }
                }
            }

            [FieldOffset(17008)] // size = 4, padding = 4
            public int ClipperTempDataStacked;

            [FieldOffset(17016)] // size = 16, padding = 0
            public ImVector_ImGuiListClipperData ClipperTempData;

            [FieldOffset(17032)] // size = 8, padding = 0
            public ImGuiTable* CurrentTable;

            [FieldOffset(17040)] // size = 4, padding = 4
            public int TablesTempDataStacked;

            [FieldOffset(17048)] // size = 16, padding = 0
            public ImVector_ImGuiTableTempData TablesTempData;

            [FieldOffset(17064)] // size = 40, padding = 0
            public ImPool_ImGuiTable Tables;

            [FieldOffset(17104)] // size = 16, padding = 0
            public ImVector_float TablesLastTimeActive;

            [FieldOffset(17120)] // size = 16, padding = 0
            public ImVector_ImDrawChannel DrawChannelsTempMergeBuffer;

            [FieldOffset(17136)] // size = 8, padding = 0
            public ImGuiTabBar* CurrentTabBar;

            [FieldOffset(17144)] // size = 40, padding = 0
            public ImPool_ImGuiTabBar TabBars;

            [FieldOffset(17184)] // size = 16, padding = 0
            public ImVector_ImGuiPtrOrIndex CurrentTabBarStack;

            [FieldOffset(17200)] // size = 16, padding = 0
            public ImVector_ImGuiShrinkWidthItem ShrinkWidthBuffer;

            [FieldOffset(17216)] // size = 8, padding = 0
            public Vector2 MouseLastValidPos;

            [FieldOffset(17224)] // size = 3720, padding = 0
            public ImGuiInputTextState InputTextState;

            [FieldOffset(20944)] // size = 112, padding = 0
            public ImFont InputTextPasswordFont;

            [FieldOffset(21056)] // size = 4, padding = 0
            public ImGuiID TempInputId;

            [FieldOffset(21060)] // size = 4, padding = 0
            public ImGuiColorEditFlags ColorEditOptions;

            [FieldOffset(21064)] // size = 4, padding = 0
            public float ColorEditLastHue;

            [FieldOffset(21068)] // size = 4, padding = 0
            public float ColorEditLastSat;

            [FieldOffset(21072)] // size = 4, padding = 0
            public uint ColorEditLastColor;

            [FieldOffset(21076)] // size = 16, padding = 0
            public Vector4 ColorPickerRef;

            [FieldOffset(21092)] // size = 48, padding = 0
            public ImGuiComboPreviewData ComboPreviewData;

            [FieldOffset(21140)] // size = 4, padding = 0
            public float SliderCurrentAccum;

            [FieldOffset(21144)] // size = 1, padding = 0
            public CBool SliderCurrentAccumDirty;

            [FieldOffset(21145)] // size = 1, padding = 2
            public CBool DragCurrentAccumDirty;

            [FieldOffset(21148)] // size = 4, padding = 0
            public float DragCurrentAccum;

            [FieldOffset(21152)] // size = 4, padding = 0
            public float DragSpeedDefaultRatio;

            [FieldOffset(21156)] // size = 4, padding = 0
            public float ScrollbarClickDeltaToGrabCenter;

            [FieldOffset(21160)] // size = 4, padding = 0
            public float DisabledAlphaBackup;

            [FieldOffset(21164)] // size = 2, padding = 0
            public short DisabledStackSize;

            [FieldOffset(21166)] // size = 2, padding = 0
            public short TooltipOverrideCount;

            [FieldOffset(21168)] // size = 4, padding = 4
            public float TooltipSlowDelay;

            [FieldOffset(21176)] // size = 16, padding = 0
            public ImVector_char ClipboardHandlerData;

            [FieldOffset(21192)] // size = 16, padding = 0
            public ImVector_ImGuiID MenusIdSubmittedThisFrame;

            [FieldOffset(21208)] // size = 16, padding = 0
            public ImGuiPlatformImeData PlatformImeData;

            [FieldOffset(21224)] // size = 16, padding = 0
            public ImGuiPlatformImeData PlatformImeDataPrev;

            [FieldOffset(21240)] // size = 1, padding = 0
            public CChar PlatformLocaleDecimalPoint;

            [FieldOffset(21241)] // size = 1, padding = 2
            public CBool SettingsLoaded;

            [FieldOffset(21244)] // size = 4, padding = 0
            public float SettingsDirtyTimer;

            [FieldOffset(21248)] // size = 16, padding = 0
            public ImGuiTextBuffer SettingsIniData;

            [FieldOffset(21264)] // size = 16, padding = 0
            public ImVector_ImGuiSettingsHandler SettingsHandlers;

            [FieldOffset(21280)] // size = 16, padding = 0
            public ImChunkStream_ImGuiWindowSettings SettingsWindows;

            [FieldOffset(21296)] // size = 16, padding = 0
            public ImChunkStream_ImGuiTableSettings SettingsTables;

            [FieldOffset(21312)] // size = 16, padding = 0
            public ImVector_ImGuiContextHook Hooks;

            [FieldOffset(21328)] // size = 4, padding = 0
            public ImGuiID HookIdNext;

            [FieldOffset(21332)] // size = 1, padding = 3
            public CBool LogEnabled;

            [FieldOffset(21336)] // size = 4, padding = 4
            public ImGuiLogType LogType;

            [FieldOffset(21344)] // size = 8, padding = 0
            public ImFileHandle LogFile;

            [FieldOffset(21352)] // size = 16, padding = 0
            public ImGuiTextBuffer LogBuffer;

            [FieldOffset(21368)] // size = 8, padding = 0
            public CString LogNextPrefix;

            [FieldOffset(21376)] // size = 8, padding = 0
            public CString LogNextSuffix;

            [FieldOffset(21384)] // size = 4, padding = 0
            public float LogLinePosY;

            [FieldOffset(21388)] // size = 1, padding = 3
            public CBool LogLineFirstItem;

            [FieldOffset(21392)] // size = 4, padding = 0
            public int LogDepthRef;

            [FieldOffset(21396)] // size = 4, padding = 0
            public int LogDepthToExpand;

            [FieldOffset(21400)] // size = 4, padding = 0
            public int LogDepthToExpandDefault;

            [FieldOffset(21404)] // size = 1, padding = 3
            public CBool DebugItemPickerActive;

            [FieldOffset(21408)] // size = 4, padding = 0
            public ImGuiID DebugItemPickerBreakId;

            [FieldOffset(21412)] // size = 16, padding = 4
            public ImGuiMetricsConfig DebugMetricsConfig;

            [FieldOffset(21432)] // size = 32, padding = 0
            public ImGuiStackTool DebugStackTool;

            [FieldOffset(21464)] // size = 480, padding = 0
            public fixed uint _FramerateSecPerFrame[480 / 4]; // float[120]

            public Span<float> FramerateSecPerFrame
            {
                get
                {
                    fixed (ImGuiContext* @this = &this)
                    {
                        var pointer = &@this->_FramerateSecPerFrame[0];
                        var span = new Span<float>(pointer, 120);
                        return span;
                    }
                }
            }

            [FieldOffset(21944)] // size = 4, padding = 0
            public int FramerateSecPerFrameIdx;

            [FieldOffset(21948)] // size = 4, padding = 0
            public int FramerateSecPerFrameCount;

            [FieldOffset(21952)] // size = 4, padding = 0
            public float FramerateSecPerFrameAccum;

            [FieldOffset(21956)] // size = 4, padding = 0
            public int WantCaptureMouseNextFrame;

            [FieldOffset(21960)] // size = 4, padding = 0
            public int WantCaptureKeyboardNextFrame;

            [FieldOffset(21964)] // size = 4, padding = 0
            public int WantTextInputNextFrame;

            [FieldOffset(21968)] // size = 3073, padding = 7
            public fixed byte _TempBuffer[3073 / 1]; // char[3073]

            public string TempBuffer
            {
                get
                {
                    fixed (ImGuiContext* @this = &this)
                    {
                        var pointer = &@this->_TempBuffer[0];
                        var cString = new CString(pointer);
                        return Runtime.CStrings.String(cString);
                    }
                }
            }
        }

        // Struct @ cimgui.h:51:28
        [StructLayout(LayoutKind.Explicit, Size = 1168, Pack = 8)]
        public struct ImFontAtlas
        {
            [FieldOffset(0)] // size = 4, padding = 4
            public ImFontAtlasFlags Flags;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImTextureID TexID;

            [FieldOffset(16)] // size = 4, padding = 0
            public int TexDesiredWidth;

            [FieldOffset(20)] // size = 4, padding = 0
            public int TexGlyphPadding;

            [FieldOffset(24)] // size = 1, padding = 0
            public CBool Locked;

            [FieldOffset(25)] // size = 1, padding = 0
            public CBool TexReady;

            [FieldOffset(26)] // size = 1, padding = 5
            public CBool TexPixelsUseColors;

            [FieldOffset(32)] // size = 8, padding = 0
            public ulong* TexPixelsAlpha8;

            [FieldOffset(40)] // size = 8, padding = 0
            public ulong* TexPixelsRGBA32;

            [FieldOffset(48)] // size = 4, padding = 0
            public int TexWidth;

            [FieldOffset(52)] // size = 4, padding = 0
            public int TexHeight;

            [FieldOffset(56)] // size = 8, padding = 0
            public Vector2 TexUvScale;

            [FieldOffset(64)] // size = 8, padding = 0
            public Vector2 TexUvWhitePixel;

            [FieldOffset(72)] // size = 16, padding = 0
            public ImVector_ImFontPtr Fonts;

            [FieldOffset(88)] // size = 16, padding = 0
            public ImVector_ImFontAtlasCustomRect CustomRects;

            [FieldOffset(104)] // size = 16, padding = 0
            public ImVector_ImFontConfig ConfigData;

            [FieldOffset(120)] // size = 1024, padding = 0
            public fixed uint _TexUvLines[1024 / 4]; // ImVec4[64]

            public Span<Vector4> TexUvLines
            {
                get
                {
                    fixed (ImFontAtlas* @this = &this)
                    {
                        var pointer = &@this->_TexUvLines[0];
                        var span = new Span<Vector4>(pointer, 64);
                        return span;
                    }
                }
            }

            [FieldOffset(1144)] // size = 8, padding = 0
            public ImFontBuilderIO* FontBuilderIO;

            [FieldOffset(1152)] // size = 4, padding = 0
            public uint FontBuilderFlags;

            [FieldOffset(1156)] // size = 4, padding = 0
            public int PackIdMouseCursors;

            [FieldOffset(1160)] // size = 4, padding = 4
            public int PackIdLines;
        }

        // Struct @ cimgui.h:58:24
        [StructLayout(LayoutKind.Explicit, Size = 14160, Pack = 8)]
        public struct ImGuiIO
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiConfigFlags ConfigFlags;

            [FieldOffset(4)] // size = 4, padding = 0
            public ImGuiBackendFlags BackendFlags;

            [FieldOffset(8)] // size = 8, padding = 0
            public Vector2 DisplaySize;

            [FieldOffset(16)] // size = 4, padding = 0
            public float DeltaTime;

            [FieldOffset(20)] // size = 4, padding = 0
            public float IniSavingRate;

            [FieldOffset(24)] // size = 8, padding = 0
            public CString IniFilename;

            [FieldOffset(32)] // size = 8, padding = 0
            public CString LogFilename;

            [FieldOffset(40)] // size = 4, padding = 0
            public float MouseDoubleClickTime;

            [FieldOffset(44)] // size = 4, padding = 0
            public float MouseDoubleClickMaxDist;

            [FieldOffset(48)] // size = 4, padding = 0
            public float MouseDragThreshold;

            [FieldOffset(52)] // size = 4, padding = 0
            public float KeyRepeatDelay;

            [FieldOffset(56)] // size = 4, padding = 4
            public float KeyRepeatRate;

            [FieldOffset(64)] // size = 8, padding = 0
            public void* UserData;

            [FieldOffset(72)] // size = 8, padding = 0
            public ImFontAtlas* Fonts;

            [FieldOffset(80)] // size = 4, padding = 0
            public float FontGlobalScale;

            [FieldOffset(84)] // size = 1, padding = 3
            public CBool FontAllowUserScaling;

            [FieldOffset(88)] // size = 8, padding = 0
            public ImFont* FontDefault;

            [FieldOffset(96)] // size = 8, padding = 0
            public Vector2 DisplayFramebufferScale;

            [FieldOffset(104)] // size = 1, padding = 0
            public CBool MouseDrawCursor;

            [FieldOffset(105)] // size = 1, padding = 0
            public CBool ConfigMacOSXBehaviors;

            [FieldOffset(106)] // size = 1, padding = 0
            public CBool ConfigInputTrickleEventQueue;

            [FieldOffset(107)] // size = 1, padding = 0
            public CBool ConfigInputTextCursorBlink;

            [FieldOffset(108)] // size = 1, padding = 0
            public CBool ConfigDragClickToInputText;

            [FieldOffset(109)] // size = 1, padding = 0
            public CBool ConfigWindowsResizeFromEdges;

            [FieldOffset(110)] // size = 1, padding = 1
            public CBool ConfigWindowsMoveFromTitleBarOnly;

            [FieldOffset(112)] // size = 4, padding = 4
            public float ConfigMemoryCompactTimer;

            [FieldOffset(120)] // size = 8, padding = 0
            public CString BackendPlatformName;

            [FieldOffset(128)] // size = 8, padding = 0
            public CString BackendRendererName;

            [FieldOffset(136)] // size = 8, padding = 0
            public void* BackendPlatformUserData;

            [FieldOffset(144)] // size = 8, padding = 0
            public void* BackendRendererUserData;

            [FieldOffset(152)] // size = 8, padding = 0
            public void* BackendLanguageUserData;

            [FieldOffset(160)] // size = 8, padding = 0
            public FnPtr_VoidPtr_CString GetClipboardTextFn;

            [FieldOffset(168)] // size = 8, padding = 0
            public FnPtr_VoidPtr_CString_Void SetClipboardTextFn;

            [FieldOffset(176)] // size = 8, padding = 0
            public void* ClipboardUserData;

            [FieldOffset(184)] // size = 8, padding = 0
            public FnPtr_ImGuiViewportPtr_ImGuiPlatformImeDataPtr_Void SetPlatformImeDataFn;

            [FieldOffset(192)] // size = 8, padding = 0
            public void* _UnusedPadding;

            [FieldOffset(200)] // size = 1, padding = 0
            public CBool WantCaptureMouse;

            [FieldOffset(201)] // size = 1, padding = 0
            public CBool WantCaptureKeyboard;

            [FieldOffset(202)] // size = 1, padding = 0
            public CBool WantTextInput;

            [FieldOffset(203)] // size = 1, padding = 0
            public CBool WantSetMousePos;

            [FieldOffset(204)] // size = 1, padding = 0
            public CBool WantSaveIniSettings;

            [FieldOffset(205)] // size = 1, padding = 0
            public CBool NavActive;

            [FieldOffset(206)] // size = 1, padding = 1
            public CBool NavVisible;

            [FieldOffset(208)] // size = 4, padding = 0
            public float Framerate;

            [FieldOffset(212)] // size = 4, padding = 0
            public int MetricsRenderVertices;

            [FieldOffset(216)] // size = 4, padding = 0
            public int MetricsRenderIndices;

            [FieldOffset(220)] // size = 4, padding = 0
            public int MetricsRenderWindows;

            [FieldOffset(224)] // size = 4, padding = 0
            public int MetricsActiveWindows;

            [FieldOffset(228)] // size = 4, padding = 0
            public int MetricsActiveAllocations;

            [FieldOffset(232)] // size = 8, padding = 0
            public Vector2 MouseDelta;

            [FieldOffset(240)] // size = 2580, padding = 0
            public fixed uint _KeyMap[2580 / 4]; // int[645]

            public Span<int> KeyMap
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_KeyMap[0];
                        var span = new Span<int>(pointer, 645);
                        return span;
                    }
                }
            }

            [FieldOffset(2820)] // size = 512, padding = 0
            public fixed byte _KeysDown[512 / 1]; // _Bool[512]

            public Span<CBool> KeysDown
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_KeysDown[0];
                        var span = new Span<CBool>(pointer, 512);
                        return span;
                    }
                }
            }

            [FieldOffset(3332)] // size = 8, padding = 0
            public Vector2 MousePos;

            [FieldOffset(3340)] // size = 5, padding = 3
            public fixed byte _MouseDown[5 / 1]; // _Bool[5]

            public Span<CBool> MouseDown
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_MouseDown[0];
                        var span = new Span<CBool>(pointer, 5);
                        return span;
                    }
                }
            }

            [FieldOffset(3348)] // size = 4, padding = 0
            public float MouseWheel;

            [FieldOffset(3352)] // size = 4, padding = 0
            public float MouseWheelH;

            [FieldOffset(3356)] // size = 1, padding = 0
            public CBool KeyCtrl;

            [FieldOffset(3357)] // size = 1, padding = 0
            public CBool KeyShift;

            [FieldOffset(3358)] // size = 1, padding = 0
            public CBool KeyAlt;

            [FieldOffset(3359)] // size = 1, padding = 0
            public CBool KeySuper;

            [FieldOffset(3360)] // size = 80, padding = 0
            public fixed uint _NavInputs[80 / 4]; // float[20]

            public Span<float> NavInputs
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_NavInputs[0];
                        var span = new Span<float>(pointer, 20);
                        return span;
                    }
                }
            }

            [FieldOffset(3440)] // size = 4, padding = 0
            public ImGuiKeyModFlags KeyMods;

            [FieldOffset(3444)] // size = 4, padding = 0
            public ImGuiKeyModFlags KeyModsPrev;

            [FieldOffset(3448)] // size = 10320, padding = 0
            public fixed uint _KeysData[10320 / 4]; // ImGuiKeyData[645]

            public Span<ImGuiKeyData> KeysData
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_KeysData[0];
                        var span = new Span<ImGuiKeyData>(pointer, 645);
                        return span;
                    }
                }
            }

            [FieldOffset(13768)] // size = 1, padding = 3
            public CBool WantCaptureMouseUnlessPopupClose;

            [FieldOffset(13772)] // size = 8, padding = 0
            public Vector2 MousePosPrev;

            [FieldOffset(13780)] // size = 40, padding = 4
            public fixed uint _MouseClickedPos[40 / 4]; // ImVec2[5]

            public Span<Vector2> MouseClickedPos
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_MouseClickedPos[0];
                        var span = new Span<Vector2>(pointer, 5);
                        return span;
                    }
                }
            }

            [FieldOffset(13824)] // size = 40, padding = 0
            public fixed ulong _MouseClickedTime[40 / 8]; // double[5]

            public Span<double> MouseClickedTime
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_MouseClickedTime[0];
                        var span = new Span<double>(pointer, 5);
                        return span;
                    }
                }
            }

            [FieldOffset(13864)] // size = 5, padding = 0
            public fixed byte _MouseClicked[5 / 1]; // _Bool[5]

            public Span<CBool> MouseClicked
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_MouseClicked[0];
                        var span = new Span<CBool>(pointer, 5);
                        return span;
                    }
                }
            }

            [FieldOffset(13869)] // size = 5, padding = 0
            public fixed byte _MouseDoubleClicked[5 / 1]; // _Bool[5]

            public Span<CBool> MouseDoubleClicked
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_MouseDoubleClicked[0];
                        var span = new Span<CBool>(pointer, 5);
                        return span;
                    }
                }
            }

            [FieldOffset(13874)] // size = 10, padding = 0
            public fixed ushort _MouseClickedCount[10 / 2]; // ImU16[5]

            public Span<ushort> MouseClickedCount
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_MouseClickedCount[0];
                        var span = new Span<ushort>(pointer, 5);
                        return span;
                    }
                }
            }

            [FieldOffset(13884)] // size = 10, padding = 0
            public fixed ushort _MouseClickedLastCount[10 / 2]; // ImU16[5]

            public Span<ushort> MouseClickedLastCount
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_MouseClickedLastCount[0];
                        var span = new Span<ushort>(pointer, 5);
                        return span;
                    }
                }
            }

            [FieldOffset(13894)] // size = 5, padding = 0
            public fixed byte _MouseReleased[5 / 1]; // _Bool[5]

            public Span<CBool> MouseReleased
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_MouseReleased[0];
                        var span = new Span<CBool>(pointer, 5);
                        return span;
                    }
                }
            }

            [FieldOffset(13899)] // size = 5, padding = 0
            public fixed byte _MouseDownOwned[5 / 1]; // _Bool[5]

            public Span<CBool> MouseDownOwned
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_MouseDownOwned[0];
                        var span = new Span<CBool>(pointer, 5);
                        return span;
                    }
                }
            }

            [FieldOffset(13904)] // size = 5, padding = 3
            public fixed byte _MouseDownOwnedUnlessPopupClose[5 / 1]; // _Bool[5]

            public Span<CBool> MouseDownOwnedUnlessPopupClose
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_MouseDownOwnedUnlessPopupClose[0];
                        var span = new Span<CBool>(pointer, 5);
                        return span;
                    }
                }
            }

            [FieldOffset(13912)] // size = 20, padding = 0
            public fixed uint _MouseDownDuration[20 / 4]; // float[5]

            public Span<float> MouseDownDuration
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_MouseDownDuration[0];
                        var span = new Span<float>(pointer, 5);
                        return span;
                    }
                }
            }

            [FieldOffset(13932)] // size = 20, padding = 0
            public fixed uint _MouseDownDurationPrev[20 / 4]; // float[5]

            public Span<float> MouseDownDurationPrev
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_MouseDownDurationPrev[0];
                        var span = new Span<float>(pointer, 5);
                        return span;
                    }
                }
            }

            [FieldOffset(13952)] // size = 20, padding = 0
            public fixed uint _MouseDragMaxDistanceSqr[20 / 4]; // float[5]

            public Span<float> MouseDragMaxDistanceSqr
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_MouseDragMaxDistanceSqr[0];
                        var span = new Span<float>(pointer, 5);
                        return span;
                    }
                }
            }

            [FieldOffset(13972)] // size = 80, padding = 0
            public fixed uint _NavInputsDownDuration[80 / 4]; // float[20]

            public Span<float> NavInputsDownDuration
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_NavInputsDownDuration[0];
                        var span = new Span<float>(pointer, 20);
                        return span;
                    }
                }
            }

            [FieldOffset(14052)] // size = 80, padding = 0
            public fixed uint _NavInputsDownDurationPrev[80 / 4]; // float[20]

            public Span<float> NavInputsDownDurationPrev
            {
                get
                {
                    fixed (ImGuiIO* @this = &this)
                    {
                        var pointer = &@this->_NavInputsDownDurationPrev[0];
                        var span = new Span<float>(pointer, 20);
                        return span;
                    }
                }
            }

            [FieldOffset(14132)] // size = 4, padding = 0
            public float PenPressure;

            [FieldOffset(14136)] // size = 1, padding = 0
            public CBool AppFocusLost;

            [FieldOffset(14137)] // size = 1, padding = 0
            public sbyte BackendUsingLegacyKeyArrays;

            [FieldOffset(14138)] // size = 1, padding = 1
            public CBool BackendUsingLegacyNavInputArray;

            [FieldOffset(14140)] // size = 2, padding = 2
            public ushort InputQueueSurrogate;

            [FieldOffset(14144)] // size = 16, padding = 0
            public ImVector_ImWchar InputQueueCharacters;
        }

        // Struct @ cimgui.h:67:27
        [StructLayout(LayoutKind.Explicit, Size = 1048, Pack = 4)]
        public struct ImGuiStyle
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public float Alpha;

            [FieldOffset(4)] // size = 4, padding = 0
            public float DisabledAlpha;

            [FieldOffset(8)] // size = 8, padding = 0
            public Vector2 WindowPadding;

            [FieldOffset(16)] // size = 4, padding = 0
            public float WindowRounding;

            [FieldOffset(20)] // size = 4, padding = 0
            public float WindowBorderSize;

            [FieldOffset(24)] // size = 8, padding = 0
            public Vector2 WindowMinSize;

            [FieldOffset(32)] // size = 8, padding = 0
            public Vector2 WindowTitleAlign;

            [FieldOffset(40)] // size = 4, padding = 0
            public ImGuiDir WindowMenuButtonPosition;

            [FieldOffset(44)] // size = 4, padding = 0
            public float ChildRounding;

            [FieldOffset(48)] // size = 4, padding = 0
            public float ChildBorderSize;

            [FieldOffset(52)] // size = 4, padding = 0
            public float PopupRounding;

            [FieldOffset(56)] // size = 4, padding = 0
            public float PopupBorderSize;

            [FieldOffset(60)] // size = 8, padding = 0
            public Vector2 FramePadding;

            [FieldOffset(68)] // size = 4, padding = 0
            public float FrameRounding;

            [FieldOffset(72)] // size = 4, padding = 0
            public float FrameBorderSize;

            [FieldOffset(76)] // size = 8, padding = 0
            public Vector2 ItemSpacing;

            [FieldOffset(84)] // size = 8, padding = 0
            public Vector2 ItemInnerSpacing;

            [FieldOffset(92)] // size = 8, padding = 0
            public Vector2 CellPadding;

            [FieldOffset(100)] // size = 8, padding = 0
            public Vector2 TouchExtraPadding;

            [FieldOffset(108)] // size = 4, padding = 0
            public float IndentSpacing;

            [FieldOffset(112)] // size = 4, padding = 0
            public float ColumnsMinSpacing;

            [FieldOffset(116)] // size = 4, padding = 0
            public float ScrollbarSize;

            [FieldOffset(120)] // size = 4, padding = 0
            public float ScrollbarRounding;

            [FieldOffset(124)] // size = 4, padding = 0
            public float GrabMinSize;

            [FieldOffset(128)] // size = 4, padding = 0
            public float GrabRounding;

            [FieldOffset(132)] // size = 4, padding = 0
            public float LogSliderDeadzone;

            [FieldOffset(136)] // size = 4, padding = 0
            public float TabRounding;

            [FieldOffset(140)] // size = 4, padding = 0
            public float TabBorderSize;

            [FieldOffset(144)] // size = 4, padding = 0
            public float TabMinWidthForCloseButton;

            [FieldOffset(148)] // size = 4, padding = 0
            public ImGuiDir ColorButtonPosition;

            [FieldOffset(152)] // size = 8, padding = 0
            public Vector2 ButtonTextAlign;

            [FieldOffset(160)] // size = 8, padding = 0
            public Vector2 SelectableTextAlign;

            [FieldOffset(168)] // size = 8, padding = 0
            public Vector2 DisplayWindowPadding;

            [FieldOffset(176)] // size = 8, padding = 0
            public Vector2 DisplaySafeAreaPadding;

            [FieldOffset(184)] // size = 4, padding = 0
            public float MouseCursorScale;

            [FieldOffset(188)] // size = 1, padding = 0
            public CBool AntiAliasedLines;

            [FieldOffset(189)] // size = 1, padding = 0
            public CBool AntiAliasedLinesUseTex;

            [FieldOffset(190)] // size = 1, padding = 1
            public CBool AntiAliasedFill;

            [FieldOffset(192)] // size = 4, padding = 0
            public float CurveTessellationTol;

            [FieldOffset(196)] // size = 4, padding = 0
            public float CircleTessellationMaxError;

            [FieldOffset(200)] // size = 848, padding = 0
            public fixed uint _Colors[848 / 4]; // ImVec4[53]

            public Span<Vector4> Colors
            {
                get
                {
                    fixed (ImGuiStyle* @this = &this)
                    {
                        var pointer = &@this->_Colors[0];
                        var span = new Span<Vector4>(pointer, 53);
                        return span;
                    }
                }
            }
        }

        // Struct @ cimgui.h:45:27
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct ImDrawData
        {
            [FieldOffset(0)] // size = 1, padding = 3
            public CBool Valid;

            [FieldOffset(4)] // size = 4, padding = 0
            public int CmdListsCount;

            [FieldOffset(8)] // size = 4, padding = 0
            public int TotalIdxCount;

            [FieldOffset(12)] // size = 4, padding = 0
            public int TotalVtxCount;

            [FieldOffset(16)] // size = 8, padding = 0
            public ImDrawList** CmdLists;

            [FieldOffset(24)] // size = 8, padding = 0
            public Vector2 DisplayPos;

            [FieldOffset(32)] // size = 8, padding = 0
            public Vector2 DisplaySize;

            [FieldOffset(40)] // size = 8, padding = 0
            public Vector2 FramebufferScale;
        }

        // Struct @ cimgui.h:46:27
        [StructLayout(LayoutKind.Explicit, Size = 200, Pack = 8)]
        public struct ImDrawList
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public ImVector_ImDrawCmd CmdBuffer;

            [FieldOffset(16)] // size = 16, padding = 0
            public ImVector_ImDrawIdx IdxBuffer;

            [FieldOffset(32)] // size = 16, padding = 0
            public ImVector_ImDrawVert VtxBuffer;

            [FieldOffset(48)] // size = 4, padding = 0
            public ImDrawListFlags Flags;

            [FieldOffset(52)] // size = 4, padding = 0
            public uint _VtxCurrentIdx;

            [FieldOffset(56)] // size = 8, padding = 0
            public ImDrawListSharedData* _Data;

            [FieldOffset(64)] // size = 8, padding = 0
            public CString _OwnerName;

            [FieldOffset(72)] // size = 8, padding = 0
            public ImDrawVert* _VtxWritePtr;

            [FieldOffset(80)] // size = 8, padding = 0
            public ImDrawIdx* _IdxWritePtr;

            [FieldOffset(88)] // size = 16, padding = 0
            public ImVector_ImVec4 _ClipRectStack;

            [FieldOffset(104)] // size = 16, padding = 0
            public ImVector_ImTextureID _TextureIdStack;

            [FieldOffset(120)] // size = 16, padding = 0
            public ImVector_ImVec2 _Path;

            [FieldOffset(136)] // size = 32, padding = 0
            public ImDrawCmdHeader _CmdHeader;

            [FieldOffset(168)] // size = 24, padding = 0
            public ImDrawListSplitter _Splitter;

            [FieldOffset(192)] // size = 4, padding = 4
            public float _FringeScale;
        }

        // Struct @ cimgui.h:50:23
        [StructLayout(LayoutKind.Explicit, Size = 112, Pack = 8)]
        public struct ImFont
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public ImVector_float IndexAdvanceX;

            [FieldOffset(16)] // size = 4, padding = 0
            public float FallbackAdvanceX;

            [FieldOffset(20)] // size = 4, padding = 0
            public float FontSize;

            [FieldOffset(24)] // size = 16, padding = 0
            public ImVector_ImWchar IndexLookup;

            [FieldOffset(40)] // size = 16, padding = 0
            public ImVector_ImFontGlyph Glyphs;

            [FieldOffset(56)] // size = 8, padding = 0
            public ImFontGlyph* FallbackGlyph;

            [FieldOffset(64)] // size = 8, padding = 0
            public ImFontAtlas* ContainerAtlas;

            [FieldOffset(72)] // size = 8, padding = 0
            public ImFontConfig* ConfigData;

            [FieldOffset(80)] // size = 2, padding = 0
            public short ConfigDataCount;

            [FieldOffset(82)] // size = 2, padding = 0
            public byte FallbackChar;

            [FieldOffset(84)] // size = 2, padding = 0
            public byte EllipsisChar;

            [FieldOffset(86)] // size = 2, padding = 0
            public byte DotChar;

            [FieldOffset(88)] // size = 1, padding = 3
            public CBool DirtyLookupTables;

            [FieldOffset(92)] // size = 4, padding = 0
            public float Scale;

            [FieldOffset(96)] // size = 4, padding = 0
            public float Ascent;

            [FieldOffset(100)] // size = 4, padding = 0
            public float Descent;

            [FieldOffset(104)] // size = 4, padding = 0
            public int MetricsTotalSurface;

            [FieldOffset(108)] // size = 2, padding = 2
            public fixed byte _Used4kPagesMap[2 / 1]; // ImU8[2]

            public Span<byte> Used4kPagesMap
            {
                get
                {
                    fixed (ImFont* @this = &this)
                    {
                        var pointer = &@this->_Used4kPagesMap[0];
                        var span = new Span<byte>(pointer, 2);
                        return span;
                    }
                }
            }
        }

        // Struct @ cimgui.h:68:36
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImGuiTableSortSpecs
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ImGuiTableColumnSortSpecs* Specs;

            [FieldOffset(8)] // size = 4, padding = 0
            public int SpecsCount;

            [FieldOffset(12)] // size = 1, padding = 3
            public CBool SpecsDirty;
        }

        // Struct @ cimgui.h:63:29
        [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
        public struct ImGuiPayload
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public void* Data;

            [FieldOffset(8)] // size = 4, padding = 0
            public int DataSize;

            [FieldOffset(12)] // size = 4, padding = 0
            public ImGuiID SourceId;

            [FieldOffset(16)] // size = 4, padding = 0
            public ImGuiID SourceParentId;

            [FieldOffset(20)] // size = 4, padding = 0
            public int DataFrameCount;

            [FieldOffset(24)] // size = 33, padding = 0
            public fixed byte _DataType[33 / 1]; // char[33]

            public string DataType
            {
                get
                {
                    fixed (ImGuiPayload* @this = &this)
                    {
                        var pointer = &@this->_DataType[0];
                        var cString = new CString(pointer);
                        return Runtime.CStrings.String(cString);
                    }
                }
            }

            [FieldOffset(57)] // size = 1, padding = 0
            public CBool Preview;

            [FieldOffset(58)] // size = 1, padding = 5
            public CBool Delivery;
        }

        // Struct @ cimgui.h:72:30
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct ImGuiViewport
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiViewportFlags Flags;

            [FieldOffset(4)] // size = 8, padding = 0
            public Vector2 Pos;

            [FieldOffset(12)] // size = 8, padding = 0
            public Vector2 Size;

            [FieldOffset(20)] // size = 8, padding = 0
            public Vector2 WorkPos;

            [FieldOffset(28)] // size = 8, padding = 4
            public Vector2 WorkSize;

            [FieldOffset(40)] // size = 8, padding = 0
            public void* PlatformHandleRaw;
        }

        // Struct @ cimgui.h:47:37
        [StructLayout(LayoutKind.Explicit, Size = 512, Pack = 8)]
        public struct ImDrawListSharedData
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public Vector2 TexUvWhitePixel;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImFont* Font;

            [FieldOffset(16)] // size = 4, padding = 0
            public float FontSize;

            [FieldOffset(20)] // size = 4, padding = 0
            public float CurveTessellationTol;

            [FieldOffset(24)] // size = 4, padding = 0
            public float CircleSegmentMaxError;

            [FieldOffset(28)] // size = 16, padding = 0
            public Vector4 ClipRectFullscreen;

            [FieldOffset(44)] // size = 4, padding = 0
            public ImDrawListFlags InitialFlags;

            [FieldOffset(48)] // size = 384, padding = 0
            public fixed uint _ArcFastVtx[384 / 4]; // ImVec2[48]

            public Span<Vector2> ArcFastVtx
            {
                get
                {
                    fixed (ImDrawListSharedData* @this = &this)
                    {
                        var pointer = &@this->_ArcFastVtx[0];
                        var span = new Span<Vector2>(pointer, 48);
                        return span;
                    }
                }
            }

            [FieldOffset(432)] // size = 4, padding = 0
            public float ArcFastRadiusCutoff;

            [FieldOffset(436)] // size = 64, padding = 4
            public fixed byte _CircleSegmentCounts[64 / 1]; // ImU8[64]

            public Span<byte> CircleSegmentCounts
            {
                get
                {
                    fixed (ImDrawListSharedData* @this = &this)
                    {
                        var pointer = &@this->_CircleSegmentCounts[0];
                        var span = new Span<byte>(pointer, 64);
                        return span;
                    }
                }
            }

            [FieldOffset(504)] // size = 8, padding = 0
            public Vector4* TexUvLines;
        }

        // Struct @ cimgui.h:66:29
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImGuiStorage
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public ImVector_ImGuiStoragePair Data;
        }

        // Struct @ cimgui.h:59:43
        [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
        public struct ImGuiInputTextCallbackData
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiInputTextFlags EventFlag;

            [FieldOffset(4)] // size = 4, padding = 0
            public ImGuiInputTextFlags Flags;

            [FieldOffset(8)] // size = 8, padding = 0
            public void* UserData;

            [FieldOffset(16)] // size = 2, padding = 2
            public byte EventChar;

            [FieldOffset(20)] // size = 4, padding = 0
            public ImGuiKey EventKey;

            [FieldOffset(24)] // size = 8, padding = 0
            public CString Buf;

            [FieldOffset(32)] // size = 4, padding = 0
            public int BufTextLen;

            [FieldOffset(36)] // size = 4, padding = 0
            public int BufSize;

            [FieldOffset(40)] // size = 1, padding = 3
            public CBool BufDirty;

            [FieldOffset(44)] // size = 4, padding = 0
            public int CursorPos;

            [FieldOffset(48)] // size = 4, padding = 0
            public int SelectionStart;

            [FieldOffset(52)] // size = 4, padding = 0
            public int SelectionEnd;
        }

        // Struct @ cimgui.h:69:42
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct ImGuiTableColumnSortSpecs
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiID ColumnUserID;

            [FieldOffset(4)] // size = 2, padding = 0
            public short ColumnIndex;

            [FieldOffset(6)] // size = 2, padding = 0
            public short SortOrder;

            [FieldOffset(8)] // size = 4, padding = 0
            public ImGuiSortDirection SortDirection;
        }

        // Struct @ cimgui.h:62:36
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiOnceUponAFrame
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int RefFrame;
        }

        // Struct @ cimgui.h:71:32
        [StructLayout(LayoutKind.Explicit, Size = 280, Pack = 8)]
        public struct ImGuiTextFilter
        {
            [FieldOffset(0)] // size = 256, padding = 0
            public fixed byte _InputBuf[256 / 1]; // char[256]

            public string InputBuf
            {
                get
                {
                    fixed (ImGuiTextFilter* @this = &this)
                    {
                        var pointer = &@this->_InputBuf[0];
                        var cString = new CString(pointer);
                        return Runtime.CStrings.String(cString);
                    }
                }
            }

            [FieldOffset(256)] // size = 16, padding = 0
            public ImVector_ImGuiTextRange Filters;

            [FieldOffset(272)] // size = 4, padding = 4
            public int CountGrep;
        }

        // Struct @ cimgui.h:960:31
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImGuiTextRange
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public CString b;

            [FieldOffset(8)] // size = 8, padding = 0
            public CString e;
        }

        // Struct @ cimgui.h:952:86
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiTextRange
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiTextRange* Data;
        }

        // Struct @ cimgui.h:70:32
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImGuiTextBuffer
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public ImVector_char Buf;
        }

        // Struct @ cimgui.h:980:33
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImGuiStoragePair
        {
            [FieldOffset(0)] // size = 4, padding = 12
            public ImGuiID key;
        }

        // Struct @ cimgui.h:61:33
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ImGuiListClipper
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int DisplayStart;

            [FieldOffset(4)] // size = 4, padding = 0
            public int DisplayEnd;

            [FieldOffset(8)] // size = 4, padding = 0
            public int ItemsCount;

            [FieldOffset(12)] // size = 4, padding = 0
            public float ItemsHeight;

            [FieldOffset(16)] // size = 4, padding = 4
            public float StartPosY;

            [FieldOffset(24)] // size = 8, padding = 0
            public void* TempData;
        }

        // Struct @ cimgui.h:56:24
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct ImColor
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public Vector4 Value;
        }

        // Struct @ cimgui.h:44:26
        [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
        public struct ImDrawCmd
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public Vector4 ClipRect;

            [FieldOffset(16)] // size = 8, padding = 0
            public ImTextureID TextureId;

            [FieldOffset(24)] // size = 4, padding = 0
            public uint VtxOffset;

            [FieldOffset(28)] // size = 4, padding = 0
            public uint IdxOffset;

            [FieldOffset(32)] // size = 4, padding = 4
            public uint ElemCount;

            [FieldOffset(40)] // size = 8, padding = 0
            public ImDrawCallback UserCallback;

            [FieldOffset(48)] // size = 8, padding = 0
            public void* UserCallbackData;
        }

        // Struct @ cimgui.h:48:35
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ImDrawListSplitter
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int _Current;

            [FieldOffset(4)] // size = 4, padding = 0
            public int _Count;

            [FieldOffset(8)] // size = 16, padding = 0
            public ImVector_ImDrawChannel _Channels;
        }

        // Struct @ cimgui.h:53:29
        [StructLayout(LayoutKind.Explicit, Size = 136, Pack = 8)]
        public struct ImFontConfig
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public void* FontData;

            [FieldOffset(8)] // size = 4, padding = 0
            public int FontDataSize;

            [FieldOffset(12)] // size = 1, padding = 3
            public CBool FontDataOwnedByAtlas;

            [FieldOffset(16)] // size = 4, padding = 0
            public int FontNo;

            [FieldOffset(20)] // size = 4, padding = 0
            public float SizePixels;

            [FieldOffset(24)] // size = 4, padding = 0
            public int OversampleH;

            [FieldOffset(28)] // size = 4, padding = 0
            public int OversampleV;

            [FieldOffset(32)] // size = 1, padding = 3
            public CBool PixelSnapH;

            [FieldOffset(36)] // size = 8, padding = 0
            public Vector2 GlyphExtraSpacing;

            [FieldOffset(44)] // size = 8, padding = 4
            public Vector2 GlyphOffset;

            [FieldOffset(56)] // size = 8, padding = 0
            public byte* GlyphRanges;

            [FieldOffset(64)] // size = 4, padding = 0
            public float GlyphMinAdvanceX;

            [FieldOffset(68)] // size = 4, padding = 0
            public float GlyphMaxAdvanceX;

            [FieldOffset(72)] // size = 1, padding = 3
            public CBool MergeMode;

            [FieldOffset(76)] // size = 4, padding = 0
            public uint FontBuilderFlags;

            [FieldOffset(80)] // size = 4, padding = 0
            public float RasterizerMultiply;

            [FieldOffset(84)] // size = 2, padding = 0
            public byte EllipsisChar;

            [FieldOffset(86)] // size = 40, padding = 2
            public fixed byte _Name[40 / 1]; // char[40]

            public string Name
            {
                get
                {
                    fixed (ImFontConfig* @this = &this)
                    {
                        var pointer = &@this->_Name[0];
                        var cString = new CString(pointer);
                        return Runtime.CStrings.String(cString);
                    }
                }
            }

            [FieldOffset(128)] // size = 8, padding = 0
            public ImFont* DstFont;
        }

        // Struct @ cimgui.h:55:41
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImFontGlyphRangesBuilder
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public ImVector_ImU32 UsedChars;
        }

        // Struct @ cimgui.h:804:72
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImWchar
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public byte* Data;
        }

        // Struct @ cimgui.h:1132:38
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ImFontAtlasCustomRect
        {
            [FieldOffset(0)] // size = 2, padding = 0
            public ushort Width;

            [FieldOffset(2)] // size = 2, padding = 0
            public ushort Height;

            [FieldOffset(4)] // size = 2, padding = 0
            public ushort X;

            [FieldOffset(6)] // size = 2, padding = 0
            public ushort Y;

            [FieldOffset(8)] // size = 4, padding = 0
            public uint GlyphID;

            [FieldOffset(12)] // size = 4, padding = 0
            public float GlyphAdvanceX;

            [FieldOffset(16)] // size = 8, padding = 0
            public Vector2 GlyphOffset;

            [FieldOffset(24)] // size = 8, padding = 0
            public ImFont* Font;
        }

        // Struct @ cimgui.h:54:28
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 4)]
        public struct ImFontGlyph
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public uint Colored;

            [FieldOffset(0)] // size = 4, padding = 0
            public uint Visible;

            [FieldOffset(0)] // size = 4, padding = 0
            public uint Codepoint;

            [FieldOffset(4)] // size = 4, padding = 0
            public float AdvanceX;

            [FieldOffset(8)] // size = 4, padding = 0
            public float X0;

            [FieldOffset(12)] // size = 4, padding = 0
            public float Y0;

            [FieldOffset(16)] // size = 4, padding = 0
            public float X1;

            [FieldOffset(20)] // size = 4, padding = 0
            public float Y1;

            [FieldOffset(24)] // size = 4, padding = 0
            public float U0;

            [FieldOffset(28)] // size = 4, padding = 0
            public float V0;

            [FieldOffset(32)] // size = 4, padding = 0
            public float U1;

            [FieldOffset(36)] // size = 4, padding = 0
            public float V1;
        }

        // Struct @ cimgui.h:64:37
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct ImGuiPlatformImeData
        {
            [FieldOffset(0)] // size = 1, padding = 3
            public CBool WantVisible;

            [FieldOffset(4)] // size = 8, padding = 0
            public Vector2 InputPos;

            [FieldOffset(12)] // size = 4, padding = 0
            public float InputLineHeight;
        }

        // Struct @ cimgui.h:1317:25
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 2)]
        public struct ImVec2ih
        {
            [FieldOffset(0)] // size = 2, padding = 0
            public short x;

            [FieldOffset(2)] // size = 2, padding = 0
            public short y;
        }

        // Struct @ cimgui.h:74:23
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct ImRect
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public Vector2 Min;

            [FieldOffset(8)] // size = 8, padding = 0
            public Vector2 Max;
        }

        // Struct @ cimgui.h:73:28
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImBitVector
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public ImVector_ImU32 Storage;
        }

        // Struct @ cimgui.h:75:34
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ImDrawDataBuilder
        {
            [FieldOffset(0)] // size = 32, padding = 0
            public fixed ulong _Layers[32 / 8]; // ImVector_ImDrawListPtr[2]

            public Span<ImVector_ImDrawListPtr> Layers
            {
                get
                {
                    fixed (ImDrawDataBuilder* @this = &this)
                    {
                        var pointer = &@this->_Layers[0];
                        var span = new Span<ImVector_ImDrawListPtr>(pointer, 2);
                        return span;
                    }
                }
            }
        }

        // Struct @ cimgui.h:92:30
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct ImGuiStyleMod
        {
            [FieldOffset(0)] // size = 4, padding = 8
            public ImGuiStyleVar VarIdx;
        }

        // Struct @ cimgui.h:1486:38
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 4)]
        public struct ImGuiComboPreviewData
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public ImRect PreviewRect;

            [FieldOffset(16)] // size = 8, padding = 0
            public Vector2 BackupCursorPos;

            [FieldOffset(24)] // size = 8, padding = 0
            public Vector2 BackupCursorMaxPos;

            [FieldOffset(32)] // size = 8, padding = 0
            public Vector2 BackupCursorPosPrevLine;

            [FieldOffset(40)] // size = 4, padding = 0
            public float BackupPrevLineTextBaseOffset;

            [FieldOffset(44)] // size = 4, padding = 0
            public ImGuiLayoutType BackupLayout;
        }

        // Struct @ cimgui.h:82:33
        [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
        public struct ImGuiMenuColumns
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public uint TotalWidth;

            [FieldOffset(4)] // size = 4, padding = 0
            public uint NextTotalWidth;

            [FieldOffset(8)] // size = 2, padding = 0
            public ushort Spacing;

            [FieldOffset(10)] // size = 2, padding = 0
            public ushort OffsetIcon;

            [FieldOffset(12)] // size = 2, padding = 0
            public ushort OffsetLabel;

            [FieldOffset(14)] // size = 2, padding = 0
            public ushort OffsetShortcut;

            [FieldOffset(16)] // size = 2, padding = 0
            public ushort OffsetMark;

            [FieldOffset(18)] // size = 8, padding = 2
            public fixed ushort _Widths[8 / 2]; // ImU16[4]

            public Span<ushort> Widths
            {
                get
                {
                    fixed (ImGuiMenuColumns* @this = &this)
                    {
                        var pointer = &@this->_Widths[0];
                        var span = new Span<ushort>(pointer, 4);
                        return span;
                    }
                }
            }
        }

        // Struct @ cimgui.h:80:36
        [StructLayout(LayoutKind.Explicit, Size = 3720, Pack = 8)]
        public struct ImGuiInputTextState
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiID ID;

            [FieldOffset(4)] // size = 4, padding = 0
            public int CurLenW;

            [FieldOffset(8)] // size = 4, padding = 4
            public int CurLenA;

            [FieldOffset(16)] // size = 16, padding = 0
            public ImVector_ImWchar TextW;

            [FieldOffset(32)] // size = 16, padding = 0
            public ImVector_char TextA;

            [FieldOffset(48)] // size = 16, padding = 0
            public ImVector_char InitialTextA;

            [FieldOffset(64)] // size = 1, padding = 3
            public CBool TextAIsValid;

            [FieldOffset(68)] // size = 4, padding = 0
            public int BufCapacityA;

            [FieldOffset(72)] // size = 4, padding = 0
            public float ScrollX;

            [FieldOffset(76)] // size = 3628, padding = 0
            public STB_TexteditState Stb;

            [FieldOffset(3704)] // size = 4, padding = 0
            public float CursorAnim;

            [FieldOffset(3708)] // size = 1, padding = 0
            public CBool CursorFollow;

            [FieldOffset(3709)] // size = 1, padding = 0
            public CBool SelectedAllMouseLock;

            [FieldOffset(3710)] // size = 1, padding = 1
            public CBool Edited;

            [FieldOffset(3712)] // size = 4, padding = 4
            public ImGuiInputTextFlags Flags;
        }

        // Struct @ cimgui.h:89:31
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct ImGuiPopupData
        {
            [FieldOffset(0)] // size = 4, padding = 4
            public ImGuiID PopupId;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiWindow* Window;

            [FieldOffset(16)] // size = 8, padding = 0
            public ImGuiWindow* SourceWindow;

            [FieldOffset(24)] // size = 4, padding = 0
            public int OpenFrameCount;

            [FieldOffset(28)] // size = 4, padding = 0
            public ImGuiID OpenParentId;

            [FieldOffset(32)] // size = 8, padding = 0
            public Vector2 OpenPopupPos;

            [FieldOffset(40)] // size = 8, padding = 0
            public Vector2 OpenMousePos;
        }

        // Struct @ cimgui.h:85:36
        [StructLayout(LayoutKind.Explicit, Size = 112, Pack = 8)]
        public struct ImGuiNextWindowData
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiNextWindowDataFlags Flags;

            [FieldOffset(4)] // size = 4, padding = 0
            public ImGuiCond PosCond;

            [FieldOffset(8)] // size = 4, padding = 0
            public ImGuiCond SizeCond;

            [FieldOffset(12)] // size = 4, padding = 0
            public ImGuiCond CollapsedCond;

            [FieldOffset(16)] // size = 8, padding = 0
            public Vector2 PosVal;

            [FieldOffset(24)] // size = 8, padding = 0
            public Vector2 PosPivotVal;

            [FieldOffset(32)] // size = 8, padding = 0
            public Vector2 SizeVal;

            [FieldOffset(40)] // size = 8, padding = 0
            public Vector2 ContentSizeVal;

            [FieldOffset(48)] // size = 8, padding = 0
            public Vector2 ScrollVal;

            [FieldOffset(56)] // size = 1, padding = 3
            public CBool CollapsedVal;

            [FieldOffset(60)] // size = 16, padding = 4
            public ImRect SizeConstraintRect;

            [FieldOffset(80)] // size = 8, padding = 0
            public ImGuiSizeCallback SizeCallback;

            [FieldOffset(88)] // size = 8, padding = 0
            public void* SizeCallbackUserData;

            [FieldOffset(96)] // size = 4, padding = 0
            public float BgAlphaVal;

            [FieldOffset(100)] // size = 8, padding = 4
            public Vector2 MenuBarOffsetMinVal;
        }

        // Struct @ cimgui.h:86:34
        [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
        public struct ImGuiNextItemData
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiNextItemDataFlags Flags;

            [FieldOffset(4)] // size = 4, padding = 0
            public float Width;

            [FieldOffset(8)] // size = 4, padding = 0
            public ImGuiID FocusScopeId;

            [FieldOffset(12)] // size = 4, padding = 0
            public ImGuiCond OpenCond;

            [FieldOffset(16)] // size = 1, padding = 3
            public CBool OpenVal;
        }

        // Struct @ cimgui.h:81:34
        [StructLayout(LayoutKind.Explicit, Size = 60, Pack = 4)]
        public struct ImGuiLastItemData
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiID ID;

            [FieldOffset(4)] // size = 4, padding = 0
            public ImGuiItemFlags InFlags;

            [FieldOffset(8)] // size = 4, padding = 0
            public ImGuiItemStatusFlags StatusFlags;

            [FieldOffset(12)] // size = 16, padding = 0
            public ImRect Rect;

            [FieldOffset(28)] // size = 16, padding = 0
            public ImRect NavRect;

            [FieldOffset(44)] // size = 16, padding = 0
            public ImRect DisplayRect;
        }

        // Struct @ cimgui.h:91:32
        [StructLayout(LayoutKind.Explicit, Size = 18, Pack = 2)]
        public struct ImGuiStackSizes
        {
            [FieldOffset(0)] // size = 2, padding = 0
            public short SizeOfIDStack;

            [FieldOffset(2)] // size = 2, padding = 0
            public short SizeOfColorStack;

            [FieldOffset(4)] // size = 2, padding = 0
            public short SizeOfStyleVarStack;

            [FieldOffset(6)] // size = 2, padding = 0
            public short SizeOfFontStack;

            [FieldOffset(8)] // size = 2, padding = 0
            public short SizeOfFocusScopeStack;

            [FieldOffset(10)] // size = 2, padding = 0
            public short SizeOfGroupStack;

            [FieldOffset(12)] // size = 2, padding = 0
            public short SizeOfItemFlagsStack;

            [FieldOffset(14)] // size = 2, padding = 0
            public short SizeOfBeginPopupStack;

            [FieldOffset(16)] // size = 2, padding = 0
            public short SizeOfDisabledStack;
        }

        // Struct @ cimgui.h:1624:32
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImGuiPtrOrIndex
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public void* Ptr;

            [FieldOffset(8)] // size = 4, padding = 4
            public int Index;
        }

        // Struct @ cimgui.h:1682:32
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
        public struct ImGuiInputEvent
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiInputEventType Type;

            [FieldOffset(4)] // size = 4, padding = 12
            public ImGuiInputSource Source;

            [FieldOffset(20)] // size = 1, padding = 3
            public CBool AddedByTestEngine;
        }

        // Struct @ cimgui.h:1706:38
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct ImGuiListClipperRange
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Min;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Max;

            [FieldOffset(8)] // size = 1, padding = 0
            public CBool PosToIndexConvert;

            [FieldOffset(9)] // size = 1, padding = 0
            public sbyte PosToIndexOffsetMin;

            [FieldOffset(10)] // size = 1, padding = 1
            public sbyte PosToIndexOffsetMax;
        }

        // Struct @ cimgui.h:1715:37
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
        public struct ImGuiListClipperData
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ImGuiListClipper* ListClipper;

            [FieldOffset(8)] // size = 4, padding = 0
            public float LossynessOffset;

            [FieldOffset(12)] // size = 4, padding = 0
            public int StepNo;

            [FieldOffset(16)] // size = 4, padding = 4
            public int ItemsFrozen;

            [FieldOffset(24)] // size = 16, padding = 0
            public ImVector_ImGuiListClipperRange Ranges;
        }

        // Struct @ cimgui.h:83:33
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct ImGuiNavItemData
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ImGuiWindow* Window;

            [FieldOffset(8)] // size = 4, padding = 0
            public ImGuiID ID;

            [FieldOffset(12)] // size = 4, padding = 0
            public ImGuiID FocusScopeId;

            [FieldOffset(16)] // size = 16, padding = 0
            public ImRect RectRel;

            [FieldOffset(32)] // size = 4, padding = 0
            public ImGuiItemFlags InFlags;

            [FieldOffset(36)] // size = 4, padding = 0
            public float DistBox;

            [FieldOffset(40)] // size = 4, padding = 0
            public float DistCenter;

            [FieldOffset(44)] // size = 4, padding = 0
            public float DistAxial;
        }

        // Struct @ cimgui.h:87:35
        [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
        public struct ImGuiOldColumnData
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public float OffsetNorm;

            [FieldOffset(4)] // size = 4, padding = 0
            public float OffsetNormBeforeResize;

            [FieldOffset(8)] // size = 4, padding = 0
            public ImGuiOldColumnFlags Flags;

            [FieldOffset(12)] // size = 16, padding = 0
            public ImRect ClipRect;
        }

        // Struct @ cimgui.h:88:32
        [StructLayout(LayoutKind.Explicit, Size = 136, Pack = 8)]
        public struct ImGuiOldColumns
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiID ID;

            [FieldOffset(4)] // size = 4, padding = 0
            public ImGuiOldColumnFlags Flags;

            [FieldOffset(8)] // size = 1, padding = 0
            public CBool IsFirstFrame;

            [FieldOffset(9)] // size = 1, padding = 2
            public CBool IsBeingResized;

            [FieldOffset(12)] // size = 4, padding = 0
            public int Current;

            [FieldOffset(16)] // size = 4, padding = 0
            public int Count;

            [FieldOffset(20)] // size = 4, padding = 0
            public float OffMinX;

            [FieldOffset(24)] // size = 4, padding = 0
            public float OffMaxX;

            [FieldOffset(28)] // size = 4, padding = 0
            public float LineMinY;

            [FieldOffset(32)] // size = 4, padding = 0
            public float LineMaxY;

            [FieldOffset(36)] // size = 4, padding = 0
            public float HostCursorPosY;

            [FieldOffset(40)] // size = 4, padding = 0
            public float HostCursorMaxPosX;

            [FieldOffset(44)] // size = 16, padding = 0
            public ImRect HostInitialClipRect;

            [FieldOffset(60)] // size = 16, padding = 0
            public ImRect HostBackupClipRect;

            [FieldOffset(76)] // size = 16, padding = 4
            public ImRect HostBackupParentWorkRect;

            [FieldOffset(96)] // size = 16, padding = 0
            public ImVector_ImGuiOldColumnData Columns;

            [FieldOffset(112)] // size = 24, padding = 0
            public ImDrawListSplitter Splitter;
        }

        // Struct @ cimgui.h:1825:31
        [StructLayout(LayoutKind.Explicit, Size = 184, Pack = 8)]
        public struct ImGuiViewportP
        {
            [FieldOffset(0)] // size = 48, padding = 0
            public ImGuiViewport _ImGuiViewport;

            [FieldOffset(48)] // size = 8, padding = 0
            public fixed uint _DrawListsLastFrame[8 / 4]; // int[2]

            public Span<int> DrawListsLastFrame
            {
                get
                {
                    fixed (ImGuiViewportP* @this = &this)
                    {
                        var pointer = &@this->_DrawListsLastFrame[0];
                        var span = new Span<int>(pointer, 2);
                        return span;
                    }
                }
            }

            [FieldOffset(56)] // size = 16, padding = 0
            public fixed ulong _DrawLists[16 / 8]; // ImDrawList*[2]

            public Span<nint> DrawLists
            {
                get
                {
                    fixed (ImGuiViewportP* @this = &this)
                    {
                        var pointer = &@this->_DrawLists[0];
                        var span = new Span<nint>(pointer, 2);
                        return span;
                    }
                }
            }

            [FieldOffset(72)] // size = 48, padding = 0
            public ImDrawData DrawDataP;

            [FieldOffset(120)] // size = 32, padding = 0
            public ImDrawDataBuilder DrawDataBuilder;

            [FieldOffset(152)] // size = 8, padding = 0
            public Vector2 WorkOffsetMin;

            [FieldOffset(160)] // size = 8, padding = 0
            public Vector2 WorkOffsetMax;

            [FieldOffset(168)] // size = 8, padding = 0
            public Vector2 BuildWorkOffsetMin;

            [FieldOffset(176)] // size = 8, padding = 0
            public Vector2 BuildWorkOffsetMax;
        }

        // Struct @ cimgui.h:102:36
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct ImGuiWindowSettings
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiID ID;

            [FieldOffset(4)] // size = 4, padding = 0
            public ImVec2ih Pos;

            [FieldOffset(8)] // size = 4, padding = 0
            public ImVec2ih Size;

            [FieldOffset(12)] // size = 1, padding = 0
            public CBool Collapsed;

            [FieldOffset(13)] // size = 1, padding = 2
            public CBool WantApply;
        }

        // Struct @ cimgui.h:90:37
        [StructLayout(LayoutKind.Explicit, Size = 72, Pack = 8)]
        public struct ImGuiSettingsHandler
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public CString TypeName;

            [FieldOffset(8)] // size = 4, padding = 4
            public ImGuiID TypeHash;

            [FieldOffset(16)] // size = 8, padding = 0
            public FnPtr_ImGuiContextPtr_ImGuiSettingsHandlerPtr_Void ClearAllFn;

            [FieldOffset(24)] // size = 8, padding = 0
            public FnPtr_ImGuiContextPtr_ImGuiSettingsHandlerPtr_Void ReadInitFn;

            [FieldOffset(32)] // size = 8, padding = 0
            public FnPtr_ImGuiContextPtr_ImGuiSettingsHandlerPtr_CString_VoidPtr ReadOpenFn;

            [FieldOffset(40)] // size = 8, padding = 0
            public FnPtr_ImGuiContextPtr_ImGuiSettingsHandlerPtr_VoidPtr_CString_Void ReadLineFn;

            [FieldOffset(48)] // size = 8, padding = 0
            public FnPtr_ImGuiContextPtr_ImGuiSettingsHandlerPtr_Void ApplyAllFn;

            [FieldOffset(56)] // size = 8, padding = 0
            public FnPtr_ImGuiContextPtr_ImGuiSettingsHandlerPtr_ImGuiTextBufferPtr_Void WriteAllFn;

            [FieldOffset(64)] // size = 8, padding = 0
            public void* UserData;
        }

        // Struct @ cimgui.h:84:35
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct ImGuiMetricsConfig
        {
            [FieldOffset(0)] // size = 1, padding = 0
            public CBool ShowStackTool;

            [FieldOffset(1)] // size = 1, padding = 0
            public CBool ShowWindowsRects;

            [FieldOffset(2)] // size = 1, padding = 0
            public CBool ShowWindowsBeginOrder;

            [FieldOffset(3)] // size = 1, padding = 0
            public CBool ShowTablesRects;

            [FieldOffset(4)] // size = 1, padding = 0
            public CBool ShowDrawCmdMesh;

            [FieldOffset(5)] // size = 1, padding = 2
            public CBool ShowDrawCmdBoundingBoxes;

            [FieldOffset(8)] // size = 4, padding = 0
            public int ShowWindowsRectsType;

            [FieldOffset(12)] // size = 4, padding = 0
            public int ShowTablesRectsType;
        }

        // Struct @ cimgui.h:1869:36
        [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 4)]
        public struct ImGuiStackLevelInfo
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiID ID;

            [FieldOffset(4)] // size = 1, padding = 0
            public sbyte QueryFrameCount;

            [FieldOffset(5)] // size = 1, padding = 0
            public CBool QuerySuccess;

            [FieldOffset(6)] // size = 58, padding = 0
            public fixed byte _Desc[58 / 1]; // char[58]

            public string Desc
            {
                get
                {
                    fixed (ImGuiStackLevelInfo* @this = &this)
                    {
                        var pointer = &@this->_Desc[0];
                        var cString = new CString(pointer);
                        return Runtime.CStrings.String(cString);
                    }
                }
            }
        }

        // Struct @ cimgui.h:1877:31
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ImGuiStackTool
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int LastActiveFrame;

            [FieldOffset(4)] // size = 4, padding = 0
            public int StackLevel;

            [FieldOffset(8)] // size = 4, padding = 4
            public ImGuiID QueryId;

            [FieldOffset(16)] // size = 16, padding = 0
            public ImVector_ImGuiStackLevelInfo Results;
        }

        // Struct @ cimgui.h:77:33
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ImGuiContextHook
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiID HookId;

            [FieldOffset(4)] // size = 4, padding = 0
            public ImGuiContextHookType Type;

            [FieldOffset(8)] // size = 4, padding = 4
            public ImGuiID Owner;

            [FieldOffset(16)] // size = 8, padding = 0
            public ImGuiContextHookCallback Callback;

            [FieldOffset(24)] // size = 8, padding = 0
            public void* UserData;
        }

        // Struct @ cimgui.h:100:28
        [StructLayout(LayoutKind.Explicit, Size = 944, Pack = 8)]
        public struct ImGuiWindow
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public CString Name;

            [FieldOffset(8)] // size = 4, padding = 0
            public ImGuiID ID;

            [FieldOffset(12)] // size = 4, padding = 0
            public ImGuiWindowFlags Flags;

            [FieldOffset(16)] // size = 8, padding = 0
            public Vector2 Pos;

            [FieldOffset(24)] // size = 8, padding = 0
            public Vector2 Size;

            [FieldOffset(32)] // size = 8, padding = 0
            public Vector2 SizeFull;

            [FieldOffset(40)] // size = 8, padding = 0
            public Vector2 ContentSize;

            [FieldOffset(48)] // size = 8, padding = 0
            public Vector2 ContentSizeIdeal;

            [FieldOffset(56)] // size = 8, padding = 0
            public Vector2 ContentSizeExplicit;

            [FieldOffset(64)] // size = 8, padding = 0
            public Vector2 WindowPadding;

            [FieldOffset(72)] // size = 4, padding = 0
            public float WindowRounding;

            [FieldOffset(76)] // size = 4, padding = 0
            public float WindowBorderSize;

            [FieldOffset(80)] // size = 4, padding = 0
            public int NameBufLen;

            [FieldOffset(84)] // size = 4, padding = 0
            public ImGuiID MoveId;

            [FieldOffset(88)] // size = 4, padding = 0
            public ImGuiID ChildId;

            [FieldOffset(92)] // size = 8, padding = 0
            public Vector2 Scroll;

            [FieldOffset(100)] // size = 8, padding = 0
            public Vector2 ScrollMax;

            [FieldOffset(108)] // size = 8, padding = 0
            public Vector2 ScrollTarget;

            [FieldOffset(116)] // size = 8, padding = 0
            public Vector2 ScrollTargetCenterRatio;

            [FieldOffset(124)] // size = 8, padding = 0
            public Vector2 ScrollTargetEdgeSnapDist;

            [FieldOffset(132)] // size = 8, padding = 0
            public Vector2 ScrollbarSizes;

            [FieldOffset(140)] // size = 1, padding = 0
            public CBool ScrollbarX;

            [FieldOffset(141)] // size = 1, padding = 0
            public CBool ScrollbarY;

            [FieldOffset(142)] // size = 1, padding = 0
            public CBool Active;

            [FieldOffset(143)] // size = 1, padding = 0
            public CBool WasActive;

            [FieldOffset(144)] // size = 1, padding = 0
            public CBool WriteAccessed;

            [FieldOffset(145)] // size = 1, padding = 0
            public CBool Collapsed;

            [FieldOffset(146)] // size = 1, padding = 0
            public CBool WantCollapseToggle;

            [FieldOffset(147)] // size = 1, padding = 0
            public CBool SkipItems;

            [FieldOffset(148)] // size = 1, padding = 0
            public CBool Appearing;

            [FieldOffset(149)] // size = 1, padding = 0
            public CBool Hidden;

            [FieldOffset(150)] // size = 1, padding = 0
            public CBool IsFallbackWindow;

            [FieldOffset(151)] // size = 1, padding = 0
            public CBool IsExplicitChild;

            [FieldOffset(152)] // size = 1, padding = 0
            public CBool HasCloseButton;

            [FieldOffset(153)] // size = 1, padding = 0
            public sbyte ResizeBorderHeld;

            [FieldOffset(154)] // size = 2, padding = 0
            public short BeginCount;

            [FieldOffset(156)] // size = 2, padding = 0
            public short BeginOrderWithinParent;

            [FieldOffset(158)] // size = 2, padding = 0
            public short BeginOrderWithinContext;

            [FieldOffset(160)] // size = 2, padding = 2
            public short FocusOrder;

            [FieldOffset(164)] // size = 4, padding = 0
            public ImGuiID PopupId;

            [FieldOffset(168)] // size = 1, padding = 0
            public sbyte AutoFitFramesX;

            [FieldOffset(169)] // size = 1, padding = 0
            public sbyte AutoFitFramesY;

            [FieldOffset(170)] // size = 1, padding = 0
            public sbyte AutoFitChildAxises;

            [FieldOffset(171)] // size = 1, padding = 0
            public CBool AutoFitOnlyGrows;

            [FieldOffset(172)] // size = 4, padding = 0
            public ImGuiDir AutoPosLastDirection;

            [FieldOffset(176)] // size = 1, padding = 0
            public sbyte HiddenFramesCanSkipItems;

            [FieldOffset(177)] // size = 1, padding = 0
            public sbyte HiddenFramesCannotSkipItems;

            [FieldOffset(178)] // size = 1, padding = 0
            public sbyte HiddenFramesForRenderOnly;

            [FieldOffset(179)] // size = 1, padding = 0
            public sbyte DisableInputsFrames;

            [FieldOffset(180)] // size = 4, padding = -3
            public ImGuiCond SetWindowPosAllowFlags;

            [FieldOffset(181)] // size = 4, padding = -3
            public ImGuiCond SetWindowSizeAllowFlags;

            [FieldOffset(182)] // size = 4, padding = -2
            public ImGuiCond SetWindowCollapsedAllowFlags;

            [FieldOffset(184)] // size = 8, padding = 0
            public Vector2 SetWindowPosVal;

            [FieldOffset(192)] // size = 8, padding = 0
            public Vector2 SetWindowPosPivot;

            [FieldOffset(200)] // size = 16, padding = 0
            public ImVector_ImGuiID IDStack;

            [FieldOffset(216)] // size = 232, padding = 0
            public ImGuiWindowTempData DC;

            [FieldOffset(448)] // size = 16, padding = 0
            public ImRect OuterRectClipped;

            [FieldOffset(464)] // size = 16, padding = 0
            public ImRect InnerRect;

            [FieldOffset(480)] // size = 16, padding = 0
            public ImRect InnerClipRect;

            [FieldOffset(496)] // size = 16, padding = 0
            public ImRect WorkRect;

            [FieldOffset(512)] // size = 16, padding = 0
            public ImRect ParentWorkRect;

            [FieldOffset(528)] // size = 16, padding = 0
            public ImRect ClipRect;

            [FieldOffset(544)] // size = 16, padding = 0
            public ImRect ContentRegionRect;

            [FieldOffset(560)] // size = 4, padding = 0
            public ImVec2ih HitTestHoleSize;

            [FieldOffset(564)] // size = 4, padding = 0
            public ImVec2ih HitTestHoleOffset;

            [FieldOffset(568)] // size = 4, padding = 0
            public int LastFrameActive;

            [FieldOffset(572)] // size = 4, padding = 0
            public float LastTimeActive;

            [FieldOffset(576)] // size = 4, padding = 4
            public float ItemWidthDefault;

            [FieldOffset(584)] // size = 16, padding = 0
            public ImGuiStorage StateStorage;

            [FieldOffset(600)] // size = 16, padding = 0
            public ImVector_ImGuiOldColumns ColumnsStorage;

            [FieldOffset(616)] // size = 4, padding = 0
            public float FontWindowScale;

            [FieldOffset(620)] // size = 4, padding = 0
            public int SettingsOffset;

            [FieldOffset(624)] // size = 8, padding = 0
            public ImDrawList* DrawList;

            [FieldOffset(632)] // size = 200, padding = 0
            public ImDrawList DrawListInst;

            [FieldOffset(832)] // size = 8, padding = 0
            public ImGuiWindow* ParentWindow;

            [FieldOffset(840)] // size = 8, padding = 0
            public ImGuiWindow* ParentWindowInBeginStack;

            [FieldOffset(848)] // size = 8, padding = 0
            public ImGuiWindow* RootWindow;

            [FieldOffset(856)] // size = 8, padding = 0
            public ImGuiWindow* RootWindowPopupTree;

            [FieldOffset(864)] // size = 8, padding = 0
            public ImGuiWindow* RootWindowForTitleBarHighlight;

            [FieldOffset(872)] // size = 8, padding = 0
            public ImGuiWindow* RootWindowForNav;

            [FieldOffset(880)] // size = 8, padding = 0
            public ImGuiWindow* NavLastChildNavWindow;

            [FieldOffset(888)] // size = 8, padding = 0
            public fixed uint _NavLastIds[8 / 4]; // ImGuiID[2]

            public Span<ImGuiID> NavLastIds
            {
                get
                {
                    fixed (ImGuiWindow* @this = &this)
                    {
                        var pointer = &@this->_NavLastIds[0];
                        var span = new Span<ImGuiID>(pointer, 2);
                        return span;
                    }
                }
            }

            [FieldOffset(896)] // size = 32, padding = 0
            public fixed uint _NavRectRel[32 / 4]; // ImRect[2]

            public Span<ImRect> NavRectRel
            {
                get
                {
                    fixed (ImGuiWindow* @this = &this)
                    {
                        var pointer = &@this->_NavRectRel[0];
                        var span = new Span<ImRect>(pointer, 2);
                        return span;
                    }
                }
            }

            [FieldOffset(928)] // size = 4, padding = 0
            public int MemoryDrawListIdxCapacity;

            [FieldOffset(932)] // size = 4, padding = 0
            public int MemoryDrawListVtxCapacity;

            [FieldOffset(936)] // size = 1, padding = 7
            public CBool MemoryCompacted;
        }

        // Struct @ cimgui.h:94:29
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 4)]
        public struct ImGuiTabItem
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiID ID;

            [FieldOffset(4)] // size = 4, padding = 0
            public ImGuiTabItemFlags Flags;

            [FieldOffset(8)] // size = 4, padding = 0
            public int LastFrameVisible;

            [FieldOffset(12)] // size = 4, padding = 0
            public int LastFrameSelected;

            [FieldOffset(16)] // size = 4, padding = 0
            public float Offset;

            [FieldOffset(20)] // size = 4, padding = 0
            public float Width;

            [FieldOffset(24)] // size = 4, padding = 0
            public float ContentWidth;

            [FieldOffset(28)] // size = 4, padding = 0
            public int NameOffset;

            [FieldOffset(32)] // size = 2, padding = 0
            public short BeginOrder;

            [FieldOffset(34)] // size = 2, padding = 0
            public short IndexDuringLayout;

            [FieldOffset(36)] // size = 1, padding = 3
            public CBool WantClose;
        }

        // Struct @ cimgui.h:93:28
        [StructLayout(LayoutKind.Explicit, Size = 152, Pack = 8)]
        public struct ImGuiTabBar
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public ImVector_ImGuiTabItem Tabs;

            [FieldOffset(16)] // size = 4, padding = 0
            public ImGuiTabBarFlags Flags;

            [FieldOffset(20)] // size = 4, padding = 0
            public ImGuiID ID;

            [FieldOffset(24)] // size = 4, padding = 0
            public ImGuiID SelectedTabId;

            [FieldOffset(28)] // size = 4, padding = 0
            public ImGuiID NextSelectedTabId;

            [FieldOffset(32)] // size = 4, padding = 0
            public ImGuiID VisibleTabId;

            [FieldOffset(36)] // size = 4, padding = 0
            public int CurrFrameVisible;

            [FieldOffset(40)] // size = 4, padding = 0
            public int PrevFrameVisible;

            [FieldOffset(44)] // size = 16, padding = 0
            public ImRect BarRect;

            [FieldOffset(60)] // size = 4, padding = 0
            public float CurrTabsContentsHeight;

            [FieldOffset(64)] // size = 4, padding = 0
            public float PrevTabsContentsHeight;

            [FieldOffset(68)] // size = 4, padding = 0
            public float WidthAllTabs;

            [FieldOffset(72)] // size = 4, padding = 0
            public float WidthAllTabsIdeal;

            [FieldOffset(76)] // size = 4, padding = 0
            public float ScrollingAnim;

            [FieldOffset(80)] // size = 4, padding = 0
            public float ScrollingTarget;

            [FieldOffset(84)] // size = 4, padding = 0
            public float ScrollingTargetDistToVisibility;

            [FieldOffset(88)] // size = 4, padding = 0
            public float ScrollingSpeed;

            [FieldOffset(92)] // size = 4, padding = 0
            public float ScrollingRectMinX;

            [FieldOffset(96)] // size = 4, padding = 0
            public float ScrollingRectMaxX;

            [FieldOffset(100)] // size = 4, padding = 0
            public ImGuiID ReorderRequestTabId;

            [FieldOffset(104)] // size = 2, padding = 0
            public short ReorderRequestOffset;

            [FieldOffset(106)] // size = 1, padding = 0
            public sbyte BeginCount;

            [FieldOffset(107)] // size = 1, padding = 0
            public CBool WantLayout;

            [FieldOffset(108)] // size = 1, padding = 0
            public CBool VisibleTabWasSubmitted;

            [FieldOffset(109)] // size = 1, padding = 0
            public CBool TabsAddedNew;

            [FieldOffset(110)] // size = 2, padding = 0
            public short TabsActiveCount;

            [FieldOffset(112)] // size = 2, padding = 2
            public short LastTabItemIdx;

            [FieldOffset(116)] // size = 4, padding = 0
            public float ItemSpacingY;

            [FieldOffset(120)] // size = 8, padding = 0
            public Vector2 FramePadding;

            [FieldOffset(128)] // size = 8, padding = 0
            public Vector2 BackupCursorPos;

            [FieldOffset(136)] // size = 16, padding = 0
            public ImGuiTextBuffer TabsNames;
        }

        // Struct @ cimgui.h:96:33
        [StructLayout(LayoutKind.Explicit, Size = 104, Pack = 4)]
        public struct ImGuiTableColumn
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiTableColumnFlags Flags;

            [FieldOffset(4)] // size = 4, padding = 0
            public float WidthGiven;

            [FieldOffset(8)] // size = 4, padding = 0
            public float MinX;

            [FieldOffset(12)] // size = 4, padding = 0
            public float MaxX;

            [FieldOffset(16)] // size = 4, padding = 0
            public float WidthRequest;

            [FieldOffset(20)] // size = 4, padding = 0
            public float WidthAuto;

            [FieldOffset(24)] // size = 4, padding = 0
            public float StretchWeight;

            [FieldOffset(28)] // size = 4, padding = 0
            public float InitStretchWeightOrWidth;

            [FieldOffset(32)] // size = 16, padding = 0
            public ImRect ClipRect;

            [FieldOffset(48)] // size = 4, padding = 0
            public ImGuiID UserID;

            [FieldOffset(52)] // size = 4, padding = 0
            public float WorkMinX;

            [FieldOffset(56)] // size = 4, padding = 0
            public float WorkMaxX;

            [FieldOffset(60)] // size = 4, padding = 0
            public float ItemWidth;

            [FieldOffset(64)] // size = 4, padding = 0
            public float ContentMaxXFrozen;

            [FieldOffset(68)] // size = 4, padding = 0
            public float ContentMaxXUnfrozen;

            [FieldOffset(72)] // size = 4, padding = 0
            public float ContentMaxXHeadersUsed;

            [FieldOffset(76)] // size = 4, padding = 0
            public float ContentMaxXHeadersIdeal;

            [FieldOffset(80)] // size = 2, padding = 0
            public short NameOffset;

            [FieldOffset(82)] // size = 1, padding = 0
            public ImGuiTableColumnIdx DisplayOrder;

            [FieldOffset(83)] // size = 1, padding = 0
            public ImGuiTableColumnIdx IndexWithinEnabledSet;

            [FieldOffset(84)] // size = 1, padding = 0
            public ImGuiTableColumnIdx PrevEnabledColumn;

            [FieldOffset(85)] // size = 1, padding = 0
            public ImGuiTableColumnIdx NextEnabledColumn;

            [FieldOffset(86)] // size = 1, padding = 0
            public ImGuiTableColumnIdx SortOrder;

            [FieldOffset(87)] // size = 1, padding = 0
            public ImGuiTableDrawChannelIdx DrawChannelCurrent;

            [FieldOffset(88)] // size = 1, padding = 0
            public ImGuiTableDrawChannelIdx DrawChannelFrozen;

            [FieldOffset(89)] // size = 1, padding = 0
            public ImGuiTableDrawChannelIdx DrawChannelUnfrozen;

            [FieldOffset(90)] // size = 1, padding = 0
            public CBool IsEnabled;

            [FieldOffset(91)] // size = 1, padding = 0
            public CBool IsUserEnabled;

            [FieldOffset(92)] // size = 1, padding = 0
            public CBool IsUserEnabledNextFrame;

            [FieldOffset(93)] // size = 1, padding = 0
            public CBool IsVisibleX;

            [FieldOffset(94)] // size = 1, padding = 0
            public CBool IsVisibleY;

            [FieldOffset(95)] // size = 1, padding = 0
            public CBool IsRequestOutput;

            [FieldOffset(96)] // size = 1, padding = 0
            public CBool IsSkipItems;

            [FieldOffset(97)] // size = 1, padding = 0
            public CBool IsPreserveWidthAuto;

            [FieldOffset(98)] // size = 1, padding = 0
            public sbyte NavLayerCurrent;

            [FieldOffset(99)] // size = 1, padding = 0
            public byte AutoFitQueue;

            [FieldOffset(100)] // size = 1, padding = 0
            public byte CannotSkipItemsQueue;

            [FieldOffset(101)] // size = 1, padding = -1
            public byte SortDirection;

            [FieldOffset(101)] // size = 1, padding = -1
            public byte SortDirectionsAvailCount;

            [FieldOffset(101)] // size = 1, padding = 0
            public byte SortDirectionsAvailMask;

            [FieldOffset(102)] // size = 1, padding = 1
            public byte SortDirectionsAvailList;
        }

        // Struct @ cimgui.h:95:27
        [StructLayout(LayoutKind.Explicit, Size = 520, Pack = 8)]
        public struct ImGuiTable
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiID ID;

            [FieldOffset(4)] // size = 4, padding = 0
            public ImGuiTableFlags Flags;

            [FieldOffset(8)] // size = 8, padding = 0
            public void* RawData;

            [FieldOffset(16)] // size = 8, padding = 0
            public ImGuiTableTempData* TempData;

            [FieldOffset(24)] // size = 16, padding = 0
            public ImSpan_ImGuiTableColumn Columns;

            [FieldOffset(40)] // size = 16, padding = 0
            public ImSpan_ImGuiTableColumnIdx DisplayOrderToIndex;

            [FieldOffset(56)] // size = 16, padding = 0
            public ImSpan_ImGuiTableCellData RowCellData;

            [FieldOffset(72)] // size = 8, padding = 0
            public ulong EnabledMaskByDisplayOrder;

            [FieldOffset(80)] // size = 8, padding = 0
            public ulong EnabledMaskByIndex;

            [FieldOffset(88)] // size = 8, padding = 0
            public ulong VisibleMaskByIndex;

            [FieldOffset(96)] // size = 8, padding = 0
            public ulong RequestOutputMaskByIndex;

            [FieldOffset(104)] // size = 4, padding = 0
            public ImGuiTableFlags SettingsLoadedFlags;

            [FieldOffset(108)] // size = 4, padding = 0
            public int SettingsOffset;

            [FieldOffset(112)] // size = 4, padding = 0
            public int LastFrameActive;

            [FieldOffset(116)] // size = 4, padding = 0
            public int ColumnsCount;

            [FieldOffset(120)] // size = 4, padding = 0
            public int CurrentRow;

            [FieldOffset(124)] // size = 4, padding = 0
            public int CurrentColumn;

            [FieldOffset(128)] // size = 2, padding = 0
            public short InstanceCurrent;

            [FieldOffset(130)] // size = 2, padding = 0
            public short InstanceInteracted;

            [FieldOffset(132)] // size = 4, padding = 0
            public float RowPosY1;

            [FieldOffset(136)] // size = 4, padding = 0
            public float RowPosY2;

            [FieldOffset(140)] // size = 4, padding = 0
            public float RowMinHeight;

            [FieldOffset(144)] // size = 4, padding = 0
            public float RowTextBaseline;

            [FieldOffset(148)] // size = 4, padding = 0
            public float RowIndentOffsetX;

            [FieldOffset(152)] // size = 4, padding = -2
            public ImGuiTableRowFlags RowFlags;

            [FieldOffset(154)] // size = 4, padding = -2
            public ImGuiTableRowFlags LastRowFlags;

            [FieldOffset(156)] // size = 4, padding = 0
            public int RowBgColorCounter;

            [FieldOffset(160)] // size = 8, padding = 0
            public fixed uint _RowBgColor[8 / 4]; // ImU32[2]

            public Span<uint> RowBgColor
            {
                get
                {
                    fixed (ImGuiTable* @this = &this)
                    {
                        var pointer = &@this->_RowBgColor[0];
                        var span = new Span<uint>(pointer, 2);
                        return span;
                    }
                }
            }

            [FieldOffset(168)] // size = 4, padding = 0
            public uint BorderColorStrong;

            [FieldOffset(172)] // size = 4, padding = 0
            public uint BorderColorLight;

            [FieldOffset(176)] // size = 4, padding = 0
            public float BorderX1;

            [FieldOffset(180)] // size = 4, padding = 0
            public float BorderX2;

            [FieldOffset(184)] // size = 4, padding = 0
            public float HostIndentX;

            [FieldOffset(188)] // size = 4, padding = 0
            public float MinColumnWidth;

            [FieldOffset(192)] // size = 4, padding = 0
            public float OuterPaddingX;

            [FieldOffset(196)] // size = 4, padding = 0
            public float CellPaddingX;

            [FieldOffset(200)] // size = 4, padding = 0
            public float CellPaddingY;

            [FieldOffset(204)] // size = 4, padding = 0
            public float CellSpacingX1;

            [FieldOffset(208)] // size = 4, padding = 0
            public float CellSpacingX2;

            [FieldOffset(212)] // size = 4, padding = 0
            public float LastOuterHeight;

            [FieldOffset(216)] // size = 4, padding = 0
            public float LastFirstRowHeight;

            [FieldOffset(220)] // size = 4, padding = 0
            public float InnerWidth;

            [FieldOffset(224)] // size = 4, padding = 0
            public float ColumnsGivenWidth;

            [FieldOffset(228)] // size = 4, padding = 0
            public float ColumnsAutoFitWidth;

            [FieldOffset(232)] // size = 4, padding = 0
            public float ResizedColumnNextWidth;

            [FieldOffset(236)] // size = 4, padding = 0
            public float ResizeLockMinContentsX2;

            [FieldOffset(240)] // size = 4, padding = 0
            public float RefScale;

            [FieldOffset(244)] // size = 16, padding = 0
            public ImRect OuterRect;

            [FieldOffset(260)] // size = 16, padding = 0
            public ImRect InnerRect;

            [FieldOffset(276)] // size = 16, padding = 0
            public ImRect WorkRect;

            [FieldOffset(292)] // size = 16, padding = 0
            public ImRect InnerClipRect;

            [FieldOffset(308)] // size = 16, padding = 0
            public ImRect BgClipRect;

            [FieldOffset(324)] // size = 16, padding = 0
            public ImRect Bg0ClipRectForDrawCmd;

            [FieldOffset(340)] // size = 16, padding = 0
            public ImRect Bg2ClipRectForDrawCmd;

            [FieldOffset(356)] // size = 16, padding = 0
            public ImRect HostClipRect;

            [FieldOffset(372)] // size = 16, padding = 4
            public ImRect HostBackupInnerClipRect;

            [FieldOffset(392)] // size = 8, padding = 0
            public ImGuiWindow* OuterWindow;

            [FieldOffset(400)] // size = 8, padding = 0
            public ImGuiWindow* InnerWindow;

            [FieldOffset(408)] // size = 16, padding = 0
            public ImGuiTextBuffer ColumnsNames;

            [FieldOffset(424)] // size = 8, padding = 0
            public ImDrawListSplitter* DrawSplitter;

            [FieldOffset(432)] // size = 12, padding = 4
            public ImGuiTableColumnSortSpecs SortSpecsSingle;

            [FieldOffset(448)] // size = 16, padding = 0
            public ImVector_ImGuiTableColumnSortSpecs SortSpecsMulti;

            [FieldOffset(464)] // size = 16, padding = 0
            public ImGuiTableSortSpecs SortSpecs;

            [FieldOffset(480)] // size = 1, padding = 0
            public ImGuiTableColumnIdx SortSpecsCount;

            [FieldOffset(481)] // size = 1, padding = 0
            public ImGuiTableColumnIdx ColumnsEnabledCount;

            [FieldOffset(482)] // size = 1, padding = 0
            public ImGuiTableColumnIdx ColumnsEnabledFixedCount;

            [FieldOffset(483)] // size = 1, padding = 0
            public ImGuiTableColumnIdx DeclColumnsCount;

            [FieldOffset(484)] // size = 1, padding = 0
            public ImGuiTableColumnIdx HoveredColumnBody;

            [FieldOffset(485)] // size = 1, padding = 0
            public ImGuiTableColumnIdx HoveredColumnBorder;

            [FieldOffset(486)] // size = 1, padding = 0
            public ImGuiTableColumnIdx AutoFitSingleColumn;

            [FieldOffset(487)] // size = 1, padding = 0
            public ImGuiTableColumnIdx ResizedColumn;

            [FieldOffset(488)] // size = 1, padding = 0
            public ImGuiTableColumnIdx LastResizedColumn;

            [FieldOffset(489)] // size = 1, padding = 0
            public ImGuiTableColumnIdx HeldHeaderColumn;

            [FieldOffset(490)] // size = 1, padding = 0
            public ImGuiTableColumnIdx ReorderColumn;

            [FieldOffset(491)] // size = 1, padding = 0
            public ImGuiTableColumnIdx ReorderColumnDir;

            [FieldOffset(492)] // size = 1, padding = 0
            public ImGuiTableColumnIdx LeftMostEnabledColumn;

            [FieldOffset(493)] // size = 1, padding = 0
            public ImGuiTableColumnIdx RightMostEnabledColumn;

            [FieldOffset(494)] // size = 1, padding = 0
            public ImGuiTableColumnIdx LeftMostStretchedColumn;

            [FieldOffset(495)] // size = 1, padding = 0
            public ImGuiTableColumnIdx RightMostStretchedColumn;

            [FieldOffset(496)] // size = 1, padding = 0
            public ImGuiTableColumnIdx ContextPopupColumn;

            [FieldOffset(497)] // size = 1, padding = 0
            public ImGuiTableColumnIdx FreezeRowsRequest;

            [FieldOffset(498)] // size = 1, padding = 0
            public ImGuiTableColumnIdx FreezeRowsCount;

            [FieldOffset(499)] // size = 1, padding = 0
            public ImGuiTableColumnIdx FreezeColumnsRequest;

            [FieldOffset(500)] // size = 1, padding = 0
            public ImGuiTableColumnIdx FreezeColumnsCount;

            [FieldOffset(501)] // size = 1, padding = 0
            public ImGuiTableColumnIdx RowCellDataCurrent;

            [FieldOffset(502)] // size = 1, padding = 0
            public ImGuiTableDrawChannelIdx DummyDrawChannel;

            [FieldOffset(503)] // size = 1, padding = 0
            public ImGuiTableDrawChannelIdx Bg2DrawChannelCurrent;

            [FieldOffset(504)] // size = 1, padding = 0
            public ImGuiTableDrawChannelIdx Bg2DrawChannelUnfrozen;

            [FieldOffset(505)] // size = 1, padding = 0
            public CBool IsLayoutLocked;

            [FieldOffset(506)] // size = 1, padding = 0
            public CBool IsInsideRow;

            [FieldOffset(507)] // size = 1, padding = 0
            public CBool IsInitializing;

            [FieldOffset(508)] // size = 1, padding = 0
            public CBool IsSortSpecsDirty;

            [FieldOffset(509)] // size = 1, padding = 0
            public CBool IsUsingHeaders;

            [FieldOffset(510)] // size = 1, padding = 0
            public CBool IsContextPopupOpen;

            [FieldOffset(511)] // size = 1, padding = 0
            public CBool IsSettingsRequestLoad;

            [FieldOffset(512)] // size = 1, padding = 0
            public CBool IsSettingsDirty;

            [FieldOffset(513)] // size = 1, padding = 0
            public CBool IsDefaultDisplayOrder;

            [FieldOffset(514)] // size = 1, padding = 0
            public CBool IsResetAllRequest;

            [FieldOffset(515)] // size = 1, padding = 0
            public CBool IsResetDisplayOrderRequest;

            [FieldOffset(516)] // size = 1, padding = 0
            public CBool IsUnfrozenRows;

            [FieldOffset(517)] // size = 1, padding = 0
            public CBool IsDefaultSizingPolicy;

            [FieldOffset(518)] // size = 1, padding = 0
            public CBool MemoryCompacted;

            [FieldOffset(519)] // size = 1, padding = 0
            public CBool HostSkipItems;
        }

        // Struct @ cimgui.h:97:35
        [StructLayout(LayoutKind.Explicit, Size = 112, Pack = 8)]
        public struct ImGuiTableTempData
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int TableIndex;

            [FieldOffset(4)] // size = 4, padding = 0
            public float LastTimeActive;

            [FieldOffset(8)] // size = 8, padding = 0
            public Vector2 UserOuterSize;

            [FieldOffset(16)] // size = 24, padding = 0
            public ImDrawListSplitter DrawSplitter;

            [FieldOffset(40)] // size = 16, padding = 0
            public ImRect HostBackupWorkRect;

            [FieldOffset(56)] // size = 16, padding = 0
            public ImRect HostBackupParentWorkRect;

            [FieldOffset(72)] // size = 8, padding = 0
            public Vector2 HostBackupPrevLineSize;

            [FieldOffset(80)] // size = 8, padding = 0
            public Vector2 HostBackupCurrLineSize;

            [FieldOffset(88)] // size = 8, padding = 0
            public Vector2 HostBackupCursorMaxPos;

            [FieldOffset(96)] // size = 4, padding = 0
            public float HostBackupColumnsOffset;

            [FieldOffset(100)] // size = 4, padding = 0
            public float HostBackupItemWidth;

            [FieldOffset(104)] // size = 4, padding = 4
            public int HostBackupItemWidthStackSize;
        }

        // Struct @ cimgui.h:2528:41
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct ImGuiTableColumnSettings
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public float WidthOrWeight;

            [FieldOffset(4)] // size = 4, padding = 0
            public ImGuiID UserID;

            [FieldOffset(8)] // size = 1, padding = 0
            public ImGuiTableColumnIdx Index;

            [FieldOffset(9)] // size = 1, padding = 0
            public ImGuiTableColumnIdx DisplayOrder;

            [FieldOffset(10)] // size = 1, padding = 0
            public ImGuiTableColumnIdx SortOrder;

            [FieldOffset(11)] // size = 1, padding = -1
            public byte SortDirection;

            [FieldOffset(11)] // size = 1, padding = -1
            public byte IsEnabled;

            [FieldOffset(11)] // size = 1, padding = 0
            public byte IsStretch;
        }

        // Struct @ cimgui.h:98:35
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct ImGuiTableSettings
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiID ID;

            [FieldOffset(4)] // size = 4, padding = 0
            public ImGuiTableFlags SaveFlags;

            [FieldOffset(8)] // size = 4, padding = 0
            public float RefScale;

            [FieldOffset(12)] // size = 1, padding = 0
            public ImGuiTableColumnIdx ColumnsCount;

            [FieldOffset(13)] // size = 1, padding = 0
            public ImGuiTableColumnIdx ColumnsCountMax;

            [FieldOffset(14)] // size = 1, padding = 1
            public CBool WantApply;
        }

        // Struct @ cimgui.h:1618:37
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct ImGuiShrinkWidthItem
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Index;

            [FieldOffset(4)] // size = 4, padding = 0
            public float Width;
        }

        // Struct @ cimgui.h:60:29
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct ImGuiKeyData
        {
            [FieldOffset(0)] // size = 1, padding = 3
            public CBool Down;

            [FieldOffset(4)] // size = 4, padding = 0
            public float DownDuration;

            [FieldOffset(8)] // size = 4, padding = 0
            public float DownDurationPrev;

            [FieldOffset(12)] // size = 4, padding = 0
            public float AnalogValue;
        }

        // Struct @ cimgui.h:78:34
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ImGuiDataTypeInfo
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ulong Size;

            [FieldOffset(8)] // size = 8, padding = 0
            public CString Name;

            [FieldOffset(16)] // size = 8, padding = 0
            public CString PrintFmt;

            [FieldOffset(24)] // size = 8, padding = 0
            public CString ScanFmt;
        }

        // Struct @ cimgui.h:1899:84
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiWindowPtr
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiWindow** Data;
        }

        // Struct @ cimgui.h:52:32
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ImFontBuilderIO
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public FnPtr_ImFontAtlasPtr_CBool FontBuilder_Build;
        }

        // Struct @ cimgui.h:1897:88
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiInputEvent
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiInputEvent* Data;
        }

        // Struct @ cimgui.h:1901:98
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiWindowStackData
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiWindowStackData* Data;
        }

        // Struct @ cimgui.h:1903:84
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiColorMod
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiColorMod* Data;
        }

        // Struct @ cimgui.h:1905:84
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiStyleMod
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiStyleMod* Data;
        }

        // Struct @ cimgui.h:1148:74
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImFontPtr
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImFont** Data;
        }

        // Struct @ cimgui.h:1907:72
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiID
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiID* Data;
        }

        // Struct @ cimgui.h:1909:86
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiItemFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiItemFlags* Data;
        }

        // Struct @ cimgui.h:1911:86
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiGroupData
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiGroupData* Data;
        }

        // Struct @ cimgui.h:1913:86
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiPopupData
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiPopupData* Data;
        }

        // Struct @ cimgui.h:1915:90
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiViewportPPtr
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiViewportP** Data;
        }

        // Struct @ cimgui.h:1917:84
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_unsigned_char
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ulong* Data;
        }

        // Struct @ cimgui.h:1919:98
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiListClipperData
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiListClipperData* Data;
        }

        // Struct @ cimgui.h:1921:94
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiTableTempData
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiTableTempData* Data;
        }

        // Struct @ cimgui.h:1925:117
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
        public struct ImPool_ImGuiTable
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public ImVector_ImGuiTable Buf;

            [FieldOffset(16)] // size = 16, padding = 0
            public ImGuiStorage Map;

            [FieldOffset(32)] // size = 4, padding = 0
            public ImPoolIdx FreeIdx;

            [FieldOffset(36)] // size = 4, padding = 0
            public ImPoolIdx AliveCount;
        }

        // Struct @ cimgui.h:1178:68
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_float
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public float* Data;
        }

        // Struct @ cimgui.h:1027:84
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImDrawChannel
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImDrawChannel* Data;
        }

        // Struct @ cimgui.h:1929:119
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
        public struct ImPool_ImGuiTabBar
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public ImVector_ImGuiTabBar Buf;

            [FieldOffset(16)] // size = 16, padding = 0
            public ImGuiStorage Map;

            [FieldOffset(32)] // size = 4, padding = 0
            public ImPoolIdx FreeIdx;

            [FieldOffset(36)] // size = 4, padding = 0
            public ImPoolIdx AliveCount;
        }

        // Struct @ cimgui.h:1931:88
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiPtrOrIndex
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiPtrOrIndex* Data;
        }

        // Struct @ cimgui.h:1933:98
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiShrinkWidthItem
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiShrinkWidthItem* Data;
        }

        // Struct @ cimgui.h:961:66
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_char
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public CString Data;
        }

        // Struct @ cimgui.h:1935:98
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiSettingsHandler
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiSettingsHandler* Data;
        }

        // Struct @ cimgui.h:1937:71
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImChunkStream_ImGuiWindowSettings
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public ImVector_char Buf;
        }

        // Struct @ cimgui.h:1939:70
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImChunkStream_ImGuiTableSettings
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public ImVector_char Buf;
        }

        // Struct @ cimgui.h:1941:90
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiContextHook
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiContextHook* Data;
        }

        // Struct @ cimgui.h:1150:100
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImFontAtlasCustomRect
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImFontAtlasCustomRect* Data;
        }

        // Struct @ cimgui.h:1152:82
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImFontConfig
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImFontConfig* Data;
        }

        // Struct @ cimgui.h:1018:76
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImDrawCmd
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImDrawCmd* Data;
        }

        // Struct @ cimgui.h:1020:76
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImDrawIdx
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImDrawIdx* Data;
        }

        // Struct @ cimgui.h:1058:78
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImDrawVert
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImDrawVert* Data;
        }

        // Struct @ cimgui.h:49:27
        [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
        public struct ImDrawVert
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public Vector2 pos;

            [FieldOffset(8)] // size = 8, padding = 0
            public Vector2 uv;

            [FieldOffset(16)] // size = 4, padding = 0
            public uint col;
        }

        // Struct @ cimgui.h:1060:70
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImVec4
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public Vector4* Data;
        }

        // Struct @ cimgui.h:1062:80
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImTextureID
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImTextureID* Data;
        }

        // Struct @ cimgui.h:1064:70
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImVec2
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public Vector2* Data;
        }

        // Struct @ cimgui.h:1011:32
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ImDrawCmdHeader
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public Vector4 ClipRect;

            [FieldOffset(16)] // size = 8, padding = 0
            public ImTextureID TextureId;

            [FieldOffset(24)] // size = 4, padding = 4
            public uint VtxOffset;
        }

        // Struct @ cimgui.h:65:38
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ImGuiSizeCallbackData
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public void* UserData;

            [FieldOffset(8)] // size = 8, padding = 0
            public Vector2 Pos;

            [FieldOffset(16)] // size = 8, padding = 0
            public Vector2 CurrentSize;

            [FieldOffset(24)] // size = 8, padding = 0
            public Vector2 DesiredSize;
        }

        // Struct @ cimgui.h:1180:80
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImFontGlyph
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImFontGlyph* Data;
        }

        // Struct @ cimgui.h:974:90
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiStoragePair
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiStoragePair* Data;
        }

        // Struct @ cimgui.h:1126:68
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImU32
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public uint* Data;
        }

        // Struct @ cimgui.h:1287:34
        [StructLayout(LayoutKind.Explicit, Size = 3628, Pack = 4)]
        public struct STB_TexteditState
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int cursor;

            [FieldOffset(4)] // size = 4, padding = 0
            public int select_start;

            [FieldOffset(8)] // size = 4, padding = 0
            public int select_end;

            [FieldOffset(12)] // size = 1, padding = 3
            public byte insert_mode;

            [FieldOffset(16)] // size = 4, padding = 0
            public int row_count_per_page;

            [FieldOffset(20)] // size = 1, padding = 0
            public byte cursor_at_end_of_line;

            [FieldOffset(21)] // size = 1, padding = 0
            public byte initialized;

            [FieldOffset(22)] // size = 1, padding = 0
            public byte has_preferred_x;

            [FieldOffset(23)] // size = 1, padding = 0
            public byte single_line;

            [FieldOffset(24)] // size = 1, padding = 0
            public byte padding1;

            [FieldOffset(25)] // size = 1, padding = 0
            public byte padding2;

            [FieldOffset(26)] // size = 1, padding = 1
            public byte padding3;

            [FieldOffset(28)] // size = 4, padding = 0
            public float preferred_x;

            [FieldOffset(32)] // size = 3596, padding = 0
            public StbUndoState undostate;
        }

        // Struct @ cimgui.h:1716:100
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiListClipperRange
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiListClipperRange* Data;
        }

        // Struct @ cimgui.h:1805:94
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiOldColumnData
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiOldColumnData* Data;
        }

        // Struct @ cimgui.h:1878:96
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiStackLevelInfo
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiStackLevelInfo* Data;
        }

        // Struct @ cimgui.h:101:36
        [StructLayout(LayoutKind.Explicit, Size = 232, Pack = 8)]
        public struct ImGuiWindowTempData
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public Vector2 CursorPos;

            [FieldOffset(8)] // size = 8, padding = 0
            public Vector2 CursorPosPrevLine;

            [FieldOffset(16)] // size = 8, padding = 0
            public Vector2 CursorStartPos;

            [FieldOffset(24)] // size = 8, padding = 0
            public Vector2 CursorMaxPos;

            [FieldOffset(32)] // size = 8, padding = 0
            public Vector2 IdealMaxPos;

            [FieldOffset(40)] // size = 8, padding = 0
            public Vector2 CurrLineSize;

            [FieldOffset(48)] // size = 8, padding = 0
            public Vector2 PrevLineSize;

            [FieldOffset(56)] // size = 4, padding = 0
            public float CurrLineTextBaseOffset;

            [FieldOffset(60)] // size = 4, padding = 0
            public float PrevLineTextBaseOffset;

            [FieldOffset(64)] // size = 4, padding = 0
            public float Indent;

            [FieldOffset(68)] // size = 4, padding = 0
            public float ColumnsOffset;

            [FieldOffset(72)] // size = 4, padding = 0
            public float GroupOffset;

            [FieldOffset(76)] // size = 8, padding = 0
            public Vector2 CursorStartPosLossyness;

            [FieldOffset(84)] // size = 4, padding = 0
            public ImGuiNavLayer NavLayerCurrent;

            [FieldOffset(88)] // size = 2, padding = 0
            public short NavLayersActiveMask;

            [FieldOffset(90)] // size = 2, padding = 0
            public short NavLayersActiveMaskNext;

            [FieldOffset(92)] // size = 4, padding = 0
            public ImGuiID NavFocusScopeIdCurrent;

            [FieldOffset(96)] // size = 1, padding = 0
            public CBool NavHideHighlightOneFrame;

            [FieldOffset(97)] // size = 1, padding = 0
            public CBool NavHasScroll;

            [FieldOffset(98)] // size = 1, padding = 1
            public CBool MenuBarAppending;

            [FieldOffset(100)] // size = 8, padding = 0
            public Vector2 MenuBarOffset;

            [FieldOffset(108)] // size = 28, padding = 0
            public ImGuiMenuColumns MenuColumns;

            [FieldOffset(136)] // size = 4, padding = 0
            public int TreeDepth;

            [FieldOffset(140)] // size = 4, padding = 0
            public uint TreeJumpToParentOnPopMask;

            [FieldOffset(144)] // size = 16, padding = 0
            public ImVector_ImGuiWindowPtr ChildWindows;

            [FieldOffset(160)] // size = 8, padding = 0
            public ImGuiStorage* StateStorage;

            [FieldOffset(168)] // size = 8, padding = 0
            public ImGuiOldColumns* CurrentColumns;

            [FieldOffset(176)] // size = 4, padding = 0
            public int CurrentTableIdx;

            [FieldOffset(180)] // size = 4, padding = 0
            public ImGuiLayoutType LayoutType;

            [FieldOffset(184)] // size = 4, padding = 0
            public ImGuiLayoutType ParentLayoutType;

            [FieldOffset(188)] // size = 4, padding = 0
            public float ItemWidth;

            [FieldOffset(192)] // size = 4, padding = 4
            public float TextWrapPos;

            [FieldOffset(200)] // size = 16, padding = 0
            public ImVector_float ItemWidthStack;

            [FieldOffset(216)] // size = 16, padding = 0
            public ImVector_float TextWrapPosStack;
        }

        // Struct @ cimgui.h:2198:88
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiOldColumns
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiOldColumns* Data;
        }

        // Struct @ cimgui.h:2311:82
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiTabItem
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiTabItem* Data;
        }

        // Struct @ cimgui.h:2399:92
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImSpan_ImGuiTableColumn
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ImGuiTableColumn* Data;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiTableColumn* DataEnd;
        }

        // Struct @ cimgui.h:2401:101
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImSpan_ImGuiTableColumnIdx
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ImGuiTableColumnIdx* Data;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiTableColumnIdx* DataEnd;
        }

        // Struct @ cimgui.h:2403:98
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImSpan_ImGuiTableCellData
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ImGuiTableCellData* Data;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiTableCellData* DataEnd;
        }

        // Struct @ cimgui.h:2405:108
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiTableColumnSortSpecs
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiTableColumnSortSpecs* Data;
        }

        // Struct @ cimgui.h:1611:37
        [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
        public struct ImGuiWindowStackData
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ImGuiWindow* Window;

            [FieldOffset(8)] // size = 60, padding = 0
            public ImGuiLastItemData ParentLastItemDataBackup;

            [FieldOffset(68)] // size = 18, padding = 2
            public ImGuiStackSizes StackSizesOnBegin;
        }

        // Struct @ cimgui.h:1630:130
        [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
        public struct ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN
        {
            [FieldOffset(0)] // size = 20, padding = 0
            public fixed uint _Storage[20 / 4]; // ImU32[5]

            public Span<uint> Storage
            {
                get
                {
                    fixed (ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN* @this = &this)
                    {
                        var pointer = &@this->_Storage[0];
                        var span = new Span<uint>(pointer, 5);
                        return span;
                    }
                }
            }
        }

        // Struct @ cimgui.h:76:30
        [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
        public struct ImGuiColorMod
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiCol Col;

            [FieldOffset(4)] // size = 16, padding = 0
            public Vector4 BackupValue;
        }

        // Struct @ cimgui.h:79:31
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 4)]
        public struct ImGuiGroupData
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ImGuiID WindowID;

            [FieldOffset(4)] // size = 8, padding = 0
            public Vector2 BackupCursorPos;

            [FieldOffset(12)] // size = 8, padding = 0
            public Vector2 BackupCursorMaxPos;

            [FieldOffset(20)] // size = 4, padding = 0
            public float BackupIndent;

            [FieldOffset(24)] // size = 4, padding = 0
            public float BackupGroupOffset;

            [FieldOffset(28)] // size = 8, padding = 0
            public Vector2 BackupCurrLineSize;

            [FieldOffset(36)] // size = 4, padding = 0
            public float BackupCurrLineTextBaseOffset;

            [FieldOffset(40)] // size = 4, padding = 0
            public ImGuiID BackupActiveIdIsAlive;

            [FieldOffset(44)] // size = 1, padding = 0
            public CBool BackupActiveIdPreviousFrameIsAlive;

            [FieldOffset(45)] // size = 1, padding = 0
            public CBool BackupHoveredIdIsAlive;

            [FieldOffset(46)] // size = 1, padding = 1
            public CBool EmitItem;
        }

        // Struct @ cimgui.h:1923:78
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiTable
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiTable* Data;
        }

        // Struct @ cimgui.h:43:30
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ImDrawChannel
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public ImVector_ImDrawCmd _CmdBuffer;

            [FieldOffset(16)] // size = 16, padding = 0
            public ImVector_ImDrawIdx _IdxBuffer;
        }

        // Struct @ cimgui.h:1927:80
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImGuiTabBar
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImGuiTabBar* Data;
        }

        // Struct @ cimgui.h:1346:82
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ImVector_ImDrawListPtr
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Size;

            [FieldOffset(4)] // size = 4, padding = 0
            public int Capacity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ImDrawList** Data;
        }

        // Struct @ cimgui.h:1279:29
        [StructLayout(LayoutKind.Explicit, Size = 3596, Pack = 4)]
        public struct StbUndoState
        {
            [FieldOffset(0)] // size = 1584, padding = 0
            public fixed uint _undo_rec[1584 / 4]; // StbUndoRecord[99]

            public Span<StbUndoRecord> undo_rec
            {
                get
                {
                    fixed (StbUndoState* @this = &this)
                    {
                        var pointer = &@this->_undo_rec[0];
                        var span = new Span<StbUndoRecord>(pointer, 99);
                        return span;
                    }
                }
            }

            [FieldOffset(1584)] // size = 1998, padding = 0
            public fixed ushort _undo_char[1998 / 2]; // ImWchar[999]

            public Span<byte> undo_char
            {
                get
                {
                    fixed (StbUndoState* @this = &this)
                    {
                        var pointer = &@this->_undo_char[0];
                        var span = new Span<byte>(pointer, 999);
                        return span;
                    }
                }
            }

            [FieldOffset(3582)] // size = 2, padding = 0
            public short undo_point;

            [FieldOffset(3584)] // size = 2, padding = 2
            public short redo_point;

            [FieldOffset(3588)] // size = 4, padding = 0
            public int undo_char_point;

            [FieldOffset(3592)] // size = 4, padding = 0
            public int redo_char_point;
        }

        // Struct @ cimgui.h:2393:35
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct ImGuiTableCellData
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public uint BgColor;

            [FieldOffset(4)] // size = 1, padding = 3
            public ImGuiTableColumnIdx Column;
        }

        // Struct @ cimgui.h:1271:30
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct StbUndoRecord
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int where;

            [FieldOffset(4)] // size = 4, padding = 0
            public int insert_length;

            [FieldOffset(8)] // size = 4, padding = 0
            public int delete_length;

            [FieldOffset(12)] // size = 4, padding = 0
            public int char_storage;
        }

        // Typedef @ cimgui.h:167:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiWindowFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiWindowFlags data) => data.Data;
            public static implicit operator ImGuiWindowFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:170:22
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiID
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public uint Data;

            public static implicit operator uint(ImGuiID data) => data.Data;
            public static implicit operator ImGuiID(uint data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:153:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiFocusedFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiFocusedFlags data) => data.Data;
            public static implicit operator ImGuiFocusedFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:154:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiHoveredFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiHoveredFlags data) => data.Data;
            public static implicit operator ImGuiHoveredFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:134:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiCond
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiCond data) => data.Data;
            public static implicit operator ImGuiCond(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:133:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiCol
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiCol data) => data.Data;
            public static implicit operator ImGuiCol(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:142:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiStyleVar
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiStyleVar data) => data.Data;
            public static implicit operator ImGuiStyleVar(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:148:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiButtonFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiButtonFlags data) => data.Data;
            public static implicit operator ImGuiButtonFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:136:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiDir
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiDir data) => data.Data;
            public static implicit operator ImGuiDir(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:168:15
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ImTextureID
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public void* Data;

            public static implicit operator void*(ImTextureID data) => data.Data;
            public static implicit operator ImTextureID(void* data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:151:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiComboFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiComboFlags data) => data.Data;
            public static implicit operator ImGuiComboFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:159:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiSliderFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiSliderFlags data) => data.Data;
            public static implicit operator ImGuiSliderFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:135:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiDataType
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiDataType data) => data.Data;
            public static implicit operator ImGuiDataType(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:155:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiInputTextFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiInputTextFlags data) => data.Data;
            public static implicit operator ImGuiInputTextFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:149:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiColorEditFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiColorEditFlags data) => data.Data;
            public static implicit operator ImGuiColorEditFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:165:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiTreeNodeFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiTreeNodeFlags data) => data.Data;
            public static implicit operator ImGuiTreeNodeFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:158:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiSelectableFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiSelectableFlags data) => data.Data;
            public static implicit operator ImGuiSelectableFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:157:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiPopupFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiPopupFlags data) => data.Data;
            public static implicit operator ImGuiPopupFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:162:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiTableFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiTableFlags data) => data.Data;
            public static implicit operator ImGuiTableFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:164:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiTableRowFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiTableRowFlags data) => data.Data;
            public static implicit operator ImGuiTableRowFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:163:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiTableColumnFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiTableColumnFlags data) => data.Data;
            public static implicit operator ImGuiTableColumnFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:143:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiTableBgTarget
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiTableBgTarget data) => data.Data;
            public static implicit operator ImGuiTableBgTarget(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:160:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiTabBarFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiTabBarFlags data) => data.Data;
            public static implicit operator ImGuiTabBarFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:161:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiTabItemFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiTabItemFlags data) => data.Data;
            public static implicit operator ImGuiTabItemFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:152:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiDragDropFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiDragDropFlags data) => data.Data;
            public static implicit operator ImGuiDragDropFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:139:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiMouseButton
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiMouseButton data) => data.Data;
            public static implicit operator ImGuiMouseButton(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:137:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiKey
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiKey data) => data.Data;
            public static implicit operator ImGuiKey(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:140:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiMouseCursor
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiMouseCursor data) => data.Data;
            public static implicit operator ImGuiMouseCursor(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:144:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImDrawFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImDrawFlags data) => data.Data;
            public static implicit operator ImDrawFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:169:24
        [StructLayout(LayoutKind.Explicit, Size = 2, Pack = 2)]
        public struct ImDrawIdx
        {
            [FieldOffset(0)] // size = 2, padding = 0
            public ushort Data;

            public static implicit operator ushort(ImDrawIdx data) => data.Data;
            public static implicit operator ImDrawIdx(ushort data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:1311:15
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ImFileHandle
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public nint Data;

            public static implicit operator nint(ImFileHandle data) => data.Data;
            public static implicit operator ImFileHandle(nint data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:1265:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiScrollFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiScrollFlags data) => data.Data;
            public static implicit operator ImGuiScrollFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:1258:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiItemStatusFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiItemStatusFlags data) => data.Data;
            public static implicit operator ImGuiItemStatusFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:1257:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiItemFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiItemFlags data) => data.Data;
            public static implicit operator ImGuiItemFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:1268:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiTooltipFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiTooltipFlags data) => data.Data;
            public static implicit operator ImGuiTooltipFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:1262:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiNavMoveFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiNavMoveFlags data) => data.Data;
            public static implicit operator ImGuiNavMoveFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:138:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiNavInput
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiNavInput data) => data.Data;
            public static implicit operator ImGuiNavInput(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:1261:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiNavDirSourceFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiNavDirSourceFlags data) => data.Data;
            public static implicit operator ImGuiNavDirSourceFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:156:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiKeyModFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiKeyModFlags data) => data.Data;
            public static implicit operator ImGuiKeyModFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:1259:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiOldColumnFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiOldColumnFlags data) => data.Data;
            public static implicit operator ImGuiOldColumnFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:141:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiSortDirection
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiSortDirection data) => data.Data;
            public static implicit operator ImGuiSortDirection(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:1260:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiNavHighlightFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiNavHighlightFlags data) => data.Data;
            public static implicit operator ImGuiNavHighlightFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:1267:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiTextFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiTextFlags data) => data.Data;
            public static implicit operator ImGuiTextFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:1266:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiSeparatorFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiSeparatorFlags data) => data.Data;
            public static implicit operator ImGuiSeparatorFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:1632:73
        [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
        public struct ImBitArrayForNamedKeys
        {
            [FieldOffset(0)] // size = 20, padding = 0
            public ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN Data;

            public static implicit operator ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN(ImBitArrayForNamedKeys data) => data.Data;
            public static implicit operator ImBitArrayForNamedKeys(ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:1256:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiActivateFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiActivateFlags data) => data.Data;
            public static implicit operator ImGuiActivateFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:146:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImFontAtlasFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImFontAtlasFlags data) => data.Data;
            public static implicit operator ImFontAtlasFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:150:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiConfigFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiConfigFlags data) => data.Data;
            public static implicit operator ImGuiConfigFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:147:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiBackendFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiBackendFlags data) => data.Data;
            public static implicit operator ImGuiBackendFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:145:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImDrawListFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImDrawListFlags data) => data.Data;
            public static implicit operator ImDrawListFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:166:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiViewportFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiViewportFlags data) => data.Data;
            public static implicit operator ImGuiViewportFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:1255:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiLayoutType
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiLayoutType data) => data.Data;
            public static implicit operator ImGuiLayoutType(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:1264:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiNextWindowDataFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiNextWindowDataFlags data) => data.Data;
            public static implicit operator ImGuiNextWindowDataFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:1263:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImGuiNextItemDataFlags
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImGuiNextItemDataFlags data) => data.Data;
            public static implicit operator ImGuiNextItemDataFlags(int data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:2347:14
        [StructLayout(LayoutKind.Explicit, Size = 1, Pack = 1)]
        public struct ImGuiTableColumnIdx
        {
            [FieldOffset(0)] // size = 1, padding = 0
            public sbyte Data;

            public static implicit operator sbyte(ImGuiTableColumnIdx data) => data.Data;
            public static implicit operator ImGuiTableColumnIdx(sbyte data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:2348:14
        [StructLayout(LayoutKind.Explicit, Size = 1, Pack = 1)]
        public struct ImGuiTableDrawChannelIdx
        {
            [FieldOffset(0)] // size = 1, padding = 0
            public byte Data;

            public static implicit operator byte(ImGuiTableDrawChannelIdx data) => data.Data;
            public static implicit operator ImGuiTableDrawChannelIdx(byte data) => new() { Data = data };
        }

        // Typedef @ cimgui.h:1331:13
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ImPoolIdx
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ImPoolIdx data) => data.Data;
            public static implicit operator ImPoolIdx(int data) => new() { Data = data };
        }

        // Enum @ cimgui.h:1888:288
        public enum ImGuiContextHookType : int
        {
            ImGuiContextHookType_NewFramePre = 0,
            ImGuiContextHookType_NewFramePost = 1,
            ImGuiContextHookType_EndFramePre = 2,
            ImGuiContextHookType_EndFramePost = 3,
            ImGuiContextHookType_RenderPre = 4,
            ImGuiContextHookType_RenderPost = 5,
            ImGuiContextHookType_Shutdown = 6,
            ImGuiContextHookType_PendingRemoval_ = 7
        }

        // Enum @ cimgui.h:1444:2
        public enum ImGuiLogType : int
        {
            ImGuiLogType_None = 0,
            ImGuiLogType_TTY = 1,
            ImGuiLogType_File = 2,
            ImGuiLogType_Buffer = 3,
            ImGuiLogType_Clipboard = 4
        }

        // Enum @ cimgui.h:1458:2
        public enum ImGuiPopupPositionPolicy : int
        {
            ImGuiPopupPositionPolicy_Default = 0,
            ImGuiPopupPositionPolicy_ComboBox = 1,
            ImGuiPopupPositionPolicy_Tooltip = 2
        }

        // Enum @ cimgui.h:1705:2
        public enum ImGuiInputReadMode : int
        {
            ImGuiInputReadMode_Down = 0,
            ImGuiInputReadMode_Pressed = 1,
            ImGuiInputReadMode_Released = 2,
            ImGuiInputReadMode_Repeat = 3,
            ImGuiInputReadMode_RepeatSlow = 4,
            ImGuiInputReadMode_RepeatFast = 5
        }

        // Enum @ cimgui.h:1778:2
        public enum ImGuiNavLayer : int
        {
            ImGuiNavLayer_Main = 0,
            ImGuiNavLayer_Menu = 1,
            ImGuiNavLayer_COUNT = 2
        }

        // Enum @ cimgui.h:1449:2
        public enum ImGuiAxis : int
        {
            ImGuiAxis_None = -1,
            ImGuiAxis_X = 0,
            ImGuiAxis_Y = 1
        }

        // Enum @ cimgui.h:1453:2
        public enum ImGuiPlotType : int
        {
            ImGuiPlotType_Lines = 0,
            ImGuiPlotType_Histogram = 1
        }

        // Enum @ cimgui.h:1657:2
        public enum ImGuiInputSource : int
        {
            ImGuiInputSource_None = 0,
            ImGuiInputSource_Mouse = 1,
            ImGuiInputSource_Keyboard = 2,
            ImGuiInputSource_Gamepad = 3,
            ImGuiInputSource_Clipboard = 4,
            ImGuiInputSource_Nav = 5,
            ImGuiInputSource_COUNT = 6
        }

        // Enum @ cimgui.h:1648:2
        public enum ImGuiInputEventType : int
        {
            ImGuiInputEventType_None = 0,
            ImGuiInputEventType_MousePos = 1,
            ImGuiInputEventType_MouseWheel = 2,
            ImGuiInputEventType_MouseButton = 3,
            ImGuiInputEventType_Key = 4,
            ImGuiInputEventType_Char = 5,
            ImGuiInputEventType_Focus = 6,
            ImGuiInputEventType_COUNT = 7
        }

        // Pseudo enum 'ImGuiWindowFlags_' @ cimgui.h:196:9
        public const int ImGuiWindowFlags_None = 0;
        public const int ImGuiWindowFlags_NoTitleBar = 1;
        public const int ImGuiWindowFlags_NoResize = 2;
        public const int ImGuiWindowFlags_NoMove = 4;
        public const int ImGuiWindowFlags_NoScrollbar = 8;
        public const int ImGuiWindowFlags_NoScrollWithMouse = 16;
        public const int ImGuiWindowFlags_NoCollapse = 32;
        public const int ImGuiWindowFlags_AlwaysAutoResize = 64;
        public const int ImGuiWindowFlags_NoBackground = 128;
        public const int ImGuiWindowFlags_NoSavedSettings = 256;
        public const int ImGuiWindowFlags_NoMouseInputs = 512;
        public const int ImGuiWindowFlags_MenuBar = 1024;
        public const int ImGuiWindowFlags_HorizontalScrollbar = 2048;
        public const int ImGuiWindowFlags_NoFocusOnAppearing = 4096;
        public const int ImGuiWindowFlags_NoBringToFrontOnFocus = 8192;
        public const int ImGuiWindowFlags_AlwaysVerticalScrollbar = 16384;
        public const int ImGuiWindowFlags_AlwaysHorizontalScrollbar = 32768;
        public const int ImGuiWindowFlags_AlwaysUseWindowPadding = 65536;
        public const int ImGuiWindowFlags_NoNavInputs = 262144;
        public const int ImGuiWindowFlags_NoNavFocus = 524288;
        public const int ImGuiWindowFlags_UnsavedDocument = 1048576;
        public const int ImGuiWindowFlags_NoNav = 786432;
        public const int ImGuiWindowFlags_NoDecoration = 43;
        public const int ImGuiWindowFlags_NoInputs = 786944;
        public const int ImGuiWindowFlags_NavFlattened = 8388608;
        public const int ImGuiWindowFlags_ChildWindow = 16777216;
        public const int ImGuiWindowFlags_Tooltip = 33554432;
        public const int ImGuiWindowFlags_Popup = 67108864;
        public const int ImGuiWindowFlags_Modal = 134217728;
        public const int ImGuiWindowFlags_ChildMenu = 268435456;

        // Pseudo enum 'ImGuiInputTextFlags_' @ cimgui.h:228:9
        public const int ImGuiInputTextFlags_None = 0;
        public const int ImGuiInputTextFlags_CharsDecimal = 1;
        public const int ImGuiInputTextFlags_CharsHexadecimal = 2;
        public const int ImGuiInputTextFlags_CharsUppercase = 4;
        public const int ImGuiInputTextFlags_CharsNoBlank = 8;
        public const int ImGuiInputTextFlags_AutoSelectAll = 16;
        public const int ImGuiInputTextFlags_EnterReturnsTrue = 32;
        public const int ImGuiInputTextFlags_CallbackCompletion = 64;
        public const int ImGuiInputTextFlags_CallbackHistory = 128;
        public const int ImGuiInputTextFlags_CallbackAlways = 256;
        public const int ImGuiInputTextFlags_CallbackCharFilter = 512;
        public const int ImGuiInputTextFlags_AllowTabInput = 1024;
        public const int ImGuiInputTextFlags_CtrlEnterForNewLine = 2048;
        public const int ImGuiInputTextFlags_NoHorizontalScroll = 4096;
        public const int ImGuiInputTextFlags_AlwaysOverwrite = 8192;
        public const int ImGuiInputTextFlags_ReadOnly = 16384;
        public const int ImGuiInputTextFlags_Password = 32768;
        public const int ImGuiInputTextFlags_NoUndoRedo = 65536;
        public const int ImGuiInputTextFlags_CharsScientific = 131072;
        public const int ImGuiInputTextFlags_CallbackResize = 262144;
        public const int ImGuiInputTextFlags_CallbackEdit = 524288;

        // Pseudo enum 'ImGuiTreeNodeFlags_' @ cimgui.h:251:9
        public const int ImGuiTreeNodeFlags_None = 0;
        public const int ImGuiTreeNodeFlags_Selected = 1;
        public const int ImGuiTreeNodeFlags_Framed = 2;
        public const int ImGuiTreeNodeFlags_AllowItemOverlap = 4;
        public const int ImGuiTreeNodeFlags_NoTreePushOnOpen = 8;
        public const int ImGuiTreeNodeFlags_NoAutoOpenOnLog = 16;
        public const int ImGuiTreeNodeFlags_DefaultOpen = 32;
        public const int ImGuiTreeNodeFlags_OpenOnDoubleClick = 64;
        public const int ImGuiTreeNodeFlags_OpenOnArrow = 128;
        public const int ImGuiTreeNodeFlags_Leaf = 256;
        public const int ImGuiTreeNodeFlags_Bullet = 512;
        public const int ImGuiTreeNodeFlags_FramePadding = 1024;
        public const int ImGuiTreeNodeFlags_SpanAvailWidth = 2048;
        public const int ImGuiTreeNodeFlags_SpanFullWidth = 4096;
        public const int ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 8192;
        public const int ImGuiTreeNodeFlags_CollapsingHeader = 26;

        // Pseudo enum 'ImGuiPopupFlags_' @ cimgui.h:269:9
        public const int ImGuiPopupFlags_None = 0;
        public const int ImGuiPopupFlags_MouseButtonLeft = 0;
        public const int ImGuiPopupFlags_MouseButtonRight = 1;
        public const int ImGuiPopupFlags_MouseButtonMiddle = 2;
        public const int ImGuiPopupFlags_MouseButtonMask_ = 31;
        public const int ImGuiPopupFlags_MouseButtonDefault_ = 1;
        public const int ImGuiPopupFlags_NoOpenOverExistingPopup = 32;
        public const int ImGuiPopupFlags_NoOpenOverItems = 64;
        public const int ImGuiPopupFlags_AnyPopupId = 128;
        public const int ImGuiPopupFlags_AnyPopupLevel = 256;
        public const int ImGuiPopupFlags_AnyPopup = 384;

        // Pseudo enum 'ImGuiSelectableFlags_' @ cimgui.h:282:9
        public const int ImGuiSelectableFlags_None = 0;
        public const int ImGuiSelectableFlags_DontClosePopups = 1;
        public const int ImGuiSelectableFlags_SpanAllColumns = 2;
        public const int ImGuiSelectableFlags_AllowDoubleClick = 4;
        public const int ImGuiSelectableFlags_Disabled = 8;
        public const int ImGuiSelectableFlags_AllowItemOverlap = 16;

        // Pseudo enum 'ImGuiComboFlags_' @ cimgui.h:290:9
        public const int ImGuiComboFlags_None = 0;
        public const int ImGuiComboFlags_PopupAlignLeft = 1;
        public const int ImGuiComboFlags_HeightSmall = 2;
        public const int ImGuiComboFlags_HeightRegular = 4;
        public const int ImGuiComboFlags_HeightLarge = 8;
        public const int ImGuiComboFlags_HeightLargest = 16;
        public const int ImGuiComboFlags_NoArrowButton = 32;
        public const int ImGuiComboFlags_NoPreview = 64;
        public const int ImGuiComboFlags_HeightMask_ = 30;

        // Pseudo enum 'ImGuiTabBarFlags_' @ cimgui.h:301:9
        public const int ImGuiTabBarFlags_None = 0;
        public const int ImGuiTabBarFlags_Reorderable = 1;
        public const int ImGuiTabBarFlags_AutoSelectNewTabs = 2;
        public const int ImGuiTabBarFlags_TabListPopupButton = 4;
        public const int ImGuiTabBarFlags_NoCloseWithMiddleMouseButton = 8;
        public const int ImGuiTabBarFlags_NoTabListScrollingButtons = 16;
        public const int ImGuiTabBarFlags_NoTooltip = 32;
        public const int ImGuiTabBarFlags_FittingPolicyResizeDown = 64;
        public const int ImGuiTabBarFlags_FittingPolicyScroll = 128;
        public const int ImGuiTabBarFlags_FittingPolicyMask_ = 192;
        public const int ImGuiTabBarFlags_FittingPolicyDefault_ = 64;

        // Pseudo enum 'ImGuiTabItemFlags_' @ cimgui.h:314:9
        public const int ImGuiTabItemFlags_None = 0;
        public const int ImGuiTabItemFlags_UnsavedDocument = 1;
        public const int ImGuiTabItemFlags_SetSelected = 2;
        public const int ImGuiTabItemFlags_NoCloseWithMiddleMouseButton = 4;
        public const int ImGuiTabItemFlags_NoPushId = 8;
        public const int ImGuiTabItemFlags_NoTooltip = 16;
        public const int ImGuiTabItemFlags_NoReorder = 32;
        public const int ImGuiTabItemFlags_Leading = 64;
        public const int ImGuiTabItemFlags_Trailing = 128;

        // Pseudo enum 'ImGuiTableFlags_' @ cimgui.h:325:9
        public const int ImGuiTableFlags_None = 0;
        public const int ImGuiTableFlags_Resizable = 1;
        public const int ImGuiTableFlags_Reorderable = 2;
        public const int ImGuiTableFlags_Hideable = 4;
        public const int ImGuiTableFlags_Sortable = 8;
        public const int ImGuiTableFlags_NoSavedSettings = 16;
        public const int ImGuiTableFlags_ContextMenuInBody = 32;
        public const int ImGuiTableFlags_RowBg = 64;
        public const int ImGuiTableFlags_BordersInnerH = 128;
        public const int ImGuiTableFlags_BordersOuterH = 256;
        public const int ImGuiTableFlags_BordersInnerV = 512;
        public const int ImGuiTableFlags_BordersOuterV = 1024;
        public const int ImGuiTableFlags_BordersH = 384;
        public const int ImGuiTableFlags_BordersV = 1536;
        public const int ImGuiTableFlags_BordersInner = 640;
        public const int ImGuiTableFlags_BordersOuter = 1280;
        public const int ImGuiTableFlags_Borders = 1920;
        public const int ImGuiTableFlags_NoBordersInBody = 2048;
        public const int ImGuiTableFlags_NoBordersInBodyUntilResize = 4096;
        public const int ImGuiTableFlags_SizingFixedFit = 8192;
        public const int ImGuiTableFlags_SizingFixedSame = 16384;
        public const int ImGuiTableFlags_SizingStretchProp = 24576;
        public const int ImGuiTableFlags_SizingStretchSame = 32768;
        public const int ImGuiTableFlags_NoHostExtendX = 65536;
        public const int ImGuiTableFlags_NoHostExtendY = 131072;
        public const int ImGuiTableFlags_NoKeepColumnsVisible = 262144;
        public const int ImGuiTableFlags_PreciseWidths = 524288;
        public const int ImGuiTableFlags_NoClip = 1048576;
        public const int ImGuiTableFlags_PadOuterX = 2097152;
        public const int ImGuiTableFlags_NoPadOuterX = 4194304;
        public const int ImGuiTableFlags_NoPadInnerX = 8388608;
        public const int ImGuiTableFlags_ScrollX = 16777216;
        public const int ImGuiTableFlags_ScrollY = 33554432;
        public const int ImGuiTableFlags_SortMulti = 67108864;
        public const int ImGuiTableFlags_SortTristate = 134217728;
        public const int ImGuiTableFlags_SizingMask_ = 57344;

        // Pseudo enum 'ImGuiTableColumnFlags_' @ cimgui.h:363:9
        public const int ImGuiTableColumnFlags_None = 0;
        public const int ImGuiTableColumnFlags_Disabled = 1;
        public const int ImGuiTableColumnFlags_DefaultHide = 2;
        public const int ImGuiTableColumnFlags_DefaultSort = 4;
        public const int ImGuiTableColumnFlags_WidthStretch = 8;
        public const int ImGuiTableColumnFlags_WidthFixed = 16;
        public const int ImGuiTableColumnFlags_NoResize = 32;
        public const int ImGuiTableColumnFlags_NoReorder = 64;
        public const int ImGuiTableColumnFlags_NoHide = 128;
        public const int ImGuiTableColumnFlags_NoClip = 256;
        public const int ImGuiTableColumnFlags_NoSort = 512;
        public const int ImGuiTableColumnFlags_NoSortAscending = 1024;
        public const int ImGuiTableColumnFlags_NoSortDescending = 2048;
        public const int ImGuiTableColumnFlags_NoHeaderLabel = 4096;
        public const int ImGuiTableColumnFlags_NoHeaderWidth = 8192;
        public const int ImGuiTableColumnFlags_PreferSortAscending = 16384;
        public const int ImGuiTableColumnFlags_PreferSortDescending = 32768;
        public const int ImGuiTableColumnFlags_IndentEnable = 65536;
        public const int ImGuiTableColumnFlags_IndentDisable = 131072;
        public const int ImGuiTableColumnFlags_IsEnabled = 16777216;
        public const int ImGuiTableColumnFlags_IsVisible = 33554432;
        public const int ImGuiTableColumnFlags_IsSorted = 67108864;
        public const int ImGuiTableColumnFlags_IsHovered = 134217728;
        public const int ImGuiTableColumnFlags_WidthMask_ = 24;
        public const int ImGuiTableColumnFlags_IndentMask_ = 196608;
        public const int ImGuiTableColumnFlags_StatusMask_ = 251658240;
        public const int ImGuiTableColumnFlags_NoDirectResize_ = 1073741824;

        // Pseudo enum 'ImGuiTableRowFlags_' @ cimgui.h:392:9
        public const int ImGuiTableRowFlags_None = 0;
        public const int ImGuiTableRowFlags_Headers = 1;

        // Pseudo enum 'ImGuiTableBgTarget_' @ cimgui.h:396:9
        public const int ImGuiTableBgTarget_None = 0;
        public const int ImGuiTableBgTarget_RowBg0 = 1;
        public const int ImGuiTableBgTarget_RowBg1 = 2;
        public const int ImGuiTableBgTarget_CellBg = 3;

        // Pseudo enum 'ImGuiFocusedFlags_' @ cimgui.h:402:9
        public const int ImGuiFocusedFlags_None = 0;
        public const int ImGuiFocusedFlags_ChildWindows = 1;
        public const int ImGuiFocusedFlags_RootWindow = 2;
        public const int ImGuiFocusedFlags_AnyWindow = 4;
        public const int ImGuiFocusedFlags_NoPopupHierarchy = 8;
        public const int ImGuiFocusedFlags_RootAndChildWindows = 3;

        // Pseudo enum 'ImGuiHoveredFlags_' @ cimgui.h:410:9
        public const int ImGuiHoveredFlags_None = 0;
        public const int ImGuiHoveredFlags_ChildWindows = 1;
        public const int ImGuiHoveredFlags_RootWindow = 2;
        public const int ImGuiHoveredFlags_AnyWindow = 4;
        public const int ImGuiHoveredFlags_NoPopupHierarchy = 8;
        public const int ImGuiHoveredFlags_AllowWhenBlockedByPopup = 32;
        public const int ImGuiHoveredFlags_AllowWhenBlockedByActiveItem = 128;
        public const int ImGuiHoveredFlags_AllowWhenOverlapped = 256;
        public const int ImGuiHoveredFlags_AllowWhenDisabled = 512;
        public const int ImGuiHoveredFlags_RectOnly = 416;
        public const int ImGuiHoveredFlags_RootAndChildWindows = 3;

        // Pseudo enum 'ImGuiDragDropFlags_' @ cimgui.h:423:9
        public const int ImGuiDragDropFlags_None = 0;
        public const int ImGuiDragDropFlags_SourceNoPreviewTooltip = 1;
        public const int ImGuiDragDropFlags_SourceNoDisableHover = 2;
        public const int ImGuiDragDropFlags_SourceNoHoldToOpenOthers = 4;
        public const int ImGuiDragDropFlags_SourceAllowNullID = 8;
        public const int ImGuiDragDropFlags_SourceExtern = 16;
        public const int ImGuiDragDropFlags_SourceAutoExpirePayload = 32;
        public const int ImGuiDragDropFlags_AcceptBeforeDelivery = 1024;
        public const int ImGuiDragDropFlags_AcceptNoDrawDefaultRect = 2048;
        public const int ImGuiDragDropFlags_AcceptNoPreviewTooltip = 4096;
        public const int ImGuiDragDropFlags_AcceptPeekOnly = 3072;

        // Pseudo enum 'ImGuiDataType_' @ cimgui.h:436:9
        public const int ImGuiDataType_S8 = 0;
        public const int ImGuiDataType_U8 = 1;
        public const int ImGuiDataType_S16 = 2;
        public const int ImGuiDataType_U16 = 3;
        public const int ImGuiDataType_S32 = 4;
        public const int ImGuiDataType_U32 = 5;
        public const int ImGuiDataType_S64 = 6;
        public const int ImGuiDataType_U64 = 7;
        public const int ImGuiDataType_Float = 8;
        public const int ImGuiDataType_Double = 9;
        public const int ImGuiDataType_COUNT = 10;

        // Pseudo enum 'ImGuiDir_' @ cimgui.h:449:9
        public const int ImGuiDir_None = -1;
        public const int ImGuiDir_Left = 0;
        public const int ImGuiDir_Right = 1;
        public const int ImGuiDir_Up = 2;
        public const int ImGuiDir_Down = 3;
        public const int ImGuiDir_COUNT = 4;

        // Pseudo enum 'ImGuiSortDirection_' @ cimgui.h:457:9
        public const int ImGuiSortDirection_None = 0;
        public const int ImGuiSortDirection_Ascending = 1;
        public const int ImGuiSortDirection_Descending = 2;

        // Pseudo enum 'ImGuiKey_' @ cimgui.h:462:9
        public const int ImGuiKey_None = 0;
        public const int ImGuiKey_Tab = 512;
        public const int ImGuiKey_LeftArrow = 513;
        public const int ImGuiKey_RightArrow = 514;
        public const int ImGuiKey_UpArrow = 515;
        public const int ImGuiKey_DownArrow = 516;
        public const int ImGuiKey_PageUp = 517;
        public const int ImGuiKey_PageDown = 518;
        public const int ImGuiKey_Home = 519;
        public const int ImGuiKey_End = 520;
        public const int ImGuiKey_Insert = 521;
        public const int ImGuiKey_Delete = 522;
        public const int ImGuiKey_Backspace = 523;
        public const int ImGuiKey_Space = 524;
        public const int ImGuiKey_Enter = 525;
        public const int ImGuiKey_Escape = 526;
        public const int ImGuiKey_LeftCtrl = 527;
        public const int ImGuiKey_LeftShift = 528;
        public const int ImGuiKey_LeftAlt = 529;
        public const int ImGuiKey_LeftSuper = 530;
        public const int ImGuiKey_RightCtrl = 531;
        public const int ImGuiKey_RightShift = 532;
        public const int ImGuiKey_RightAlt = 533;
        public const int ImGuiKey_RightSuper = 534;
        public const int ImGuiKey_Menu = 535;
        public const int ImGuiKey_0 = 536;
        public const int ImGuiKey_1 = 537;
        public const int ImGuiKey_2 = 538;
        public const int ImGuiKey_3 = 539;
        public const int ImGuiKey_4 = 540;
        public const int ImGuiKey_5 = 541;
        public const int ImGuiKey_6 = 542;
        public const int ImGuiKey_7 = 543;
        public const int ImGuiKey_8 = 544;
        public const int ImGuiKey_9 = 545;
        public const int ImGuiKey_A = 546;
        public const int ImGuiKey_B = 547;
        public const int ImGuiKey_C = 548;
        public const int ImGuiKey_D = 549;
        public const int ImGuiKey_E = 550;
        public const int ImGuiKey_F = 551;
        public const int ImGuiKey_G = 552;
        public const int ImGuiKey_H = 553;
        public const int ImGuiKey_I = 554;
        public const int ImGuiKey_J = 555;
        public const int ImGuiKey_K = 556;
        public const int ImGuiKey_L = 557;
        public const int ImGuiKey_M = 558;
        public const int ImGuiKey_N = 559;
        public const int ImGuiKey_O = 560;
        public const int ImGuiKey_P = 561;
        public const int ImGuiKey_Q = 562;
        public const int ImGuiKey_R = 563;
        public const int ImGuiKey_S = 564;
        public const int ImGuiKey_T = 565;
        public const int ImGuiKey_U = 566;
        public const int ImGuiKey_V = 567;
        public const int ImGuiKey_W = 568;
        public const int ImGuiKey_X = 569;
        public const int ImGuiKey_Y = 570;
        public const int ImGuiKey_Z = 571;
        public const int ImGuiKey_F1 = 572;
        public const int ImGuiKey_F2 = 573;
        public const int ImGuiKey_F3 = 574;
        public const int ImGuiKey_F4 = 575;
        public const int ImGuiKey_F5 = 576;
        public const int ImGuiKey_F6 = 577;
        public const int ImGuiKey_F7 = 578;
        public const int ImGuiKey_F8 = 579;
        public const int ImGuiKey_F9 = 580;
        public const int ImGuiKey_F10 = 581;
        public const int ImGuiKey_F11 = 582;
        public const int ImGuiKey_F12 = 583;
        public const int ImGuiKey_Apostrophe = 584;
        public const int ImGuiKey_Comma = 585;
        public const int ImGuiKey_Minus = 586;
        public const int ImGuiKey_Period = 587;
        public const int ImGuiKey_Slash = 588;
        public const int ImGuiKey_Semicolon = 589;
        public const int ImGuiKey_Equal = 590;
        public const int ImGuiKey_LeftBracket = 591;
        public const int ImGuiKey_Backslash = 592;
        public const int ImGuiKey_RightBracket = 593;
        public const int ImGuiKey_GraveAccent = 594;
        public const int ImGuiKey_CapsLock = 595;
        public const int ImGuiKey_ScrollLock = 596;
        public const int ImGuiKey_NumLock = 597;
        public const int ImGuiKey_PrintScreen = 598;
        public const int ImGuiKey_Pause = 599;
        public const int ImGuiKey_Keypad0 = 600;
        public const int ImGuiKey_Keypad1 = 601;
        public const int ImGuiKey_Keypad2 = 602;
        public const int ImGuiKey_Keypad3 = 603;
        public const int ImGuiKey_Keypad4 = 604;
        public const int ImGuiKey_Keypad5 = 605;
        public const int ImGuiKey_Keypad6 = 606;
        public const int ImGuiKey_Keypad7 = 607;
        public const int ImGuiKey_Keypad8 = 608;
        public const int ImGuiKey_Keypad9 = 609;
        public const int ImGuiKey_KeypadDecimal = 610;
        public const int ImGuiKey_KeypadDivide = 611;
        public const int ImGuiKey_KeypadMultiply = 612;
        public const int ImGuiKey_KeypadSubtract = 613;
        public const int ImGuiKey_KeypadAdd = 614;
        public const int ImGuiKey_KeypadEnter = 615;
        public const int ImGuiKey_KeypadEqual = 616;
        public const int ImGuiKey_GamepadStart = 617;
        public const int ImGuiKey_GamepadBack = 618;
        public const int ImGuiKey_GamepadFaceUp = 619;
        public const int ImGuiKey_GamepadFaceDown = 620;
        public const int ImGuiKey_GamepadFaceLeft = 621;
        public const int ImGuiKey_GamepadFaceRight = 622;
        public const int ImGuiKey_GamepadDpadUp = 623;
        public const int ImGuiKey_GamepadDpadDown = 624;
        public const int ImGuiKey_GamepadDpadLeft = 625;
        public const int ImGuiKey_GamepadDpadRight = 626;
        public const int ImGuiKey_GamepadL1 = 627;
        public const int ImGuiKey_GamepadR1 = 628;
        public const int ImGuiKey_GamepadL2 = 629;
        public const int ImGuiKey_GamepadR2 = 630;
        public const int ImGuiKey_GamepadL3 = 631;
        public const int ImGuiKey_GamepadR3 = 632;
        public const int ImGuiKey_GamepadLStickUp = 633;
        public const int ImGuiKey_GamepadLStickDown = 634;
        public const int ImGuiKey_GamepadLStickLeft = 635;
        public const int ImGuiKey_GamepadLStickRight = 636;
        public const int ImGuiKey_GamepadRStickUp = 637;
        public const int ImGuiKey_GamepadRStickDown = 638;
        public const int ImGuiKey_GamepadRStickLeft = 639;
        public const int ImGuiKey_GamepadRStickRight = 640;
        public const int ImGuiKey_ModCtrl = 641;
        public const int ImGuiKey_ModShift = 642;
        public const int ImGuiKey_ModAlt = 643;
        public const int ImGuiKey_ModSuper = 644;
        public const int ImGuiKey_COUNT = 645;
        public const int ImGuiKey_NamedKey_BEGIN = 512;
        public const int ImGuiKey_NamedKey_END = 645;
        public const int ImGuiKey_NamedKey_COUNT = 133;
        public const int ImGuiKey_KeysData_SIZE = 645;
        public const int ImGuiKey_KeysData_OFFSET = 0;

        // Pseudo enum 'ImGuiKeyModFlags_' @ cimgui.h:548:9
        public const int ImGuiKeyModFlags_None = 0;
        public const int ImGuiKeyModFlags_Ctrl = 1;
        public const int ImGuiKeyModFlags_Shift = 2;
        public const int ImGuiKeyModFlags_Alt = 4;
        public const int ImGuiKeyModFlags_Super = 8;

        // Pseudo enum 'ImGuiNavInput_' @ cimgui.h:555:9
        public const int ImGuiNavInput_Activate = 0;
        public const int ImGuiNavInput_Cancel = 1;
        public const int ImGuiNavInput_Input = 2;
        public const int ImGuiNavInput_Menu = 3;
        public const int ImGuiNavInput_DpadLeft = 4;
        public const int ImGuiNavInput_DpadRight = 5;
        public const int ImGuiNavInput_DpadUp = 6;
        public const int ImGuiNavInput_DpadDown = 7;
        public const int ImGuiNavInput_LStickLeft = 8;
        public const int ImGuiNavInput_LStickRight = 9;
        public const int ImGuiNavInput_LStickUp = 10;
        public const int ImGuiNavInput_LStickDown = 11;
        public const int ImGuiNavInput_FocusPrev = 12;
        public const int ImGuiNavInput_FocusNext = 13;
        public const int ImGuiNavInput_TweakSlow = 14;
        public const int ImGuiNavInput_TweakFast = 15;
        public const int ImGuiNavInput_KeyLeft_ = 16;
        public const int ImGuiNavInput_KeyRight_ = 17;
        public const int ImGuiNavInput_KeyUp_ = 18;
        public const int ImGuiNavInput_KeyDown_ = 19;
        public const int ImGuiNavInput_COUNT = 20;

        // Pseudo enum 'ImGuiConfigFlags_' @ cimgui.h:578:9
        public const int ImGuiConfigFlags_None = 0;
        public const int ImGuiConfigFlags_NavEnableKeyboard = 1;
        public const int ImGuiConfigFlags_NavEnableGamepad = 2;
        public const int ImGuiConfigFlags_NavEnableSetMousePos = 4;
        public const int ImGuiConfigFlags_NavNoCaptureKeyboard = 8;
        public const int ImGuiConfigFlags_NoMouse = 16;
        public const int ImGuiConfigFlags_NoMouseCursorChange = 32;
        public const int ImGuiConfigFlags_IsSRGB = 1048576;
        public const int ImGuiConfigFlags_IsTouchScreen = 2097152;

        // Pseudo enum 'ImGuiBackendFlags_' @ cimgui.h:589:9
        public const int ImGuiBackendFlags_None = 0;
        public const int ImGuiBackendFlags_HasGamepad = 1;
        public const int ImGuiBackendFlags_HasMouseCursors = 2;
        public const int ImGuiBackendFlags_HasSetMousePos = 4;
        public const int ImGuiBackendFlags_RendererHasVtxOffset = 8;

        // Pseudo enum 'ImGuiCol_' @ cimgui.h:596:9
        public const int ImGuiCol_Text = 0;
        public const int ImGuiCol_TextDisabled = 1;
        public const int ImGuiCol_WindowBg = 2;
        public const int ImGuiCol_ChildBg = 3;
        public const int ImGuiCol_PopupBg = 4;
        public const int ImGuiCol_Border = 5;
        public const int ImGuiCol_BorderShadow = 6;
        public const int ImGuiCol_FrameBg = 7;
        public const int ImGuiCol_FrameBgHovered = 8;
        public const int ImGuiCol_FrameBgActive = 9;
        public const int ImGuiCol_TitleBg = 10;
        public const int ImGuiCol_TitleBgActive = 11;
        public const int ImGuiCol_TitleBgCollapsed = 12;
        public const int ImGuiCol_MenuBarBg = 13;
        public const int ImGuiCol_ScrollbarBg = 14;
        public const int ImGuiCol_ScrollbarGrab = 15;
        public const int ImGuiCol_ScrollbarGrabHovered = 16;
        public const int ImGuiCol_ScrollbarGrabActive = 17;
        public const int ImGuiCol_CheckMark = 18;
        public const int ImGuiCol_SliderGrab = 19;
        public const int ImGuiCol_SliderGrabActive = 20;
        public const int ImGuiCol_Button = 21;
        public const int ImGuiCol_ButtonHovered = 22;
        public const int ImGuiCol_ButtonActive = 23;
        public const int ImGuiCol_Header = 24;
        public const int ImGuiCol_HeaderHovered = 25;
        public const int ImGuiCol_HeaderActive = 26;
        public const int ImGuiCol_Separator = 27;
        public const int ImGuiCol_SeparatorHovered = 28;
        public const int ImGuiCol_SeparatorActive = 29;
        public const int ImGuiCol_ResizeGrip = 30;
        public const int ImGuiCol_ResizeGripHovered = 31;
        public const int ImGuiCol_ResizeGripActive = 32;
        public const int ImGuiCol_Tab = 33;
        public const int ImGuiCol_TabHovered = 34;
        public const int ImGuiCol_TabActive = 35;
        public const int ImGuiCol_TabUnfocused = 36;
        public const int ImGuiCol_TabUnfocusedActive = 37;
        public const int ImGuiCol_PlotLines = 38;
        public const int ImGuiCol_PlotLinesHovered = 39;
        public const int ImGuiCol_PlotHistogram = 40;
        public const int ImGuiCol_PlotHistogramHovered = 41;
        public const int ImGuiCol_TableHeaderBg = 42;
        public const int ImGuiCol_TableBorderStrong = 43;
        public const int ImGuiCol_TableBorderLight = 44;
        public const int ImGuiCol_TableRowBg = 45;
        public const int ImGuiCol_TableRowBgAlt = 46;
        public const int ImGuiCol_TextSelectedBg = 47;
        public const int ImGuiCol_DragDropTarget = 48;
        public const int ImGuiCol_NavHighlight = 49;
        public const int ImGuiCol_NavWindowingHighlight = 50;
        public const int ImGuiCol_NavWindowingDimBg = 51;
        public const int ImGuiCol_ModalWindowDimBg = 52;
        public const int ImGuiCol_COUNT = 53;

        // Pseudo enum 'ImGuiStyleVar_' @ cimgui.h:652:9
        public const int ImGuiStyleVar_Alpha = 0;
        public const int ImGuiStyleVar_DisabledAlpha = 1;
        public const int ImGuiStyleVar_WindowPadding = 2;
        public const int ImGuiStyleVar_WindowRounding = 3;
        public const int ImGuiStyleVar_WindowBorderSize = 4;
        public const int ImGuiStyleVar_WindowMinSize = 5;
        public const int ImGuiStyleVar_WindowTitleAlign = 6;
        public const int ImGuiStyleVar_ChildRounding = 7;
        public const int ImGuiStyleVar_ChildBorderSize = 8;
        public const int ImGuiStyleVar_PopupRounding = 9;
        public const int ImGuiStyleVar_PopupBorderSize = 10;
        public const int ImGuiStyleVar_FramePadding = 11;
        public const int ImGuiStyleVar_FrameRounding = 12;
        public const int ImGuiStyleVar_FrameBorderSize = 13;
        public const int ImGuiStyleVar_ItemSpacing = 14;
        public const int ImGuiStyleVar_ItemInnerSpacing = 15;
        public const int ImGuiStyleVar_IndentSpacing = 16;
        public const int ImGuiStyleVar_CellPadding = 17;
        public const int ImGuiStyleVar_ScrollbarSize = 18;
        public const int ImGuiStyleVar_ScrollbarRounding = 19;
        public const int ImGuiStyleVar_GrabMinSize = 20;
        public const int ImGuiStyleVar_GrabRounding = 21;
        public const int ImGuiStyleVar_TabRounding = 22;
        public const int ImGuiStyleVar_ButtonTextAlign = 23;
        public const int ImGuiStyleVar_SelectableTextAlign = 24;
        public const int ImGuiStyleVar_COUNT = 25;

        // Pseudo enum 'ImGuiButtonFlags_' @ cimgui.h:680:9
        public const int ImGuiButtonFlags_None = 0;
        public const int ImGuiButtonFlags_MouseButtonLeft = 1;
        public const int ImGuiButtonFlags_MouseButtonRight = 2;
        public const int ImGuiButtonFlags_MouseButtonMiddle = 4;
        public const int ImGuiButtonFlags_MouseButtonMask_ = 7;
        public const int ImGuiButtonFlags_MouseButtonDefault_ = 1;

        // Pseudo enum 'ImGuiColorEditFlags_' @ cimgui.h:688:9
        public const int ImGuiColorEditFlags_None = 0;
        public const int ImGuiColorEditFlags_NoAlpha = 2;
        public const int ImGuiColorEditFlags_NoPicker = 4;
        public const int ImGuiColorEditFlags_NoOptions = 8;
        public const int ImGuiColorEditFlags_NoSmallPreview = 16;
        public const int ImGuiColorEditFlags_NoInputs = 32;
        public const int ImGuiColorEditFlags_NoTooltip = 64;
        public const int ImGuiColorEditFlags_NoLabel = 128;
        public const int ImGuiColorEditFlags_NoSidePreview = 256;
        public const int ImGuiColorEditFlags_NoDragDrop = 512;
        public const int ImGuiColorEditFlags_NoBorder = 1024;
        public const int ImGuiColorEditFlags_AlphaBar = 65536;
        public const int ImGuiColorEditFlags_AlphaPreview = 131072;
        public const int ImGuiColorEditFlags_AlphaPreviewHalf = 262144;
        public const int ImGuiColorEditFlags_HDR = 524288;
        public const int ImGuiColorEditFlags_DisplayRGB = 1048576;
        public const int ImGuiColorEditFlags_DisplayHSV = 2097152;
        public const int ImGuiColorEditFlags_DisplayHex = 4194304;
        public const int ImGuiColorEditFlags_Uint8 = 8388608;
        public const int ImGuiColorEditFlags_Float = 16777216;
        public const int ImGuiColorEditFlags_PickerHueBar = 33554432;
        public const int ImGuiColorEditFlags_PickerHueWheel = 67108864;
        public const int ImGuiColorEditFlags_InputRGB = 134217728;
        public const int ImGuiColorEditFlags_InputHSV = 268435456;
        public const int ImGuiColorEditFlags_DefaultOptions_ = 177209344;
        public const int ImGuiColorEditFlags_DisplayMask_ = 7340032;
        public const int ImGuiColorEditFlags_DataTypeMask_ = 25165824;
        public const int ImGuiColorEditFlags_PickerMask_ = 100663296;
        public const int ImGuiColorEditFlags_InputMask_ = 402653184;

        // Pseudo enum 'ImGuiSliderFlags_' @ cimgui.h:719:9
        public const int ImGuiSliderFlags_None = 0;
        public const int ImGuiSliderFlags_AlwaysClamp = 16;
        public const int ImGuiSliderFlags_Logarithmic = 32;
        public const int ImGuiSliderFlags_NoRoundToFormat = 64;
        public const int ImGuiSliderFlags_NoInput = 128;
        public const int ImGuiSliderFlags_InvalidMask_ = 1879048207;

        // Pseudo enum 'ImGuiMouseButton_' @ cimgui.h:727:9
        public const int ImGuiMouseButton_Left = 0;
        public const int ImGuiMouseButton_Right = 1;
        public const int ImGuiMouseButton_Middle = 2;
        public const int ImGuiMouseButton_COUNT = 5;

        // Pseudo enum 'ImGuiMouseCursor_' @ cimgui.h:733:9
        public const int ImGuiMouseCursor_None = -1;
        public const int ImGuiMouseCursor_Arrow = 0;
        public const int ImGuiMouseCursor_TextInput = 1;
        public const int ImGuiMouseCursor_ResizeAll = 2;
        public const int ImGuiMouseCursor_ResizeNS = 3;
        public const int ImGuiMouseCursor_ResizeEW = 4;
        public const int ImGuiMouseCursor_ResizeNESW = 5;
        public const int ImGuiMouseCursor_ResizeNWSE = 6;
        public const int ImGuiMouseCursor_Hand = 7;
        public const int ImGuiMouseCursor_NotAllowed = 8;
        public const int ImGuiMouseCursor_COUNT = 9;

        // Pseudo enum 'ImGuiCond_' @ cimgui.h:746:9
        public const int ImGuiCond_None = 0;
        public const int ImGuiCond_Always = 1;
        public const int ImGuiCond_Once = 2;
        public const int ImGuiCond_FirstUseEver = 4;
        public const int ImGuiCond_Appearing = 8;

        // Pseudo enum 'ImDrawFlags_' @ cimgui.h:1035:9
        public const int ImDrawFlags_None = 0;
        public const int ImDrawFlags_Closed = 1;
        public const int ImDrawFlags_RoundCornersTopLeft = 16;
        public const int ImDrawFlags_RoundCornersTopRight = 32;
        public const int ImDrawFlags_RoundCornersBottomLeft = 64;
        public const int ImDrawFlags_RoundCornersBottomRight = 128;
        public const int ImDrawFlags_RoundCornersNone = 256;
        public const int ImDrawFlags_RoundCornersTop = 48;
        public const int ImDrawFlags_RoundCornersBottom = 192;
        public const int ImDrawFlags_RoundCornersLeft = 80;
        public const int ImDrawFlags_RoundCornersRight = 160;
        public const int ImDrawFlags_RoundCornersAll = 240;
        public const int ImDrawFlags_RoundCornersDefault_ = 240;
        public const int ImDrawFlags_RoundCornersMask_ = 496;

        // Pseudo enum 'ImDrawListFlags_' @ cimgui.h:1051:9
        public const int ImDrawListFlags_None = 0;
        public const int ImDrawListFlags_AntiAliasedLines = 1;
        public const int ImDrawListFlags_AntiAliasedLinesUseTex = 2;
        public const int ImDrawListFlags_AntiAliasedFill = 4;
        public const int ImDrawListFlags_AllowVtxOffset = 8;

        // Pseudo enum 'ImFontAtlasFlags_' @ cimgui.h:1142:9
        public const int ImFontAtlasFlags_None = 0;
        public const int ImFontAtlasFlags_NoPowerOfTwoHeight = 1;
        public const int ImFontAtlasFlags_NoMouseCursors = 2;
        public const int ImFontAtlasFlags_NoBakedLines = 4;

        // Pseudo enum 'ImGuiViewportFlags_' @ cimgui.h:1202:9
        public const int ImGuiViewportFlags_None = 0;
        public const int ImGuiViewportFlags_IsPlatformWindow = 1;
        public const int ImGuiViewportFlags_IsPlatformMonitor = 2;
        public const int ImGuiViewportFlags_OwnedByApp = 4;

        // Pseudo enum 'ImGuiItemFlags_' @ cimgui.h:1352:9
        public const int ImGuiItemFlags_None = 0;
        public const int ImGuiItemFlags_NoTabStop = 1;
        public const int ImGuiItemFlags_ButtonRepeat = 2;
        public const int ImGuiItemFlags_Disabled = 4;
        public const int ImGuiItemFlags_NoNav = 8;
        public const int ImGuiItemFlags_NoNavDefaultFocus = 16;
        public const int ImGuiItemFlags_SelectableDontClosePopup = 32;
        public const int ImGuiItemFlags_MixedValue = 64;
        public const int ImGuiItemFlags_ReadOnly = 128;
        public const int ImGuiItemFlags_Inputable = 256;

        // Pseudo enum 'ImGuiItemStatusFlags_' @ cimgui.h:1364:9
        public const int ImGuiItemStatusFlags_None = 0;
        public const int ImGuiItemStatusFlags_HoveredRect = 1;
        public const int ImGuiItemStatusFlags_HasDisplayRect = 2;
        public const int ImGuiItemStatusFlags_Edited = 4;
        public const int ImGuiItemStatusFlags_ToggledSelection = 8;
        public const int ImGuiItemStatusFlags_ToggledOpen = 16;
        public const int ImGuiItemStatusFlags_HasDeactivated = 32;
        public const int ImGuiItemStatusFlags_Deactivated = 64;
        public const int ImGuiItemStatusFlags_HoveredWindow = 128;
        public const int ImGuiItemStatusFlags_FocusedByTabbing = 256;

        // Pseudo enum 'ImGuiInputTextFlagsPrivate_' @ cimgui.h:1376:9
        public const int ImGuiInputTextFlags_Multiline = 67108864;
        public const int ImGuiInputTextFlags_NoMarkEdited = 134217728;
        public const int ImGuiInputTextFlags_MergedItem = 268435456;

        // Pseudo enum 'ImGuiButtonFlagsPrivate_' @ cimgui.h:1381:9
        public const int ImGuiButtonFlags_PressedOnClick = 16;
        public const int ImGuiButtonFlags_PressedOnClickRelease = 32;
        public const int ImGuiButtonFlags_PressedOnClickReleaseAnywhere = 64;
        public const int ImGuiButtonFlags_PressedOnRelease = 128;
        public const int ImGuiButtonFlags_PressedOnDoubleClick = 256;
        public const int ImGuiButtonFlags_PressedOnDragDropHold = 512;
        public const int ImGuiButtonFlags_Repeat = 1024;
        public const int ImGuiButtonFlags_FlattenChildren = 2048;
        public const int ImGuiButtonFlags_AllowItemOverlap = 4096;
        public const int ImGuiButtonFlags_DontClosePopups = 8192;
        public const int ImGuiButtonFlags_AlignTextBaseLine = 32768;
        public const int ImGuiButtonFlags_NoKeyModifiers = 65536;
        public const int ImGuiButtonFlags_NoHoldingActiveId = 131072;
        public const int ImGuiButtonFlags_NoNavFocus = 262144;
        public const int ImGuiButtonFlags_NoHoveredOnFocus = 524288;
        public const int ImGuiButtonFlags_PressedOnMask_ = 1008;
        public const int ImGuiButtonFlags_PressedOnDefault_ = 32;

        // Pseudo enum 'ImGuiComboFlagsPrivate_' @ cimgui.h:1400:9
        public const int ImGuiComboFlags_CustomPreview = 1048576;

        // Pseudo enum 'ImGuiSliderFlagsPrivate_' @ cimgui.h:1403:9
        public const int ImGuiSliderFlags_Vertical = 1048576;
        public const int ImGuiSliderFlags_ReadOnly = 2097152;

        // Pseudo enum 'ImGuiSelectableFlagsPrivate_' @ cimgui.h:1407:9
        public const int ImGuiSelectableFlags_NoHoldingActiveID = 1048576;
        public const int ImGuiSelectableFlags_SelectOnNav = 2097152;
        public const int ImGuiSelectableFlags_SelectOnClick = 4194304;
        public const int ImGuiSelectableFlags_SelectOnRelease = 8388608;
        public const int ImGuiSelectableFlags_SpanAvailWidth = 16777216;
        public const int ImGuiSelectableFlags_DrawHoveredWhenHeld = 33554432;
        public const int ImGuiSelectableFlags_SetNavIdOnHover = 67108864;
        public const int ImGuiSelectableFlags_NoPadWithHalfSpacing = 134217728;

        // Pseudo enum 'ImGuiTreeNodeFlagsPrivate_' @ cimgui.h:1417:9
        public const int ImGuiTreeNodeFlags_ClipLabelForTrailingButton = 1048576;

        // Pseudo enum 'ImGuiSeparatorFlags_' @ cimgui.h:1420:9
        public const int ImGuiSeparatorFlags_None = 0;
        public const int ImGuiSeparatorFlags_Horizontal = 1;
        public const int ImGuiSeparatorFlags_Vertical = 2;
        public const int ImGuiSeparatorFlags_SpanAllColumns = 4;

        // Pseudo enum 'ImGuiTextFlags_' @ cimgui.h:1426:9
        public const int ImGuiTextFlags_None = 0;
        public const int ImGuiTextFlags_NoWidthForLargeClippedText = 1;

        // Pseudo enum 'ImGuiTooltipFlags_' @ cimgui.h:1430:9
        public const int ImGuiTooltipFlags_None = 0;
        public const int ImGuiTooltipFlags_OverridePreviousTooltip = 1;

        // Pseudo enum 'ImGuiLayoutType_' @ cimgui.h:1434:9
        public const int ImGuiLayoutType_Horizontal = 0;
        public const int ImGuiLayoutType_Vertical = 1;

        // Pseudo enum 'ImGuiDataTypePrivate_' @ cimgui.h:1471:9
        public const int ImGuiDataType_String = 11;
        public const int ImGuiDataType_Pointer = 12;
        public const int ImGuiDataType_ID = 13;

        // Pseudo enum 'ImGuiNextWindowDataFlags_' @ cimgui.h:1548:9
        public const int ImGuiNextWindowDataFlags_None = 0;
        public const int ImGuiNextWindowDataFlags_HasPos = 1;
        public const int ImGuiNextWindowDataFlags_HasSize = 2;
        public const int ImGuiNextWindowDataFlags_HasContentSize = 4;
        public const int ImGuiNextWindowDataFlags_HasCollapsed = 8;
        public const int ImGuiNextWindowDataFlags_HasSizeConstraint = 16;
        public const int ImGuiNextWindowDataFlags_HasFocus = 32;
        public const int ImGuiNextWindowDataFlags_HasBgAlpha = 64;
        public const int ImGuiNextWindowDataFlags_HasScroll = 128;

        // Pseudo enum 'ImGuiNextItemDataFlags_' @ cimgui.h:1577:9
        public const int ImGuiNextItemDataFlags_None = 0;
        public const int ImGuiNextItemDataFlags_HasWidth = 1;
        public const int ImGuiNextItemDataFlags_HasOpen = 2;

        // Pseudo enum 'ImGuiKeyPrivate_' @ cimgui.h:1633:9
        public const int ImGuiKey_LegacyNativeKey_BEGIN = 0;
        public const int ImGuiKey_LegacyNativeKey_END = 512;
        public const int ImGuiKey_Gamepad_BEGIN = 617;
        public const int ImGuiKey_Gamepad_END = 641;

        // Pseudo enum 'ImGuiActivateFlags_' @ cimgui.h:1726:9
        public const int ImGuiActivateFlags_None = 0;
        public const int ImGuiActivateFlags_PreferInput = 1;
        public const int ImGuiActivateFlags_PreferTweak = 2;
        public const int ImGuiActivateFlags_TryToPreserveState = 4;

        // Pseudo enum 'ImGuiScrollFlags_' @ cimgui.h:1732:9
        public const int ImGuiScrollFlags_None = 0;
        public const int ImGuiScrollFlags_KeepVisibleEdgeX = 1;
        public const int ImGuiScrollFlags_KeepVisibleEdgeY = 2;
        public const int ImGuiScrollFlags_KeepVisibleCenterX = 4;
        public const int ImGuiScrollFlags_KeepVisibleCenterY = 8;
        public const int ImGuiScrollFlags_AlwaysCenterX = 16;
        public const int ImGuiScrollFlags_AlwaysCenterY = 32;
        public const int ImGuiScrollFlags_NoScrollParent = 64;
        public const int ImGuiScrollFlags_MaskX_ = 21;
        public const int ImGuiScrollFlags_MaskY_ = 42;

        // Pseudo enum 'ImGuiNavHighlightFlags_' @ cimgui.h:1744:9
        public const int ImGuiNavHighlightFlags_None = 0;
        public const int ImGuiNavHighlightFlags_TypeDefault = 1;
        public const int ImGuiNavHighlightFlags_TypeThin = 2;
        public const int ImGuiNavHighlightFlags_AlwaysDraw = 4;
        public const int ImGuiNavHighlightFlags_NoRounding = 8;

        // Pseudo enum 'ImGuiNavDirSourceFlags_' @ cimgui.h:1751:9
        public const int ImGuiNavDirSourceFlags_None = 0;
        public const int ImGuiNavDirSourceFlags_RawKeyboard = 1;
        public const int ImGuiNavDirSourceFlags_Keyboard = 2;
        public const int ImGuiNavDirSourceFlags_PadDPad = 4;
        public const int ImGuiNavDirSourceFlags_PadLStick = 8;

        // Pseudo enum 'ImGuiNavMoveFlags_' @ cimgui.h:1758:9
        public const int ImGuiNavMoveFlags_None = 0;
        public const int ImGuiNavMoveFlags_LoopX = 1;
        public const int ImGuiNavMoveFlags_LoopY = 2;
        public const int ImGuiNavMoveFlags_WrapX = 4;
        public const int ImGuiNavMoveFlags_WrapY = 8;
        public const int ImGuiNavMoveFlags_AllowCurrentNavId = 16;
        public const int ImGuiNavMoveFlags_AlsoScoreVisibleSet = 32;
        public const int ImGuiNavMoveFlags_ScrollToEdgeY = 64;
        public const int ImGuiNavMoveFlags_Forwarded = 128;
        public const int ImGuiNavMoveFlags_DebugNoResult = 256;
        public const int ImGuiNavMoveFlags_FocusApi = 512;
        public const int ImGuiNavMoveFlags_Tabbing = 1024;
        public const int ImGuiNavMoveFlags_Activate = 2048;
        public const int ImGuiNavMoveFlags_DontSetNavHighlight = 4096;

        // Pseudo enum 'ImGuiOldColumnFlags_' @ cimgui.h:1790:9
        public const int ImGuiOldColumnFlags_None = 0;
        public const int ImGuiOldColumnFlags_NoBorder = 1;
        public const int ImGuiOldColumnFlags_NoResize = 2;
        public const int ImGuiOldColumnFlags_NoPreserveWidths = 4;
        public const int ImGuiOldColumnFlags_NoForceWithinWindow = 8;
        public const int ImGuiOldColumnFlags_GrowParentContentsSize = 16;

        // Pseudo enum 'ImGuiTabBarFlagsPrivate_' @ cimgui.h:2287:9
        public const int ImGuiTabBarFlags_DockNode = 1048576;
        public const int ImGuiTabBarFlags_IsFocused = 2097152;
        public const int ImGuiTabBarFlags_SaveSettings = 4194304;

        // Pseudo enum 'ImGuiTabItemFlagsPrivate_' @ cimgui.h:2292:9
        public const int ImGuiTabItemFlags_SectionMask_ = 192;
        public const int ImGuiTabItemFlags_NoCloseButton = 1048576;
        public const int ImGuiTabItemFlags_Button = 2097152;

        #region C2CS.Runtime

        public static class Runtime
        {

            /// <summary>
            ///     A boolean value type with the same memory layout as a <see cref="byte" /> in both managed and unmanaged contexts;
            ///     equivalent to a standard bool found in C/C++/ObjC where <c>0</c> is <c>false</c> and any other value is
            ///     <c>true</c>.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly struct CBool : IEquatable<CBool>
            {
                private readonly byte _value;

                private CBool(bool value)
                {
                    _value = Convert.ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CBool" />.</returns>
                public static implicit operator CBool(bool value)
                {
                    return FromBoolean(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CBool" />.</returns>
                public static CBool FromBoolean(bool value)
                {
                    return new CBool(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="bool" />.</returns>
                public static implicit operator bool(CBool value)
                {
                    return ToBoolean(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="bool" />.</returns>
                public static bool ToBoolean(CBool value)
                {
                    return Convert.ToBoolean(value._value);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return ToBoolean(this).ToString();
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CBool b && Equals(b);
                }

                /// <inheritdoc />
                public bool Equals(CBool other)
                {
                    return _value == other._value;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _value.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CBool left, CBool right)
                {
                    return left._value == right._value;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CBool left, CBool right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CBool left, CBool right)
                {
                    return left._value == right._value;
                }
            }

            /// <summary>
            ///     A value type with the same memory layout as a <see cref="byte" /> in a managed context and <c>char</c> in
            ///     an unmanaged context.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly struct CChar : IEquatable<byte>, IEquatable<CChar>
            {
                private readonly byte _value;

                private CChar(byte value)
                {
                    _value = Convert.ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CChar" />.</returns>
                public static implicit operator CChar(byte value)
                {
                    return FromByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CChar" />.</returns>
                public static CChar FromByte(byte value)
                {
                    return new CChar(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="byte" />.</returns>
                public static implicit operator byte(CChar value)
                {
                    return ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="byte" />.</returns>
                public static byte ToByte(CChar value)
                {
                    return value._value;
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return _value.ToString(CultureInfo.InvariantCulture);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CChar value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(byte other)
                {
                    return _value == other;
                }

                /// <inheritdoc />
                public bool Equals(CChar other)
                {
                    return _value == other._value;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _value.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CChar left, CChar right)
                {
                    return left._value == right._value;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CChar left, CChar right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CChar left, CChar right)
                {
                    return left._value == right._value;
                }
            }

            /// <summary>
            ///     A value type with the memory layout of a <c>wchar_t</c> in an unmanaged context. The memory layout in a
            ///     managed context depends on the operating system or otherwise on preprocessor directives defines.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly struct CCharWide : IEquatable<CCharWide>
            {
#if SIZEOF_WCHAR_T_1
    private readonly byte _value;
#elif SIZEOF_WCHAR_T_2
    private readonly ushort _value;
#elif SIZEOF_WCHAR_T_4
    private readonly uint _value;
#else
                private readonly ushort _value;
#endif

                private CCharWide(byte value)
                {
#if SIZEOF_WCHAR_T_1
        _value = Convert.ToByte(value);
#elif SIZEOF_WCHAR_T_2
        _value = Convert.ToUInt16(value);
#elif SIZEOF_WCHAR_T_4
        _value = Convert.ToUInt32(value);
#else
                    _value = Convert.ToUInt16(value);
#endif
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return _value.ToString(CultureInfo.InvariantCulture);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CCharWide value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(CCharWide other)
                {
                    return _value == other._value;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _value.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CCharWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CCharWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CCharWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CCharWide left, CCharWide right)
                {
                    return left._value == right._value;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CCharWide" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CCharWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CCharWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CCharWide left, CCharWide right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CCharWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CCharWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CCharWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CCharWide left, CCharWide right)
                {
                    return left._value == right._value;
                }
            }

            /// <summary>
            ///     A pointer value type of bytes that represent a string; the C type `char*`.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly unsafe struct CString : IEquatable<CString>
            {
                internal readonly nint _pointer;

                /// <summary>
                ///     Gets a value indicating whether this <see cref="CString" /> is a null pointer.
                /// </summary>
                public bool IsNull => _pointer == 0;

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CString(byte* value)
                {
                    _pointer = (nint)value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CString(nint value)
                {
                    _pointer = value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="s">The string value.</param>
                public CString(string s)
                {
                    _pointer = CStrings.CString(s);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static explicit operator CString(nint value)
                {
                    return FromIntPtr(value);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString FromIntPtr(nint value)
                {
                    return new CString(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static implicit operator CString(byte* value)
                {
                    return From(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString From(byte* value)
                {
                    return new CString((nint)value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static implicit operator nint(CString value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static nint ToIntPtr(CString value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CString" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static implicit operator string(CString value)
                {
                    return ToString(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CString" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static string ToString(CString value)
                {
                    return CStrings.String(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static implicit operator CString(string s)
                {
                    return FromString(s);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString FromString(string s)
                {
                    return CStrings.CString(s);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return CStrings.String(this);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CString value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(CString other)
                {
                    return _pointer == other._pointer;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _pointer.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CString" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CString left, CString right)
                {
                    return left._pointer == right._pointer;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CString left, CString right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CString" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CString left, CString right)
                {
                    return left._pointer == right._pointer;
                }
            }

            /// <summary>
            ///     The collection of utility methods for interoperability with C style strings in C#.
            /// </summary>
            public static unsafe class CStrings
            {
                private static readonly Dictionary<uint, CString> StringHashesToPointers = new();
                private static readonly Dictionary<nint, string> PointersToStrings = new();
                private static readonly Dictionary<uint, CStringWide> StringHashesToPointersWide = new();
                private static readonly Dictionary<nint, string> PointersToStringsWide = new();

                /// <summary>
                ///     Converts a C style string (ANSI or UTF-8) of type `char` (one dimensional byte array
                ///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying if not already cached.
                /// </summary>
                /// <param name="value">A pointer to the C string.</param>
                /// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
                public static string String(CString value)
                {
                    if (value.IsNull)
                    {
                        return string.Empty;
                    }

                    if (PointersToStrings.TryGetValue(value._pointer, out var result))
                    {
                        return result;
                    }

                    var hash = Djb2((byte*)value._pointer);
                    if (StringHashesToPointers.TryGetValue(hash, out var pointer2))
                    {
                        result = PointersToStrings[pointer2._pointer];
                        return result;
                    }

                    // calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
                    // https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
                    result = Marshal.PtrToStringAnsi(value._pointer);

                    if (string.IsNullOrEmpty(result))
                    {
                        return string.Empty;
                    }

                    StringHashesToPointers.Add(hash, value);
                    PointersToStrings.Add(value._pointer, result);

                    return result;
                }

                /// <summary>
                ///     Converts a C style string (unicode) of type `wchar_t` (one dimensional ushort array
                ///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying if not already cached.
                /// </summary>
                /// <param name="value">A pointer to the C string.</param>
                /// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
                public static string StringWide(CStringWide value)
                {
                    if (value.IsNull)
                    {
                        return string.Empty;
                    }

                    if (PointersToStringsWide.TryGetValue(value._pointer, out var result))
                    {
                        return result;
                    }

                    var hash = Djb2((byte*)value._pointer);
                    if (StringHashesToPointersWide.TryGetValue(hash, out var pointer2))
                    {
                        result = PointersToStringsWide[pointer2._pointer];
                        return result;
                    }

                    // calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
                    // https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
                    result = Marshal.PtrToStringUni(pointer2._pointer);

                    if (string.IsNullOrEmpty(result))
                    {
                        return string.Empty;
                    }

                    StringHashesToPointersWide.Add(hash, value);
                    PointersToStringsWide.Add(value._pointer, result);

                    return result;
                }

                /// <summary>
                ///     Converts a UTF-16 <see cref="string" /> to a C style string (one dimensional byte array terminated by a
                ///     <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <param name="str">The <see cref="string" />.</param>
                /// <returns>A C string pointer.</returns>
                public static CString CString(string str)
                {
                    var hash = Djb2(str);
                    if (StringHashesToPointers.TryGetValue(hash, out var r))
                    {
                        return r;
                    }

                    // ReSharper disable once JoinDeclarationAndInitializer
                    var pointer = Marshal.StringToHGlobalAnsi(str);
                    StringHashesToPointers.Add(hash, new CString(pointer));
                    PointersToStrings.Add(pointer, str);

                    return new CString(pointer);
                }

                /// <summary>
                ///     Converts a C string pointer (one dimensional byte array terminated by a
                ///     <c>0x0</c>) for a specified <see cref="string" /> by allocating and copying if not already cached.
                /// </summary>
                /// <param name="str">The <see cref="string" />.</param>
                /// <returns>A C string pointer.</returns>
                public static CStringWide CStringWide(string str)
                {
                    var hash = Djb2(str);
                    if (StringHashesToPointersWide.TryGetValue(hash, out var r))
                    {
                        return r;
                    }

                    // ReSharper disable once JoinDeclarationAndInitializer
                    var pointer = Marshal.StringToHGlobalUni(str);
                    StringHashesToPointersWide.Add(hash, new CStringWide(pointer));
                    PointersToStringsWide.Add(pointer, str);

                    return new CStringWide(pointer);
                }

                /// <summary>
                ///     Converts an array of strings to an array of C strings of type `char` (multi-dimensional array of one
                ///     dimensional byte arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <remarks>
                ///     <para>Calls <see cref="CString" />.</para>
                /// </remarks>
                /// <param name="values">The strings.</param>
                /// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
                public static CString* CStringArray(ReadOnlySpan<string> values)
                {
                    var pointerSize = IntPtr.Size;
                    var result = (CString*)Marshal.AllocHGlobal(pointerSize * values.Length);
                    for (var i = 0; i < values.Length; ++i)
                    {
                        var @string = values[i];
                        var cString = CString(@string);
                        result[i] = cString;
                    }

                    return result;
                }

                /// <summary>
                ///     Converts an array of strings to an array of C strings of type `wchar_t` (multi-dimensional array of one
                ///     dimensional ushort arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <remarks>
                ///     <para>Calls <see cref="CString" />.</para>
                /// </remarks>
                /// <param name="values">The strings.</param>
                /// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
                public static CStringWide* CStringWideArray(ReadOnlySpan<string> values)
                {
                    var pointerSize = IntPtr.Size;
                    var result = (CStringWide*)Marshal.AllocHGlobal(pointerSize * values.Length);
                    for (var i = 0; i < values.Length; ++i)
                    {
                        var @string = values[i];
                        var cString = CStringWide(@string);
                        result[i] = cString;
                    }

                    return result;
                }

                /// <summary>
                ///     Frees the memory for all previously allocated C strings and releases references to all <see cref="string" />
                ///     objects which happened during <see cref="String" />, <see cref="StringWide" />, <see cref="CString" />
                ///     or <see cref="CStringWide" />. Does <b>not</b> garbage collect.
                /// </summary>
                public static void FreeAllStrings()
                {
                    foreach (var (ptr, _) in PointersToStrings)
                    {
                        Marshal.FreeHGlobal(ptr);
                    }

                    // We can not guarantee that the application has not a strong reference the string since it was allocated,
                    //  so we have to let the GC take the wheel here. Thus, this method should NOT garbage collect; that's
                    //  on the responsibility of the application developer. The best we can do is just remove any and all strong
                    //  references we have here to the strings.

                    StringHashesToPointers.Clear();
                    PointersToStrings.Clear();
                }

                /// <summary>
                ///     Frees the memory for specific previously allocated C strings and releases associated references to
                ///     <see cref="string" /> objects which happened during <see cref="String" /> or
                ///     <see cref="CString" />. Does <b>not</b> garbage collect.
                /// </summary>
                /// <param name="pointers">The C string pointers.</param>
                /// <param name="count">The number of C string pointers.</param>
                public static void FreeCStrings(CString* pointers, int count)
                {
                    for (var i = 0; i < count; i++)
                    {
                        var ptr = pointers[i];
                        FreeCString(ptr);
                    }

                    Marshal.FreeHGlobal((IntPtr)pointers);
                }

                /// <summary>
                ///     Frees the memory for the previously allocated C string and releases reference to the
                ///     <see cref="string" /> object which happened during <see cref="String" /> or <see cref="CString" />.
                ///     Does <b>not</b> garbage collect.
                /// </summary>
                /// <param name="value">The string.</param>
                public static void FreeCString(CString value)
                {
                    if (!PointersToStrings.ContainsKey(value._pointer))
                    {
                        return;
                    }

                    Marshal.FreeHGlobal(value);
                    var hash = Djb2(value);
                    StringHashesToPointers.Remove(hash);
                    PointersToStrings.Remove(value._pointer);
                }

                /// <summary>
                ///     Frees the memory for the previously allocated C string and releases reference to the
                ///     <see cref="string" /> object which happened during <see cref="StringWide" /> or <see cref="CStringWide" />.
                ///     Does <b>not</b> garbage collect.
                /// </summary>
                /// <param name="value">The string.</param>
                public static void FreeCStringWide(CStringWide value)
                {
                    if (!PointersToStringsWide.ContainsKey(value._pointer))
                    {
                        return;
                    }

                    Marshal.FreeHGlobal(value);
                    var hash = Djb2(value);
                    StringHashesToPointersWide.Remove(hash);
                    PointersToStringsWide.Remove(value._pointer);
                }

                // djb2 is named after https://en.wikipedia.org/wiki/Daniel_J._Bernstein
                //  References:
                //  (1) https://stackoverflow.com/a/7666577/2171957
                //  (2) http://www.cse.yorku.ca/~oz/hash.html
                //  (3) https://groups.google.com/g/comp.lang.c/c/lSKWXiuNOAk/m/zstZ3SRhCjgJ
                private static uint Djb2(byte* str)
                {
                    uint hash = 5381;

                    unchecked
                    {
                        uint c;
                        while ((c = *str++) != 0)
                        {
                            hash = (hash << 5) + hash + c; // hash * 33 + c
                        }
                    }

                    return hash;
                }

                private static uint Djb2(string str)
                {
                    uint hash = 5381;

                    // ReSharper disable once ForeachCanBeConvertedToQueryUsingAnotherGetEnumerator
                    foreach (var c in str)
                    {
                        hash = (hash << 5) + hash + c; // hash * 33 + c
                    }

                    return hash;
                }
            }

            /// <summary>
            ///     A pointer value type that represents a wide string; C type `wchar_t*`.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly unsafe struct CStringWide : IEquatable<CStringWide>
            {
                internal readonly nint _pointer;

                /// <summary>
                ///     Gets a value indicating whether this <see cref="CStringWide" /> is a null pointer.
                /// </summary>
                public bool IsNull => _pointer == 0;

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CStringWide(byte* value)
                {
                    _pointer = (nint)value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CStringWide(nint value)
                {
                    _pointer = value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="s">The string value.</param>
                public CStringWide(string s)
                {
                    _pointer = CStrings.CStringWide(s);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static explicit operator CStringWide(nint value)
                {
                    return FromIntPtr(value);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide FromIntPtr(nint value)
                {
                    return new CStringWide(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static implicit operator CStringWide(byte* value)
                {
                    return From(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide From(byte* value)
                {
                    return new CStringWide((nint)value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static implicit operator nint(CStringWide value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static nint ToIntPtr(CStringWide value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CStringWide" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static implicit operator string(CStringWide value)
                {
                    return ToString(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CStringWide" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static string ToString(CStringWide value)
                {
                    return CStrings.StringWide(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static implicit operator CStringWide(string s)
                {
                    return FromString(s);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide FromString(string s)
                {
                    return CStrings.CStringWide(s);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return CStrings.StringWide(this);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CStringWide value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(CStringWide other)
                {
                    return _pointer == other._pointer;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _pointer.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CStringWide left, CStringWide right)
                {
                    return left._pointer == right._pointer;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CStringWide left, CStringWide right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CStringWide left, CStringWide right)
                {
                    return left._pointer == right._pointer;
                }
            }
        }

        #endregion
    }
}

